
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08006d20  08006d20  00016d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070bc  080070bc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080070bc  080070bc  000170bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070c4  080070c4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070c4  080070c4  000170c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070c8  080070c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080070cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001d4  080072a0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  080072a0  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f517  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024a8  00000000  00000000  0002f75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  00031c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae7  00000000  00000000  00032a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024640  00000000  00000000  000334ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125fd  00000000  00000000  00057b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000deeeb  00000000  00000000  0006a13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004aa8  00000000  00000000  00149028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0014dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d04 	.word	0x08006d04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08006d04 	.word	0x08006d04

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000ef8:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000efa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f24:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <MX_ADC1_Init+0xa0>)
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f42:	480e      	ldr	r0, [pc, #56]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f44:	f000 fc78 	bl	8001838 <HAL_ADC_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f000 f95f 	bl	8001210 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f52:	2304      	movs	r3, #4
 8000f54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f64:	f000 fe16 	bl	8001b94 <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f6e:	f000 f94f 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001f0 	.word	0x200001f0
 8000f80:	40012000 	.word	0x40012000
 8000f84:	0f000001 	.word	0x0f000001

08000f88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a17      	ldr	r2, [pc, #92]	; (8001004 <HAL_ADC_MspInit+0x7c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d127      	bne.n	8000ffa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_ADC_MspInit+0x80>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a15      	ldr	r2, [pc, #84]	; (8001008 <HAL_ADC_MspInit+0x80>)
 8000fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_ADC_MspInit+0x80>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_ADC_MspInit+0x80>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <HAL_ADC_MspInit+0x80>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_ADC_MspInit+0x80>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <HAL_ADC_MspInit+0x84>)
 8000ff6:	f001 f8e1 	bl	80021bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3728      	adds	r7, #40	; 0x28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40012000 	.word	0x40012000
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000

08001010 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_GPIO_Init+0x30>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <MX_GPIO_Init+0x30>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_GPIO_Init+0x30>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800

08001044 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800104c:	1d39      	adds	r1, r7, #4
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	2201      	movs	r2, #1
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <__io_putchar+0x20>)
 8001056:	f002 fcc0 	bl	80039da <HAL_UART_Transmit>
 return ch;
 800105a:	687b      	ldr	r3, [r7, #4]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000284 	.word	0x20000284

08001068 <__io_getchar>:
GETCHAR_PROTOTYPE
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 uint8_t ch = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	71fb      	strb	r3, [r7, #7]
 __HAL_UART_CLEAR_OREFLAG(&huart2);
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <__io_getchar+0x48>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__io_getchar+0x48>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	683b      	ldr	r3, [r7, #0]
 HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001088:	1df9      	adds	r1, r7, #7
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	2201      	movs	r2, #1
 8001090:	4807      	ldr	r0, [pc, #28]	; (80010b0 <__io_getchar+0x48>)
 8001092:	f002 fd34 	bl	8003afe <HAL_UART_Receive>
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001096:	1df9      	adds	r1, r7, #7
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	2201      	movs	r2, #1
 800109e:	4804      	ldr	r0, [pc, #16]	; (80010b0 <__io_getchar+0x48>)
 80010a0:	f002 fc9b 	bl	80039da <HAL_UART_Transmit>
 return ch;
 80010a4:	79fb      	ldrb	r3, [r7, #7]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000284 	.word	0x20000284

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setvbuf(stdin, NULL, _IONBF, 0);
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <main+0x88>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6858      	ldr	r0, [r3, #4]
 80010c0:	2300      	movs	r3, #0
 80010c2:	2202      	movs	r2, #2
 80010c4:	2100      	movs	r1, #0
 80010c6:	f003 fdd9 	bl	8004c7c <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ca:	f000 fb1f 	bl	800170c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ce:	f000 f83f 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d2:	f7ff ff9d 	bl	8001010 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010d6:	f000 f9cb 	bl	8001470 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80010da:	f000 fa7b 	bl	80015d4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80010de:	f7ff ff01 	bl	8000ee4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t rawValue;
  uint16_t dutyCycle;

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80010e2:	2104      	movs	r1, #4
 80010e4:	4816      	ldr	r0, [pc, #88]	; (8001140 <main+0x8c>)
 80010e6:	f001 ffaf 	bl	8003048 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80010ea:	4816      	ldr	r0, [pc, #88]	; (8001144 <main+0x90>)
 80010ec:	f000 fbe8 	bl	80018c0 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	4813      	ldr	r0, [pc, #76]	; (8001144 <main+0x90>)
 80010f6:	f000 fcb5 	bl	8001a64 <HAL_ADC_PollForConversion>
	  //čitanje rezultata konverzije
	  rawValue = HAL_ADC_GetValue(&hadc1);
 80010fa:	4812      	ldr	r0, [pc, #72]	; (8001144 <main+0x90>)
 80010fc:	f000 fd3d 	bl	8001b7a <HAL_ADC_GetValue>
 8001100:	4603      	mov	r3, r0
 8001102:	80fb      	strh	r3, [r7, #6]
      //skaliranje rezultata konverzije
	  dutyCycle = (rawValue * 1000) / 4095;
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <main+0x94>)
 8001110:	fb82 1203 	smull	r1, r2, r2, r3
 8001114:	441a      	add	r2, r3
 8001116:	12d2      	asrs	r2, r2, #11
 8001118:	17db      	asrs	r3, r3, #31
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	80bb      	strh	r3, [r7, #4]
	  //postavljanje duty cycle-a
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, dutyCycle);
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <main+0x8c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	88ba      	ldrh	r2, [r7, #4]
 8001124:	639a      	str	r2, [r3, #56]	; 0x38


	  printf("ADC rawValue: %d\r\n", rawValue);
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	4619      	mov	r1, r3
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <main+0x98>)
 800112c:	f003 fd94 	bl	8004c58 <iprintf>
	  HAL_Delay(1000);
 8001130:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001134:	f000 fb5c 	bl	80017f0 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001138:	e7d7      	b.n	80010ea <main+0x36>
 800113a:	bf00      	nop
 800113c:	20000064 	.word	0x20000064
 8001140:	2000023c 	.word	0x2000023c
 8001144:	200001f0 	.word	0x200001f0
 8001148:	80080081 	.word	0x80080081
 800114c:	08006d20 	.word	0x08006d20

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b094      	sub	sp, #80	; 0x50
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	2234      	movs	r2, #52	; 0x34
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f003 fe7d 	bl	8004e5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <SystemClock_Config+0xb8>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	4a22      	ldr	r2, [pc, #136]	; (8001208 <SystemClock_Config+0xb8>)
 800117e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001182:	6413      	str	r3, [r2, #64]	; 0x40
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <SystemClock_Config+0xb8>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <SystemClock_Config+0xbc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800119c:	4a1b      	ldr	r2, [pc, #108]	; (800120c <SystemClock_Config+0xbc>)
 800119e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <SystemClock_Config+0xbc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2310      	movs	r3, #16
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011bc:	2300      	movs	r3, #0
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fc51 	bl	8002a6c <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011d0:	f000 f81e 	bl	8001210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	230f      	movs	r3, #15
 80011d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 f978 	bl	80024e4 <HAL_RCC_ClockConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011fa:	f000 f809 	bl	8001210 <Error_Handler>
  }
}
 80011fe:	bf00      	nop
 8001200:	3750      	adds	r7, #80	; 0x50
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001218:	e7fe      	b.n	8001218 <Error_Handler+0x8>
	...

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_MspInit+0x4c>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_MspInit+0x4c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_MspInit+0x4c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <NMI_Handler+0x4>

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <MemManage_Handler+0x4>

0800127e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler+0x4>

0800128a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b8:	f000 fa7a 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return 1;
 80012c4:	2301      	movs	r3, #1
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <_kill>:

int _kill(int pid, int sig)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012da:	f003 fe13 	bl	8004f04 <__errno>
 80012de:	4603      	mov	r3, r0
 80012e0:	2216      	movs	r2, #22
 80012e2:	601a      	str	r2, [r3, #0]
  return -1;
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_exit>:

void _exit (int status)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ffe7 	bl	80012d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001302:	e7fe      	b.n	8001302 <_exit+0x12>

08001304 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	e00a      	b.n	800132c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001316:	f7ff fea7 	bl	8001068 <__io_getchar>
 800131a:	4601      	mov	r1, r0
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	60ba      	str	r2, [r7, #8]
 8001322:	b2ca      	uxtb	r2, r1
 8001324:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	429a      	cmp	r2, r3
 8001332:	dbf0      	blt.n	8001316 <_read+0x12>
  }

  return len;
 8001334:	687b      	ldr	r3, [r7, #4]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	e009      	b.n	8001364 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	60ba      	str	r2, [r7, #8]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fe73 	bl	8001044 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	429a      	cmp	r2, r3
 800136a:	dbf1      	blt.n	8001350 <_write+0x12>
  }
  return len;
 800136c:	687b      	ldr	r3, [r7, #4]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <_close>:

int _close(int file)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800139e:	605a      	str	r2, [r3, #4]
  return 0;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <_isatty>:

int _isatty(int file)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013b6:	2301      	movs	r3, #1
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e8:	4a14      	ldr	r2, [pc, #80]	; (800143c <_sbrk+0x5c>)
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <_sbrk+0x60>)
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d102      	bne.n	8001402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <_sbrk+0x64>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <_sbrk+0x68>)
 8001400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	429a      	cmp	r2, r3
 800140e:	d207      	bcs.n	8001420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001410:	f003 fd78 	bl	8004f04 <__errno>
 8001414:	4603      	mov	r3, r0
 8001416:	220c      	movs	r2, #12
 8001418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	e009      	b.n	8001434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <_sbrk+0x64>)
 8001430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20020000 	.word	0x20020000
 8001440:	00000400 	.word	0x00000400
 8001444:	20000238 	.word	0x20000238
 8001448:	20000418 	.word	0x20000418

0800144c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <SystemInit+0x20>)
 8001452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <SystemInit+0x20>)
 8001458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800145c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001476:	f107 0320 	add.w	r3, r7, #32
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <MX_TIM2_Init+0xb0>)
 8001494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001498:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 800149a:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MX_TIM2_Init+0xb0>)
 800149c:	220f      	movs	r2, #15
 800149e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <MX_TIM2_Init+0xb0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_TIM2_Init+0xb0>)
 80014a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ae:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <MX_TIM2_Init+0xb0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_TIM2_Init+0xb0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014ba:	4819      	ldr	r0, [pc, #100]	; (8001520 <MX_TIM2_Init+0xb0>)
 80014bc:	f001 fd74 	bl	8002fa8 <HAL_TIM_PWM_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80014c6:	f7ff fea3 	bl	8001210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	4619      	mov	r1, r3
 80014d8:	4811      	ldr	r0, [pc, #68]	; (8001520 <MX_TIM2_Init+0xb0>)
 80014da:	f002 f9b5 	bl	8003848 <HAL_TIMEx_MasterConfigSynchronization>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80014e4:	f7ff fe94 	bl	8001210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e8:	2360      	movs	r3, #96	; 0x60
 80014ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80014ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2204      	movs	r2, #4
 80014fe:	4619      	mov	r1, r3
 8001500:	4807      	ldr	r0, [pc, #28]	; (8001520 <MX_TIM2_Init+0xb0>)
 8001502:	f001 fe69 	bl	80031d8 <HAL_TIM_PWM_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800150c:	f7ff fe80 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <MX_TIM2_Init+0xb0>)
 8001512:	f000 f827 	bl	8001564 <HAL_TIM_MspPostInit>

}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	; 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000023c 	.word	0x2000023c

08001524 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001534:	d10d      	bne.n	8001552 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_TIM_PWM_MspInit+0x3c>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <HAL_TIM_PWM_MspInit+0x3c>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_TIM_PWM_MspInit+0x3c>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800

08001564 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001584:	d11d      	bne.n	80015c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_TIM_MspPostInit+0x68>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <HAL_TIM_MspPostInit+0x68>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_TIM_MspPostInit+0x68>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015a2:	2302      	movs	r3, #2
 80015a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	4619      	mov	r1, r3
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <HAL_TIM_MspPostInit+0x6c>)
 80015be:	f000 fdfd 	bl	80021bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000

080015d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <MX_USART2_UART_Init+0x50>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 80015e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_USART2_UART_Init+0x4c>)
 800160c:	f002 f998 	bl	8003940 <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001616:	f7ff fdfb 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000284 	.word	0x20000284
 8001624:	40004400 	.word	0x40004400

08001628 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a19      	ldr	r2, [pc, #100]	; (80016ac <HAL_UART_MspInit+0x84>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d12b      	bne.n	80016a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_UART_MspInit+0x88>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <HAL_UART_MspInit+0x88>)
 8001654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_UART_MspInit+0x88>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_UART_MspInit+0x88>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <HAL_UART_MspInit+0x88>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_UART_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001682:	230c      	movs	r3, #12
 8001684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001692:	2307      	movs	r3, #7
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <HAL_UART_MspInit+0x8c>)
 800169e:	f000 fd8d 	bl	80021bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	; 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40004400 	.word	0x40004400
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020000 	.word	0x40020000

080016b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016be:	490e      	ldr	r1, [pc, #56]	; (80016f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016d4:	4c0b      	ldr	r4, [pc, #44]	; (8001704 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e2:	f7ff feb3 	bl	800144c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e6:	f003 fc13 	bl	8004f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ea:	f7ff fce3 	bl	80010b4 <main>
  bx  lr    
 80016ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80016fc:	080070cc 	.word	0x080070cc
  ldr r2, =_sbss
 8001700:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001704:	20000418 	.word	0x20000418

08001708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC_IRQHandler>
	...

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_Init+0x40>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_Init+0x40>)
 8001722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_Init+0x40>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 fd0d 	bl	8002154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	200f      	movs	r0, #15
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fd6c 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fd17 	bl	80021a2 <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 fced 	bl	800216a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008
 80017d4:	200002c8 	.word	0x200002c8

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	200002c8 	.word	0x200002c8

080017f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff ffee 	bl	80017d8 <HAL_GetTick>
 80017fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d005      	beq.n	8001816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_Delay+0x44>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001816:	bf00      	nop
 8001818:	f7ff ffde 	bl	80017d8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d8f7      	bhi.n	8001818 <HAL_Delay+0x28>
  {
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000008 	.word	0x20000008

08001838 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e033      	b.n	80018b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fb96 	bl	8000f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	d118      	bne.n	80018a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800187e:	f023 0302 	bic.w	r3, r3, #2
 8001882:	f043 0202 	orr.w	r2, r3, #2
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fab4 	bl	8001df8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f023 0303 	bic.w	r3, r3, #3
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
 80018a6:	e001      	b.n	80018ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_ADC_Start+0x1a>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e0b2      	b.n	8001a40 <HAL_ADC_Start+0x180>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d018      	beq.n	8001922 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001900:	4b52      	ldr	r3, [pc, #328]	; (8001a4c <HAL_ADC_Start+0x18c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a52      	ldr	r2, [pc, #328]	; (8001a50 <HAL_ADC_Start+0x190>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	0c9a      	lsrs	r2, r3, #18
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001914:	e002      	b.n	800191c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	3b01      	subs	r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f9      	bne.n	8001916 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b01      	cmp	r3, #1
 800192e:	d17a      	bne.n	8001a26 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800195a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800196a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800196e:	d106      	bne.n	800197e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	f023 0206 	bic.w	r2, r3, #6
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	645a      	str	r2, [r3, #68]	; 0x44
 800197c:	e002      	b.n	8001984 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_ADC_Start+0x194>)
 800198e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001998:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d12a      	bne.n	80019fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a2b      	ldr	r2, [pc, #172]	; (8001a58 <HAL_ADC_Start+0x198>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d015      	beq.n	80019dc <HAL_ADC_Start+0x11c>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <HAL_ADC_Start+0x19c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d105      	bne.n	80019c6 <HAL_ADC_Start+0x106>
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_ADC_Start+0x194>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00a      	beq.n	80019dc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a25      	ldr	r2, [pc, #148]	; (8001a60 <HAL_ADC_Start+0x1a0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d136      	bne.n	8001a3e <HAL_ADC_Start+0x17e>
 80019d0:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_ADC_Start+0x194>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d130      	bne.n	8001a3e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d129      	bne.n	8001a3e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	e020      	b.n	8001a3e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a15      	ldr	r2, [pc, #84]	; (8001a58 <HAL_ADC_Start+0x198>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d11b      	bne.n	8001a3e <HAL_ADC_Start+0x17e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d114      	bne.n	8001a3e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	e00b      	b.n	8001a3e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f043 0210 	orr.w	r2, r3, #16
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f043 0201 	orr.w	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	431bde83 	.word	0x431bde83
 8001a54:	40012300 	.word	0x40012300
 8001a58:	40012000 	.word	0x40012000
 8001a5c:	40012100 	.word	0x40012100
 8001a60:	40012200 	.word	0x40012200

08001a64 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a80:	d113      	bne.n	8001aaa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a90:	d10b      	bne.n	8001aaa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f043 0220 	orr.w	r2, r3, #32
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e063      	b.n	8001b72 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001aaa:	f7ff fe95 	bl	80017d8 <HAL_GetTick>
 8001aae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ab0:	e021      	b.n	8001af6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d01d      	beq.n	8001af6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d007      	beq.n	8001ad0 <HAL_ADC_PollForConversion+0x6c>
 8001ac0:	f7ff fe8a 	bl	80017d8 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d212      	bcs.n	8001af6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d00b      	beq.n	8001af6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f043 0204 	orr.w	r2, r3, #4
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e03d      	b.n	8001b72 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d1d6      	bne.n	8001ab2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0212 	mvn.w	r2, #18
 8001b0c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d123      	bne.n	8001b70 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d11f      	bne.n	8001b70 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d006      	beq.n	8001b4c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d111      	bne.n	8001b70 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d105      	bne.n	8001b70 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f043 0201 	orr.w	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1c>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e113      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x244>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b09      	cmp	r3, #9
 8001bbe:	d925      	bls.n	8001c0c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68d9      	ldr	r1, [r3, #12]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b1e      	subs	r3, #30
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43da      	mvns	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	400a      	ands	r2, r1
 8001be4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68d9      	ldr	r1, [r3, #12]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4403      	add	r3, r0
 8001bfe:	3b1e      	subs	r3, #30
 8001c00:	409a      	lsls	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	e022      	b.n	8001c52 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6919      	ldr	r1, [r3, #16]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	2207      	movs	r2, #7
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6919      	ldr	r1, [r3, #16]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	4603      	mov	r3, r0
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4403      	add	r3, r0
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d824      	bhi.n	8001ca4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	3b05      	subs	r3, #5
 8001c6c:	221f      	movs	r2, #31
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	400a      	ands	r2, r1
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	4618      	mov	r0, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	3b05      	subs	r3, #5
 8001c96:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca2:	e04c      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b0c      	cmp	r3, #12
 8001caa:	d824      	bhi.n	8001cf6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b23      	subs	r3, #35	; 0x23
 8001cbe:	221f      	movs	r2, #31
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43da      	mvns	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	400a      	ands	r2, r1
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3b23      	subs	r3, #35	; 0x23
 8001ce8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf4:	e023      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	3b41      	subs	r3, #65	; 0x41
 8001d08:	221f      	movs	r2, #31
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	400a      	ands	r2, r1
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b41      	subs	r3, #65	; 0x41
 8001d32:	fa00 f203 	lsl.w	r2, r0, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d3e:	4b29      	ldr	r3, [pc, #164]	; (8001de4 <HAL_ADC_ConfigChannel+0x250>)
 8001d40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a28      	ldr	r2, [pc, #160]	; (8001de8 <HAL_ADC_ConfigChannel+0x254>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d10f      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x1d8>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b12      	cmp	r3, #18
 8001d52:	d10b      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <HAL_ADC_ConfigChannel+0x254>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d12b      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x23a>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_ADC_ConfigChannel+0x258>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d003      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0x1f4>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b11      	cmp	r3, #17
 8001d86:	d122      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a11      	ldr	r2, [pc, #68]	; (8001dec <HAL_ADC_ConfigChannel+0x258>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d111      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_ADC_ConfigChannel+0x25c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <HAL_ADC_ConfigChannel+0x260>)
 8001db0:	fba2 2303 	umull	r2, r3, r2, r3
 8001db4:	0c9a      	lsrs	r2, r3, #18
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dc0:	e002      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f9      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	40012300 	.word	0x40012300
 8001de8:	40012000 	.word	0x40012000
 8001dec:	10000012 	.word	0x10000012
 8001df0:	20000000 	.word	0x20000000
 8001df4:	431bde83 	.word	0x431bde83

08001df8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e00:	4b79      	ldr	r3, [pc, #484]	; (8001fe8 <ADC_Init+0x1f0>)
 8001e02:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	021a      	lsls	r2, r3, #8
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6899      	ldr	r1, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	4a58      	ldr	r2, [pc, #352]	; (8001fec <ADC_Init+0x1f4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d022      	beq.n	8001ed6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6899      	ldr	r1, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ec0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	e00f      	b.n	8001ef6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ee4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ef4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0202 	bic.w	r2, r2, #2
 8001f04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6899      	ldr	r1, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7e1b      	ldrb	r3, [r3, #24]
 8001f10:	005a      	lsls	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01b      	beq.n	8001f5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6859      	ldr	r1, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	035a      	lsls	r2, r3, #13
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	e007      	b.n	8001f6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	051a      	lsls	r2, r3, #20
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6899      	ldr	r1, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fae:	025a      	lsls	r2, r3, #9
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6899      	ldr	r1, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	029a      	lsls	r2, r3, #10
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40012300 	.word	0x40012300
 8001fec:	0f000001 	.word	0x0f000001

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	6039      	str	r1, [r7, #0]
 800205e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002064:	2b00      	cmp	r3, #0
 8002066:	db0a      	blt.n	800207e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	b2da      	uxtb	r2, r3
 800206c:	490c      	ldr	r1, [pc, #48]	; (80020a0 <__NVIC_SetPriority+0x4c>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	440b      	add	r3, r1
 8002078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800207c:	e00a      	b.n	8002094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4908      	ldr	r1, [pc, #32]	; (80020a4 <__NVIC_SetPriority+0x50>)
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	3b04      	subs	r3, #4
 800208c:	0112      	lsls	r2, r2, #4
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	440b      	add	r3, r1
 8002092:	761a      	strb	r2, [r3, #24]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000e100 	.word	0xe000e100
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f1c3 0307 	rsb	r3, r3, #7
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	bf28      	it	cs
 80020c6:	2304      	movcs	r3, #4
 80020c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3304      	adds	r3, #4
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d902      	bls.n	80020d8 <NVIC_EncodePriority+0x30>
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3b03      	subs	r3, #3
 80020d6:	e000      	b.n	80020da <NVIC_EncodePriority+0x32>
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	401a      	ands	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	43d9      	mvns	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	4313      	orrs	r3, r2
         );
}
 8002102:	4618      	mov	r0, r3
 8002104:	3724      	adds	r7, #36	; 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002120:	d301      	bcc.n	8002126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002122:	2301      	movs	r3, #1
 8002124:	e00f      	b.n	8002146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <SysTick_Config+0x40>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800212e:	210f      	movs	r1, #15
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	f7ff ff8e 	bl	8002054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <SysTick_Config+0x40>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <SysTick_Config+0x40>)
 8002140:	2207      	movs	r2, #7
 8002142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	e000e010 	.word	0xe000e010

08002154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff ff47 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800217c:	f7ff ff5c 	bl	8002038 <__NVIC_GetPriorityGrouping>
 8002180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	6978      	ldr	r0, [r7, #20]
 8002188:	f7ff ff8e 	bl	80020a8 <NVIC_EncodePriority>
 800218c:	4602      	mov	r2, r0
 800218e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff5d 	bl	8002054 <__NVIC_SetPriority>
}
 800219a:	bf00      	nop
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffb0 	bl	8002110 <SysTick_Config>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	e165      	b.n	80024a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	f040 8154 	bne.w	800249e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d005      	beq.n	800220e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220a:	2b02      	cmp	r3, #2
 800220c:	d130      	bne.n	8002270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	2203      	movs	r2, #3
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002244:	2201      	movs	r2, #1
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f003 0201 	and.w	r2, r3, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b03      	cmp	r3, #3
 800227a:	d017      	beq.n	80022ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d123      	bne.n	8002300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	08da      	lsrs	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3208      	adds	r2, #8
 80022c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	220f      	movs	r2, #15
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	08da      	lsrs	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3208      	adds	r2, #8
 80022fa:	69b9      	ldr	r1, [r7, #24]
 80022fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0203 	and.w	r2, r3, #3
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80ae 	beq.w	800249e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b5d      	ldr	r3, [pc, #372]	; (80024bc <HAL_GPIO_Init+0x300>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a5c      	ldr	r2, [pc, #368]	; (80024bc <HAL_GPIO_Init+0x300>)
 800234c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b5a      	ldr	r3, [pc, #360]	; (80024bc <HAL_GPIO_Init+0x300>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800235e:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <HAL_GPIO_Init+0x304>)
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3302      	adds	r3, #2
 8002366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	220f      	movs	r2, #15
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4f      	ldr	r2, [pc, #316]	; (80024c4 <HAL_GPIO_Init+0x308>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d025      	beq.n	80023d6 <HAL_GPIO_Init+0x21a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4e      	ldr	r2, [pc, #312]	; (80024c8 <HAL_GPIO_Init+0x30c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01f      	beq.n	80023d2 <HAL_GPIO_Init+0x216>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4d      	ldr	r2, [pc, #308]	; (80024cc <HAL_GPIO_Init+0x310>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d019      	beq.n	80023ce <HAL_GPIO_Init+0x212>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4c      	ldr	r2, [pc, #304]	; (80024d0 <HAL_GPIO_Init+0x314>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d013      	beq.n	80023ca <HAL_GPIO_Init+0x20e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4b      	ldr	r2, [pc, #300]	; (80024d4 <HAL_GPIO_Init+0x318>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00d      	beq.n	80023c6 <HAL_GPIO_Init+0x20a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4a      	ldr	r2, [pc, #296]	; (80024d8 <HAL_GPIO_Init+0x31c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d007      	beq.n	80023c2 <HAL_GPIO_Init+0x206>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a49      	ldr	r2, [pc, #292]	; (80024dc <HAL_GPIO_Init+0x320>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d101      	bne.n	80023be <HAL_GPIO_Init+0x202>
 80023ba:	2306      	movs	r3, #6
 80023bc:	e00c      	b.n	80023d8 <HAL_GPIO_Init+0x21c>
 80023be:	2307      	movs	r3, #7
 80023c0:	e00a      	b.n	80023d8 <HAL_GPIO_Init+0x21c>
 80023c2:	2305      	movs	r3, #5
 80023c4:	e008      	b.n	80023d8 <HAL_GPIO_Init+0x21c>
 80023c6:	2304      	movs	r3, #4
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x21c>
 80023ca:	2303      	movs	r3, #3
 80023cc:	e004      	b.n	80023d8 <HAL_GPIO_Init+0x21c>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_Init+0x21c>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_GPIO_Init+0x21c>
 80023d6:	2300      	movs	r3, #0
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	f002 0203 	and.w	r2, r2, #3
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	4093      	lsls	r3, r2
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e8:	4935      	ldr	r1, [pc, #212]	; (80024c0 <HAL_GPIO_Init+0x304>)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f6:	4b3a      	ldr	r3, [pc, #232]	; (80024e0 <HAL_GPIO_Init+0x324>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800241a:	4a31      	ldr	r2, [pc, #196]	; (80024e0 <HAL_GPIO_Init+0x324>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002420:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <HAL_GPIO_Init+0x324>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002444:	4a26      	ldr	r2, [pc, #152]	; (80024e0 <HAL_GPIO_Init+0x324>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800244a:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <HAL_GPIO_Init+0x324>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800246e:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_GPIO_Init+0x324>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002474:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <HAL_GPIO_Init+0x324>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002498:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <HAL_GPIO_Init+0x324>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3301      	adds	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b0f      	cmp	r3, #15
 80024a8:	f67f ae96 	bls.w	80021d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40013800 	.word	0x40013800
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40020400 	.word	0x40020400
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020c00 	.word	0x40020c00
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40021400 	.word	0x40021400
 80024dc:	40021800 	.word	0x40021800
 80024e0:	40013c00 	.word	0x40013c00

080024e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0cc      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f8:	4b68      	ldr	r3, [pc, #416]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d90c      	bls.n	8002520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b65      	ldr	r3, [pc, #404]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b63      	ldr	r3, [pc, #396]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0b8      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002538:	4b59      	ldr	r3, [pc, #356]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4a58      	ldr	r2, [pc, #352]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002542:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002550:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4a52      	ldr	r2, [pc, #328]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800255a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b50      	ldr	r3, [pc, #320]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	494d      	ldr	r1, [pc, #308]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d044      	beq.n	8002604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d119      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e07f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a2:	4b3f      	ldr	r3, [pc, #252]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e06f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b2:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e067      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c2:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f023 0203 	bic.w	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4934      	ldr	r1, [pc, #208]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d4:	f7ff f900 	bl	80017d8 <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025dc:	f7ff f8fc 	bl	80017d8 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e04f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 020c 	and.w	r2, r3, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	429a      	cmp	r2, r3
 8002602:	d1eb      	bne.n	80025dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002604:	4b25      	ldr	r3, [pc, #148]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d20c      	bcs.n	800262c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b22      	ldr	r3, [pc, #136]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e032      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4916      	ldr	r1, [pc, #88]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	490e      	ldr	r1, [pc, #56]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800266a:	f000 f855 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 800266e:	4602      	mov	r2, r0
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	490a      	ldr	r1, [pc, #40]	; (80026a4 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	5ccb      	ldrb	r3, [r1, r3]
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_RCC_ClockConfig+0x1c8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f860 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023c00 	.word	0x40023c00
 80026a0:	40023800 	.word	0x40023800
 80026a4:	08006d34 	.word	0x08006d34
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000004 	.word	0x20000004

080026b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000000 	.word	0x20000000

080026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026cc:	f7ff fff0 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0a9b      	lsrs	r3, r3, #10
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4903      	ldr	r1, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	08006d44 	.word	0x08006d44

080026f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026f4:	f7ff ffdc 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0b5b      	lsrs	r3, r3, #13
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4903      	ldr	r1, [pc, #12]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40023800 	.word	0x40023800
 8002714:	08006d44 	.word	0x08006d44

08002718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800271c:	b0a6      	sub	sp, #152	; 0x98
 800271e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800273e:	4bc8      	ldr	r3, [pc, #800]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b0c      	cmp	r3, #12
 8002748:	f200 817e 	bhi.w	8002a48 <HAL_RCC_GetSysClockFreq+0x330>
 800274c:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <HAL_RCC_GetSysClockFreq+0x3c>)
 800274e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002752:	bf00      	nop
 8002754:	08002789 	.word	0x08002789
 8002758:	08002a49 	.word	0x08002a49
 800275c:	08002a49 	.word	0x08002a49
 8002760:	08002a49 	.word	0x08002a49
 8002764:	08002791 	.word	0x08002791
 8002768:	08002a49 	.word	0x08002a49
 800276c:	08002a49 	.word	0x08002a49
 8002770:	08002a49 	.word	0x08002a49
 8002774:	08002799 	.word	0x08002799
 8002778:	08002a49 	.word	0x08002a49
 800277c:	08002a49 	.word	0x08002a49
 8002780:	08002a49 	.word	0x08002a49
 8002784:	08002903 	.word	0x08002903
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002788:	4bb6      	ldr	r3, [pc, #728]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x34c>)
 800278a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800278e:	e15f      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002790:	4bb5      	ldr	r3, [pc, #724]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x350>)
 8002792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002796:	e15b      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002798:	4bb1      	ldr	r3, [pc, #708]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027a4:	4bae      	ldr	r3, [pc, #696]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d031      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b0:	4bab      	ldr	r3, [pc, #684]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	2200      	movs	r2, #0
 80027b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80027ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c2:	663b      	str	r3, [r7, #96]	; 0x60
 80027c4:	2300      	movs	r3, #0
 80027c6:	667b      	str	r3, [r7, #100]	; 0x64
 80027c8:	4ba7      	ldr	r3, [pc, #668]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x350>)
 80027ca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80027ce:	462a      	mov	r2, r5
 80027d0:	fb03 f202 	mul.w	r2, r3, r2
 80027d4:	2300      	movs	r3, #0
 80027d6:	4621      	mov	r1, r4
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	4aa2      	ldr	r2, [pc, #648]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x350>)
 80027e0:	4621      	mov	r1, r4
 80027e2:	fba1 1202 	umull	r1, r2, r1, r2
 80027e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027e8:	460a      	mov	r2, r1
 80027ea:	67ba      	str	r2, [r7, #120]	; 0x78
 80027ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80027ee:	4413      	add	r3, r2
 80027f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027f6:	2200      	movs	r2, #0
 80027f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80027fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002800:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002804:	f7fe f9f0 	bl	8000be8 <__aeabi_uldivmod>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4613      	mov	r3, r2
 800280e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002812:	e064      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002814:	4b92      	ldr	r3, [pc, #584]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	2200      	movs	r2, #0
 800281c:	653b      	str	r3, [r7, #80]	; 0x50
 800281e:	657a      	str	r2, [r7, #84]	; 0x54
 8002820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002826:	64bb      	str	r3, [r7, #72]	; 0x48
 8002828:	2300      	movs	r3, #0
 800282a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800282c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002830:	4622      	mov	r2, r4
 8002832:	462b      	mov	r3, r5
 8002834:	f04f 0000 	mov.w	r0, #0
 8002838:	f04f 0100 	mov.w	r1, #0
 800283c:	0159      	lsls	r1, r3, #5
 800283e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002842:	0150      	lsls	r0, r2, #5
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4621      	mov	r1, r4
 800284a:	1a51      	subs	r1, r2, r1
 800284c:	6139      	str	r1, [r7, #16]
 800284e:	4629      	mov	r1, r5
 8002850:	eb63 0301 	sbc.w	r3, r3, r1
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002862:	4659      	mov	r1, fp
 8002864:	018b      	lsls	r3, r1, #6
 8002866:	4651      	mov	r1, sl
 8002868:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800286c:	4651      	mov	r1, sl
 800286e:	018a      	lsls	r2, r1, #6
 8002870:	4651      	mov	r1, sl
 8002872:	ebb2 0801 	subs.w	r8, r2, r1
 8002876:	4659      	mov	r1, fp
 8002878:	eb63 0901 	sbc.w	r9, r3, r1
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002888:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800288c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002890:	4690      	mov	r8, r2
 8002892:	4699      	mov	r9, r3
 8002894:	4623      	mov	r3, r4
 8002896:	eb18 0303 	adds.w	r3, r8, r3
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	462b      	mov	r3, r5
 800289e:	eb49 0303 	adc.w	r3, r9, r3
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028b0:	4629      	mov	r1, r5
 80028b2:	028b      	lsls	r3, r1, #10
 80028b4:	4621      	mov	r1, r4
 80028b6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028ba:	4621      	mov	r1, r4
 80028bc:	028a      	lsls	r2, r1, #10
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028c6:	2200      	movs	r2, #0
 80028c8:	643b      	str	r3, [r7, #64]	; 0x40
 80028ca:	647a      	str	r2, [r7, #68]	; 0x44
 80028cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028d0:	f7fe f98a 	bl	8000be8 <__aeabi_uldivmod>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4613      	mov	r3, r2
 80028da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028de:	4b60      	ldr	r3, [pc, #384]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0c1b      	lsrs	r3, r3, #16
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	3301      	adds	r3, #1
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80028f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002900:	e0a6      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002902:	4b57      	ldr	r3, [pc, #348]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800290a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800290e:	4b54      	ldr	r3, [pc, #336]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d02a      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291a:	4b51      	ldr	r3, [pc, #324]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	099b      	lsrs	r3, r3, #6
 8002920:	2200      	movs	r2, #0
 8002922:	63bb      	str	r3, [r7, #56]	; 0x38
 8002924:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002928:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800292c:	2100      	movs	r1, #0
 800292e:	4b4e      	ldr	r3, [pc, #312]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x350>)
 8002930:	fb03 f201 	mul.w	r2, r3, r1
 8002934:	2300      	movs	r3, #0
 8002936:	fb00 f303 	mul.w	r3, r0, r3
 800293a:	4413      	add	r3, r2
 800293c:	4a4a      	ldr	r2, [pc, #296]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x350>)
 800293e:	fba0 1202 	umull	r1, r2, r0, r2
 8002942:	677a      	str	r2, [r7, #116]	; 0x74
 8002944:	460a      	mov	r2, r1
 8002946:	673a      	str	r2, [r7, #112]	; 0x70
 8002948:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800294a:	4413      	add	r3, r2
 800294c:	677b      	str	r3, [r7, #116]	; 0x74
 800294e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002952:	2200      	movs	r2, #0
 8002954:	633b      	str	r3, [r7, #48]	; 0x30
 8002956:	637a      	str	r2, [r7, #52]	; 0x34
 8002958:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800295c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002960:	f7fe f942 	bl	8000be8 <__aeabi_uldivmod>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4613      	mov	r3, r2
 800296a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800296e:	e05b      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002970:	4b3b      	ldr	r3, [pc, #236]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	099b      	lsrs	r3, r3, #6
 8002976:	2200      	movs	r2, #0
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
 800297a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002982:	623b      	str	r3, [r7, #32]
 8002984:	2300      	movs	r3, #0
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
 8002988:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800298c:	4642      	mov	r2, r8
 800298e:	464b      	mov	r3, r9
 8002990:	f04f 0000 	mov.w	r0, #0
 8002994:	f04f 0100 	mov.w	r1, #0
 8002998:	0159      	lsls	r1, r3, #5
 800299a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800299e:	0150      	lsls	r0, r2, #5
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4641      	mov	r1, r8
 80029a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80029aa:	4649      	mov	r1, r9
 80029ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029c4:	ebb2 040a 	subs.w	r4, r2, sl
 80029c8:	eb63 050b 	sbc.w	r5, r3, fp
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	00eb      	lsls	r3, r5, #3
 80029d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029da:	00e2      	lsls	r2, r4, #3
 80029dc:	4614      	mov	r4, r2
 80029de:	461d      	mov	r5, r3
 80029e0:	4643      	mov	r3, r8
 80029e2:	18e3      	adds	r3, r4, r3
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	464b      	mov	r3, r9
 80029e8:	eb45 0303 	adc.w	r3, r5, r3
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029fa:	4629      	mov	r1, r5
 80029fc:	028b      	lsls	r3, r1, #10
 80029fe:	4621      	mov	r1, r4
 8002a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a04:	4621      	mov	r1, r4
 8002a06:	028a      	lsls	r2, r1, #10
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a10:	2200      	movs	r2, #0
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	61fa      	str	r2, [r7, #28]
 8002a16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a1a:	f7fe f8e5 	bl	8000be8 <__aeabi_uldivmod>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4613      	mov	r3, r2
 8002a24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a28:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	0f1b      	lsrs	r3, r3, #28
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002a36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a46:	e003      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3798      	adds	r7, #152	; 0x98
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	017d7840 	.word	0x017d7840

08002a6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e28d      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8083 	beq.w	8002b92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a8c:	4b94      	ldr	r3, [pc, #592]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d019      	beq.n	8002acc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a98:	4b91      	ldr	r3, [pc, #580]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002aa4:	4b8e      	ldr	r3, [pc, #568]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ab0:	d00c      	beq.n	8002acc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ab2:	4b8b      	ldr	r3, [pc, #556]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d112      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002abe:	4b88      	ldr	r3, [pc, #544]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aca:	d10b      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002acc:	4b84      	ldr	r3, [pc, #528]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d05b      	beq.n	8002b90 <HAL_RCC_OscConfig+0x124>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d157      	bne.n	8002b90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e25a      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aec:	d106      	bne.n	8002afc <HAL_RCC_OscConfig+0x90>
 8002aee:	4b7c      	ldr	r3, [pc, #496]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a7b      	ldr	r2, [pc, #492]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e01d      	b.n	8002b38 <HAL_RCC_OscConfig+0xcc>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0xb4>
 8002b06:	4b76      	ldr	r3, [pc, #472]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a75      	ldr	r2, [pc, #468]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b73      	ldr	r3, [pc, #460]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a72      	ldr	r2, [pc, #456]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0xcc>
 8002b20:	4b6f      	ldr	r3, [pc, #444]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a6e      	ldr	r2, [pc, #440]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b6c      	ldr	r3, [pc, #432]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a6b      	ldr	r2, [pc, #428]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fe4a 	bl	80017d8 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fe fe46 	bl	80017d8 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	; 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e21f      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	4b61      	ldr	r3, [pc, #388]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0xdc>
 8002b66:	e014      	b.n	8002b92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fe36 	bl	80017d8 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe fe32 	bl	80017d8 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e20b      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b82:	4b57      	ldr	r3, [pc, #348]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x104>
 8002b8e:	e000      	b.n	8002b92 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d06f      	beq.n	8002c7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b9e:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d017      	beq.n	8002bda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002baa:	4b4d      	ldr	r3, [pc, #308]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d105      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bb6:	4b4a      	ldr	r3, [pc, #296]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00b      	beq.n	8002bda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d11c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bce:	4b44      	ldr	r3, [pc, #272]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d116      	bne.n	8002c08 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bda:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x186>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e1d3      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4937      	ldr	r1, [pc, #220]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c06:	e03a      	b.n	8002c7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d020      	beq.n	8002c52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c10:	4b34      	ldr	r3, [pc, #208]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7fe fddf 	bl	80017d8 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1e:	f7fe fddb 	bl	80017d8 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e1b4      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c30:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3c:	4b28      	ldr	r3, [pc, #160]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4925      	ldr	r1, [pc, #148]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
 8002c50:	e015      	b.n	8002c7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fdbe 	bl	80017d8 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c60:	f7fe fdba 	bl	80017d8 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e193      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c72:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d036      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <HAL_RCC_OscConfig+0x27c>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fe fd9e 	bl	80017d8 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca0:	f7fe fd9a 	bl	80017d8 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e173      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x234>
 8002cbe:	e01b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc0:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <HAL_RCC_OscConfig+0x27c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fd87 	bl	80017d8 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ccc:	e00e      	b.n	8002cec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cce:	f7fe fd83 	bl	80017d8 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d907      	bls.n	8002cec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e15c      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	42470000 	.word	0x42470000
 8002ce8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cec:	4b8a      	ldr	r3, [pc, #552]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ea      	bne.n	8002cce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8097 	beq.w	8002e34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0a:	4b83      	ldr	r3, [pc, #524]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10f      	bne.n	8002d36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	4b7f      	ldr	r3, [pc, #508]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a7e      	ldr	r2, [pc, #504]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b7c      	ldr	r3, [pc, #496]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d32:	2301      	movs	r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b79      	ldr	r3, [pc, #484]	; (8002f1c <HAL_RCC_OscConfig+0x4b0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d118      	bne.n	8002d74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d42:	4b76      	ldr	r3, [pc, #472]	; (8002f1c <HAL_RCC_OscConfig+0x4b0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a75      	ldr	r2, [pc, #468]	; (8002f1c <HAL_RCC_OscConfig+0x4b0>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fd43 	bl	80017d8 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d56:	f7fe fd3f 	bl	80017d8 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e118      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	4b6c      	ldr	r3, [pc, #432]	; (8002f1c <HAL_RCC_OscConfig+0x4b0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCC_OscConfig+0x31e>
 8002d7c:	4b66      	ldr	r3, [pc, #408]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	4a65      	ldr	r2, [pc, #404]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6713      	str	r3, [r2, #112]	; 0x70
 8002d88:	e01c      	b.n	8002dc4 <HAL_RCC_OscConfig+0x358>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x340>
 8002d92:	4b61      	ldr	r3, [pc, #388]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	4a60      	ldr	r2, [pc, #384]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9e:	4b5e      	ldr	r3, [pc, #376]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	4a5d      	ldr	r2, [pc, #372]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6713      	str	r3, [r2, #112]	; 0x70
 8002daa:	e00b      	b.n	8002dc4 <HAL_RCC_OscConfig+0x358>
 8002dac:	4b5a      	ldr	r3, [pc, #360]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	4a59      	ldr	r2, [pc, #356]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	6713      	str	r3, [r2, #112]	; 0x70
 8002db8:	4b57      	ldr	r3, [pc, #348]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	4a56      	ldr	r2, [pc, #344]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002dbe:	f023 0304 	bic.w	r3, r3, #4
 8002dc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d015      	beq.n	8002df8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fd04 	bl	80017d8 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd4:	f7fe fd00 	bl	80017d8 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e0d7      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dea:	4b4b      	ldr	r3, [pc, #300]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0ee      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x368>
 8002df6:	e014      	b.n	8002e22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df8:	f7fe fcee 	bl	80017d8 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e00:	f7fe fcea 	bl	80017d8 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e0c1      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e16:	4b40      	ldr	r3, [pc, #256]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ee      	bne.n	8002e00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e28:	4b3b      	ldr	r3, [pc, #236]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	4a3a      	ldr	r2, [pc, #232]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80ad 	beq.w	8002f98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e3e:	4b36      	ldr	r3, [pc, #216]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d060      	beq.n	8002f0c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d145      	bne.n	8002ede <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e52:	4b33      	ldr	r3, [pc, #204]	; (8002f20 <HAL_RCC_OscConfig+0x4b4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe fcbe 	bl	80017d8 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe fcba 	bl	80017d8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e093      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	019b      	lsls	r3, r3, #6
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	3b01      	subs	r3, #1
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	071b      	lsls	r3, r3, #28
 8002eaa:	491b      	ldr	r1, [pc, #108]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_RCC_OscConfig+0x4b4>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fc8f 	bl	80017d8 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ebe:	f7fe fc8b 	bl	80017d8 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e064      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x452>
 8002edc:	e05c      	b.n	8002f98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_RCC_OscConfig+0x4b4>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7fe fc78 	bl	80017d8 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eec:	f7fe fc74 	bl	80017d8 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e04d      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x480>
 8002f0a:	e045      	b.n	8002f98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e040      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40007000 	.word	0x40007000
 8002f20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f24:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d030      	beq.n	8002f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d129      	bne.n	8002f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d122      	bne.n	8002f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f54:	4013      	ands	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d119      	bne.n	8002f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	085b      	lsrs	r3, r3, #1
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d10f      	bne.n	8002f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d107      	bne.n	8002f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40023800 	.word	0x40023800

08002fa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e041      	b.n	800303e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fe faa8 	bl	8001524 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	f000 f9b8 	bl	800335c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d109      	bne.n	800306c <HAL_TIM_PWM_Start+0x24>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	bf14      	ite	ne
 8003064:	2301      	movne	r3, #1
 8003066:	2300      	moveq	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e022      	b.n	80030b2 <HAL_TIM_PWM_Start+0x6a>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b04      	cmp	r3, #4
 8003070:	d109      	bne.n	8003086 <HAL_TIM_PWM_Start+0x3e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b01      	cmp	r3, #1
 800307c:	bf14      	ite	ne
 800307e:	2301      	movne	r3, #1
 8003080:	2300      	moveq	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	e015      	b.n	80030b2 <HAL_TIM_PWM_Start+0x6a>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b08      	cmp	r3, #8
 800308a:	d109      	bne.n	80030a0 <HAL_TIM_PWM_Start+0x58>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	bf14      	ite	ne
 8003098:	2301      	movne	r3, #1
 800309a:	2300      	moveq	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	e008      	b.n	80030b2 <HAL_TIM_PWM_Start+0x6a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e07c      	b.n	80031b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d104      	bne.n	80030ca <HAL_TIM_PWM_Start+0x82>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c8:	e013      	b.n	80030f2 <HAL_TIM_PWM_Start+0xaa>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d104      	bne.n	80030da <HAL_TIM_PWM_Start+0x92>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d8:	e00b      	b.n	80030f2 <HAL_TIM_PWM_Start+0xaa>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d104      	bne.n	80030ea <HAL_TIM_PWM_Start+0xa2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030e8:	e003      	b.n	80030f2 <HAL_TIM_PWM_Start+0xaa>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2201      	movs	r2, #1
 80030f8:	6839      	ldr	r1, [r7, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fb7e 	bl	80037fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2d      	ldr	r2, [pc, #180]	; (80031bc <HAL_TIM_PWM_Start+0x174>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d004      	beq.n	8003114 <HAL_TIM_PWM_Start+0xcc>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a2c      	ldr	r2, [pc, #176]	; (80031c0 <HAL_TIM_PWM_Start+0x178>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d101      	bne.n	8003118 <HAL_TIM_PWM_Start+0xd0>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <HAL_TIM_PWM_Start+0xd2>
 8003118:	2300      	movs	r3, #0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d007      	beq.n	800312e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800312c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a22      	ldr	r2, [pc, #136]	; (80031bc <HAL_TIM_PWM_Start+0x174>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d022      	beq.n	800317e <HAL_TIM_PWM_Start+0x136>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003140:	d01d      	beq.n	800317e <HAL_TIM_PWM_Start+0x136>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1f      	ldr	r2, [pc, #124]	; (80031c4 <HAL_TIM_PWM_Start+0x17c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d018      	beq.n	800317e <HAL_TIM_PWM_Start+0x136>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <HAL_TIM_PWM_Start+0x180>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <HAL_TIM_PWM_Start+0x136>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <HAL_TIM_PWM_Start+0x184>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00e      	beq.n	800317e <HAL_TIM_PWM_Start+0x136>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <HAL_TIM_PWM_Start+0x178>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d009      	beq.n	800317e <HAL_TIM_PWM_Start+0x136>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <HAL_TIM_PWM_Start+0x188>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d004      	beq.n	800317e <HAL_TIM_PWM_Start+0x136>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <HAL_TIM_PWM_Start+0x18c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d111      	bne.n	80031a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b06      	cmp	r3, #6
 800318e:	d010      	beq.n	80031b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a0:	e007      	b.n	80031b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0201 	orr.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40010000 	.word	0x40010000
 80031c0:	40010400 	.word	0x40010400
 80031c4:	40000400 	.word	0x40000400
 80031c8:	40000800 	.word	0x40000800
 80031cc:	40000c00 	.word	0x40000c00
 80031d0:	40014000 	.word	0x40014000
 80031d4:	40001800 	.word	0x40001800

080031d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e0ae      	b.n	8003354 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b0c      	cmp	r3, #12
 8003202:	f200 809f 	bhi.w	8003344 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003206:	a201      	add	r2, pc, #4	; (adr r2, 800320c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	08003241 	.word	0x08003241
 8003210:	08003345 	.word	0x08003345
 8003214:	08003345 	.word	0x08003345
 8003218:	08003345 	.word	0x08003345
 800321c:	08003281 	.word	0x08003281
 8003220:	08003345 	.word	0x08003345
 8003224:	08003345 	.word	0x08003345
 8003228:	08003345 	.word	0x08003345
 800322c:	080032c3 	.word	0x080032c3
 8003230:	08003345 	.word	0x08003345
 8003234:	08003345 	.word	0x08003345
 8003238:	08003345 	.word	0x08003345
 800323c:	08003303 	.word	0x08003303
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f928 	bl	800349c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0208 	orr.w	r2, r2, #8
 800325a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0204 	bic.w	r2, r2, #4
 800326a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6999      	ldr	r1, [r3, #24]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	619a      	str	r2, [r3, #24]
      break;
 800327e:	e064      	b.n	800334a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f978 	bl	800357c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800329a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6999      	ldr	r1, [r3, #24]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	021a      	lsls	r2, r3, #8
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	619a      	str	r2, [r3, #24]
      break;
 80032c0:	e043      	b.n	800334a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f9cd 	bl	8003668 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0208 	orr.w	r2, r2, #8
 80032dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0204 	bic.w	r2, r2, #4
 80032ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69d9      	ldr	r1, [r3, #28]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	61da      	str	r2, [r3, #28]
      break;
 8003300:	e023      	b.n	800334a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fa21 	bl	8003750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800331c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69da      	ldr	r2, [r3, #28]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800332c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69d9      	ldr	r1, [r3, #28]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	021a      	lsls	r2, r3, #8
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	61da      	str	r2, [r3, #28]
      break;
 8003342:	e002      	b.n	800334a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	75fb      	strb	r3, [r7, #23]
      break;
 8003348:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003352:	7dfb      	ldrb	r3, [r7, #23]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a40      	ldr	r2, [pc, #256]	; (8003470 <TIM_Base_SetConfig+0x114>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337a:	d00f      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a3d      	ldr	r2, [pc, #244]	; (8003474 <TIM_Base_SetConfig+0x118>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00b      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3c      	ldr	r2, [pc, #240]	; (8003478 <TIM_Base_SetConfig+0x11c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d007      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a3b      	ldr	r2, [pc, #236]	; (800347c <TIM_Base_SetConfig+0x120>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a3a      	ldr	r2, [pc, #232]	; (8003480 <TIM_Base_SetConfig+0x124>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d108      	bne.n	80033ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a2f      	ldr	r2, [pc, #188]	; (8003470 <TIM_Base_SetConfig+0x114>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d02b      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033bc:	d027      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a2c      	ldr	r2, [pc, #176]	; (8003474 <TIM_Base_SetConfig+0x118>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d023      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2b      	ldr	r2, [pc, #172]	; (8003478 <TIM_Base_SetConfig+0x11c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a2a      	ldr	r2, [pc, #168]	; (800347c <TIM_Base_SetConfig+0x120>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01b      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a29      	ldr	r2, [pc, #164]	; (8003480 <TIM_Base_SetConfig+0x124>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d017      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a28      	ldr	r2, [pc, #160]	; (8003484 <TIM_Base_SetConfig+0x128>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a27      	ldr	r2, [pc, #156]	; (8003488 <TIM_Base_SetConfig+0x12c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00f      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a26      	ldr	r2, [pc, #152]	; (800348c <TIM_Base_SetConfig+0x130>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00b      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a25      	ldr	r2, [pc, #148]	; (8003490 <TIM_Base_SetConfig+0x134>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d007      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a24      	ldr	r2, [pc, #144]	; (8003494 <TIM_Base_SetConfig+0x138>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d003      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a23      	ldr	r2, [pc, #140]	; (8003498 <TIM_Base_SetConfig+0x13c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d108      	bne.n	8003420 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <TIM_Base_SetConfig+0x114>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d003      	beq.n	8003454 <TIM_Base_SetConfig+0xf8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <TIM_Base_SetConfig+0x124>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d103      	bne.n	800345c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	615a      	str	r2, [r3, #20]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40010000 	.word	0x40010000
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800
 800347c:	40000c00 	.word	0x40000c00
 8003480:	40010400 	.word	0x40010400
 8003484:	40014000 	.word	0x40014000
 8003488:	40014400 	.word	0x40014400
 800348c:	40014800 	.word	0x40014800
 8003490:	40001800 	.word	0x40001800
 8003494:	40001c00 	.word	0x40001c00
 8003498:	40002000 	.word	0x40002000

0800349c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f023 0201 	bic.w	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0303 	bic.w	r3, r3, #3
 80034d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f023 0302 	bic.w	r3, r3, #2
 80034e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a20      	ldr	r2, [pc, #128]	; (8003574 <TIM_OC1_SetConfig+0xd8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <TIM_OC1_SetConfig+0x64>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a1f      	ldr	r2, [pc, #124]	; (8003578 <TIM_OC1_SetConfig+0xdc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d10c      	bne.n	800351a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f023 0308 	bic.w	r3, r3, #8
 8003506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f023 0304 	bic.w	r3, r3, #4
 8003518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a15      	ldr	r2, [pc, #84]	; (8003574 <TIM_OC1_SetConfig+0xd8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d003      	beq.n	800352a <TIM_OC1_SetConfig+0x8e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a14      	ldr	r2, [pc, #80]	; (8003578 <TIM_OC1_SetConfig+0xdc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d111      	bne.n	800354e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	621a      	str	r2, [r3, #32]
}
 8003568:	bf00      	nop
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	40010000 	.word	0x40010000
 8003578:	40010400 	.word	0x40010400

0800357c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f023 0210 	bic.w	r2, r3, #16
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f023 0320 	bic.w	r3, r3, #32
 80035c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a22      	ldr	r2, [pc, #136]	; (8003660 <TIM_OC2_SetConfig+0xe4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d003      	beq.n	80035e4 <TIM_OC2_SetConfig+0x68>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a21      	ldr	r2, [pc, #132]	; (8003664 <TIM_OC2_SetConfig+0xe8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d10d      	bne.n	8003600 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a17      	ldr	r2, [pc, #92]	; (8003660 <TIM_OC2_SetConfig+0xe4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d003      	beq.n	8003610 <TIM_OC2_SetConfig+0x94>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a16      	ldr	r2, [pc, #88]	; (8003664 <TIM_OC2_SetConfig+0xe8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d113      	bne.n	8003638 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003616:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800361e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40010000 	.word	0x40010000
 8003664:	40010400 	.word	0x40010400

08003668 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0303 	bic.w	r3, r3, #3
 800369e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a21      	ldr	r2, [pc, #132]	; (8003748 <TIM_OC3_SetConfig+0xe0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <TIM_OC3_SetConfig+0x66>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a20      	ldr	r2, [pc, #128]	; (800374c <TIM_OC3_SetConfig+0xe4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d10d      	bne.n	80036ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a16      	ldr	r2, [pc, #88]	; (8003748 <TIM_OC3_SetConfig+0xe0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d003      	beq.n	80036fa <TIM_OC3_SetConfig+0x92>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a15      	ldr	r2, [pc, #84]	; (800374c <TIM_OC3_SetConfig+0xe4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d113      	bne.n	8003722 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	621a      	str	r2, [r3, #32]
}
 800373c:	bf00      	nop
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	40010000 	.word	0x40010000
 800374c:	40010400 	.word	0x40010400

08003750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800379a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	031b      	lsls	r3, r3, #12
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <TIM_OC4_SetConfig+0xa4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_OC4_SetConfig+0x68>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <TIM_OC4_SetConfig+0xa8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d109      	bne.n	80037cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	019b      	lsls	r3, r3, #6
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	621a      	str	r2, [r3, #32]
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40010000 	.word	0x40010000
 80037f8:	40010400 	.word	0x40010400

080037fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	2201      	movs	r2, #1
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a1a      	ldr	r2, [r3, #32]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	43db      	mvns	r3, r3
 800381e:	401a      	ands	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a1a      	ldr	r2, [r3, #32]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	431a      	orrs	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	621a      	str	r2, [r3, #32]
}
 800383a:	bf00      	nop
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800385c:	2302      	movs	r3, #2
 800385e:	e05a      	b.n	8003916 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a21      	ldr	r2, [pc, #132]	; (8003924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d022      	beq.n	80038ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ac:	d01d      	beq.n	80038ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1d      	ldr	r2, [pc, #116]	; (8003928 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d018      	beq.n	80038ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1b      	ldr	r2, [pc, #108]	; (800392c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d013      	beq.n	80038ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1a      	ldr	r2, [pc, #104]	; (8003930 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00e      	beq.n	80038ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a18      	ldr	r2, [pc, #96]	; (8003934 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d009      	beq.n	80038ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a17      	ldr	r2, [pc, #92]	; (8003938 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d004      	beq.n	80038ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a15      	ldr	r2, [pc, #84]	; (800393c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d10c      	bne.n	8003904 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40010000 	.word	0x40010000
 8003928:	40000400 	.word	0x40000400
 800392c:	40000800 	.word	0x40000800
 8003930:	40000c00 	.word	0x40000c00
 8003934:	40010400 	.word	0x40010400
 8003938:	40014000 	.word	0x40014000
 800393c:	40001800 	.word	0x40001800

08003940 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e03f      	b.n	80039d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd fe5e 	bl	8001628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2224      	movs	r2, #36	; 0x24
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003982:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f9cb 	bl	8003d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003998:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b08a      	sub	sp, #40	; 0x28
 80039de:	af02      	add	r7, sp, #8
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	603b      	str	r3, [r7, #0]
 80039e6:	4613      	mov	r3, r2
 80039e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d17c      	bne.n	8003af4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_UART_Transmit+0x2c>
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e075      	b.n	8003af6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_UART_Transmit+0x3e>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e06e      	b.n	8003af6 <HAL_UART_Transmit+0x11c>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2221      	movs	r2, #33	; 0x21
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a2e:	f7fd fed3 	bl	80017d8 <HAL_GetTick>
 8003a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	88fa      	ldrh	r2, [r7, #6]
 8003a3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a48:	d108      	bne.n	8003a5c <HAL_UART_Transmit+0x82>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d104      	bne.n	8003a5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	e003      	b.n	8003a64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a6c:	e02a      	b.n	8003ac4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2200      	movs	r2, #0
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f8e2 	bl	8003c42 <UART_WaitOnFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e036      	b.n	8003af6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	3302      	adds	r3, #2
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	e007      	b.n	8003ab6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1cf      	bne.n	8003a6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2140      	movs	r1, #64	; 0x40
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f8b2 	bl	8003c42 <UART_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e006      	b.n	8003af6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e000      	b.n	8003af6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
  }
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b08a      	sub	sp, #40	; 0x28
 8003b02:	af02      	add	r7, sp, #8
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	f040 808c 	bne.w	8003c38 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_UART_Receive+0x2e>
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e084      	b.n	8003c3a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_UART_Receive+0x40>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e07d      	b.n	8003c3a <HAL_UART_Receive+0x13c>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2222      	movs	r2, #34	; 0x22
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b5a:	f7fd fe3d 	bl	80017d8 <HAL_GetTick>
 8003b5e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	88fa      	ldrh	r2, [r7, #6]
 8003b64:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	d108      	bne.n	8003b88 <HAL_UART_Receive+0x8a>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d104      	bne.n	8003b88 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e003      	b.n	8003b90 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b98:	e043      	b.n	8003c22 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2120      	movs	r1, #32
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f84c 	bl	8003c42 <UART_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e042      	b.n	8003c3a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	3302      	adds	r3, #2
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	e01f      	b.n	8003c14 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bdc:	d007      	beq.n	8003bee <HAL_UART_Receive+0xf0>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10a      	bne.n	8003bfc <HAL_UART_Receive+0xfe>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	e008      	b.n	8003c0e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3301      	adds	r3, #1
 8003c12:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1b6      	bne.n	8003b9a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e000      	b.n	8003c3a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
  }
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3720      	adds	r7, #32
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b090      	sub	sp, #64	; 0x40
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c52:	e050      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5a:	d04c      	beq.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c62:	f7fd fdb9 	bl	80017d8 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d241      	bcs.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c92:	637a      	str	r2, [r7, #52]	; 0x34
 8003c94:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e5      	bne.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3314      	adds	r3, #20
 8003cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3314      	adds	r3, #20
 8003cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cc6:	623a      	str	r2, [r7, #32]
 8003cc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	69f9      	ldr	r1, [r7, #28]
 8003ccc:	6a3a      	ldr	r2, [r7, #32]
 8003cce:	e841 2300 	strex	r3, r2, [r1]
 8003cd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e5      	bne.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e00f      	b.n	8003d16 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	bf0c      	ite	eq
 8003d06:	2301      	moveq	r3, #1
 8003d08:	2300      	movne	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d09f      	beq.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3740      	adds	r7, #64	; 0x40
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d24:	b0c0      	sub	sp, #256	; 0x100
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3c:	68d9      	ldr	r1, [r3, #12]
 8003d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	ea40 0301 	orr.w	r3, r0, r1
 8003d48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d78:	f021 010c 	bic.w	r1, r1, #12
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d86:	430b      	orrs	r3, r1
 8003d88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9a:	6999      	ldr	r1, [r3, #24]
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	ea40 0301 	orr.w	r3, r0, r1
 8003da6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b8f      	ldr	r3, [pc, #572]	; (8003fec <UART_SetConfig+0x2cc>)
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d005      	beq.n	8003dc0 <UART_SetConfig+0xa0>
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4b8d      	ldr	r3, [pc, #564]	; (8003ff0 <UART_SetConfig+0x2d0>)
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d104      	bne.n	8003dca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dc0:	f7fe fc96 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 8003dc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003dc8:	e003      	b.n	8003dd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dca:	f7fe fc7d 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8003dce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ddc:	f040 810c 	bne.w	8003ff8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de4:	2200      	movs	r2, #0
 8003de6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003df2:	4622      	mov	r2, r4
 8003df4:	462b      	mov	r3, r5
 8003df6:	1891      	adds	r1, r2, r2
 8003df8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dfa:	415b      	adcs	r3, r3
 8003dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e02:	4621      	mov	r1, r4
 8003e04:	eb12 0801 	adds.w	r8, r2, r1
 8003e08:	4629      	mov	r1, r5
 8003e0a:	eb43 0901 	adc.w	r9, r3, r1
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e22:	4690      	mov	r8, r2
 8003e24:	4699      	mov	r9, r3
 8003e26:	4623      	mov	r3, r4
 8003e28:	eb18 0303 	adds.w	r3, r8, r3
 8003e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e30:	462b      	mov	r3, r5
 8003e32:	eb49 0303 	adc.w	r3, r9, r3
 8003e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e4e:	460b      	mov	r3, r1
 8003e50:	18db      	adds	r3, r3, r3
 8003e52:	653b      	str	r3, [r7, #80]	; 0x50
 8003e54:	4613      	mov	r3, r2
 8003e56:	eb42 0303 	adc.w	r3, r2, r3
 8003e5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e64:	f7fc fec0 	bl	8000be8 <__aeabi_uldivmod>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4b61      	ldr	r3, [pc, #388]	; (8003ff4 <UART_SetConfig+0x2d4>)
 8003e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	011c      	lsls	r4, r3, #4
 8003e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e88:	4642      	mov	r2, r8
 8003e8a:	464b      	mov	r3, r9
 8003e8c:	1891      	adds	r1, r2, r2
 8003e8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e90:	415b      	adcs	r3, r3
 8003e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e98:	4641      	mov	r1, r8
 8003e9a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003eb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb8:	4692      	mov	sl, r2
 8003eba:	469b      	mov	fp, r3
 8003ebc:	4643      	mov	r3, r8
 8003ebe:	eb1a 0303 	adds.w	r3, sl, r3
 8003ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	eb4b 0303 	adc.w	r3, fp, r3
 8003ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003edc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ee0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	18db      	adds	r3, r3, r3
 8003ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8003eea:	4613      	mov	r3, r2
 8003eec:	eb42 0303 	adc.w	r3, r2, r3
 8003ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ef6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003efa:	f7fc fe75 	bl	8000be8 <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	4b3b      	ldr	r3, [pc, #236]	; (8003ff4 <UART_SetConfig+0x2d4>)
 8003f06:	fba3 2301 	umull	r2, r3, r3, r1
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2264      	movs	r2, #100	; 0x64
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	1acb      	subs	r3, r1, r3
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f1a:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <UART_SetConfig+0x2d4>)
 8003f1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f28:	441c      	add	r4, r3
 8003f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f3c:	4642      	mov	r2, r8
 8003f3e:	464b      	mov	r3, r9
 8003f40:	1891      	adds	r1, r2, r2
 8003f42:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f44:	415b      	adcs	r3, r3
 8003f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f4c:	4641      	mov	r1, r8
 8003f4e:	1851      	adds	r1, r2, r1
 8003f50:	6339      	str	r1, [r7, #48]	; 0x30
 8003f52:	4649      	mov	r1, r9
 8003f54:	414b      	adcs	r3, r1
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f64:	4659      	mov	r1, fp
 8003f66:	00cb      	lsls	r3, r1, #3
 8003f68:	4651      	mov	r1, sl
 8003f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f6e:	4651      	mov	r1, sl
 8003f70:	00ca      	lsls	r2, r1, #3
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	4603      	mov	r3, r0
 8003f78:	4642      	mov	r2, r8
 8003f7a:	189b      	adds	r3, r3, r2
 8003f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f80:	464b      	mov	r3, r9
 8003f82:	460a      	mov	r2, r1
 8003f84:	eb42 0303 	adc.w	r3, r2, r3
 8003f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	18db      	adds	r3, r3, r3
 8003fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	eb42 0303 	adc.w	r3, r2, r3
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fb6:	f7fc fe17 	bl	8000be8 <__aeabi_uldivmod>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <UART_SetConfig+0x2d4>)
 8003fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	2164      	movs	r1, #100	; 0x64
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	3332      	adds	r3, #50	; 0x32
 8003fd2:	4a08      	ldr	r2, [pc, #32]	; (8003ff4 <UART_SetConfig+0x2d4>)
 8003fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	f003 0207 	and.w	r2, r3, #7
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4422      	add	r2, r4
 8003fe6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fe8:	e106      	b.n	80041f8 <UART_SetConfig+0x4d8>
 8003fea:	bf00      	nop
 8003fec:	40011000 	.word	0x40011000
 8003ff0:	40011400 	.word	0x40011400
 8003ff4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004002:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004006:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800400a:	4642      	mov	r2, r8
 800400c:	464b      	mov	r3, r9
 800400e:	1891      	adds	r1, r2, r2
 8004010:	6239      	str	r1, [r7, #32]
 8004012:	415b      	adcs	r3, r3
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800401a:	4641      	mov	r1, r8
 800401c:	1854      	adds	r4, r2, r1
 800401e:	4649      	mov	r1, r9
 8004020:	eb43 0501 	adc.w	r5, r3, r1
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	00eb      	lsls	r3, r5, #3
 800402e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004032:	00e2      	lsls	r2, r4, #3
 8004034:	4614      	mov	r4, r2
 8004036:	461d      	mov	r5, r3
 8004038:	4643      	mov	r3, r8
 800403a:	18e3      	adds	r3, r4, r3
 800403c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004040:	464b      	mov	r3, r9
 8004042:	eb45 0303 	adc.w	r3, r5, r3
 8004046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004056:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004066:	4629      	mov	r1, r5
 8004068:	008b      	lsls	r3, r1, #2
 800406a:	4621      	mov	r1, r4
 800406c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004070:	4621      	mov	r1, r4
 8004072:	008a      	lsls	r2, r1, #2
 8004074:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004078:	f7fc fdb6 	bl	8000be8 <__aeabi_uldivmod>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4b60      	ldr	r3, [pc, #384]	; (8004204 <UART_SetConfig+0x4e4>)
 8004082:	fba3 2302 	umull	r2, r3, r3, r2
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	011c      	lsls	r4, r3, #4
 800408a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800408e:	2200      	movs	r2, #0
 8004090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004094:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004098:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800409c:	4642      	mov	r2, r8
 800409e:	464b      	mov	r3, r9
 80040a0:	1891      	adds	r1, r2, r2
 80040a2:	61b9      	str	r1, [r7, #24]
 80040a4:	415b      	adcs	r3, r3
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040ac:	4641      	mov	r1, r8
 80040ae:	1851      	adds	r1, r2, r1
 80040b0:	6139      	str	r1, [r7, #16]
 80040b2:	4649      	mov	r1, r9
 80040b4:	414b      	adcs	r3, r1
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040c4:	4659      	mov	r1, fp
 80040c6:	00cb      	lsls	r3, r1, #3
 80040c8:	4651      	mov	r1, sl
 80040ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ce:	4651      	mov	r1, sl
 80040d0:	00ca      	lsls	r2, r1, #3
 80040d2:	4610      	mov	r0, r2
 80040d4:	4619      	mov	r1, r3
 80040d6:	4603      	mov	r3, r0
 80040d8:	4642      	mov	r2, r8
 80040da:	189b      	adds	r3, r3, r2
 80040dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040e0:	464b      	mov	r3, r9
 80040e2:	460a      	mov	r2, r1
 80040e4:	eb42 0303 	adc.w	r3, r2, r3
 80040e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80040f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004104:	4649      	mov	r1, r9
 8004106:	008b      	lsls	r3, r1, #2
 8004108:	4641      	mov	r1, r8
 800410a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800410e:	4641      	mov	r1, r8
 8004110:	008a      	lsls	r2, r1, #2
 8004112:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004116:	f7fc fd67 	bl	8000be8 <__aeabi_uldivmod>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4611      	mov	r1, r2
 8004120:	4b38      	ldr	r3, [pc, #224]	; (8004204 <UART_SetConfig+0x4e4>)
 8004122:	fba3 2301 	umull	r2, r3, r3, r1
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	2264      	movs	r2, #100	; 0x64
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	1acb      	subs	r3, r1, r3
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	3332      	adds	r3, #50	; 0x32
 8004134:	4a33      	ldr	r2, [pc, #204]	; (8004204 <UART_SetConfig+0x4e4>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004140:	441c      	add	r4, r3
 8004142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004146:	2200      	movs	r2, #0
 8004148:	673b      	str	r3, [r7, #112]	; 0x70
 800414a:	677a      	str	r2, [r7, #116]	; 0x74
 800414c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004150:	4642      	mov	r2, r8
 8004152:	464b      	mov	r3, r9
 8004154:	1891      	adds	r1, r2, r2
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	415b      	adcs	r3, r3
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004160:	4641      	mov	r1, r8
 8004162:	1851      	adds	r1, r2, r1
 8004164:	6039      	str	r1, [r7, #0]
 8004166:	4649      	mov	r1, r9
 8004168:	414b      	adcs	r3, r1
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004178:	4659      	mov	r1, fp
 800417a:	00cb      	lsls	r3, r1, #3
 800417c:	4651      	mov	r1, sl
 800417e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004182:	4651      	mov	r1, sl
 8004184:	00ca      	lsls	r2, r1, #3
 8004186:	4610      	mov	r0, r2
 8004188:	4619      	mov	r1, r3
 800418a:	4603      	mov	r3, r0
 800418c:	4642      	mov	r2, r8
 800418e:	189b      	adds	r3, r3, r2
 8004190:	66bb      	str	r3, [r7, #104]	; 0x68
 8004192:	464b      	mov	r3, r9
 8004194:	460a      	mov	r2, r1
 8004196:	eb42 0303 	adc.w	r3, r2, r3
 800419a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	663b      	str	r3, [r7, #96]	; 0x60
 80041a6:	667a      	str	r2, [r7, #100]	; 0x64
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041b4:	4649      	mov	r1, r9
 80041b6:	008b      	lsls	r3, r1, #2
 80041b8:	4641      	mov	r1, r8
 80041ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041be:	4641      	mov	r1, r8
 80041c0:	008a      	lsls	r2, r1, #2
 80041c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041c6:	f7fc fd0f 	bl	8000be8 <__aeabi_uldivmod>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <UART_SetConfig+0x4e4>)
 80041d0:	fba3 1302 	umull	r1, r3, r3, r2
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	2164      	movs	r1, #100	; 0x64
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	3332      	adds	r3, #50	; 0x32
 80041e2:	4a08      	ldr	r2, [pc, #32]	; (8004204 <UART_SetConfig+0x4e4>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	095b      	lsrs	r3, r3, #5
 80041ea:	f003 020f 	and.w	r2, r3, #15
 80041ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4422      	add	r2, r4
 80041f6:	609a      	str	r2, [r3, #8]
}
 80041f8:	bf00      	nop
 80041fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041fe:	46bd      	mov	sp, r7
 8004200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004204:	51eb851f 	.word	0x51eb851f

08004208 <__cvt>:
 8004208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800420c:	ec55 4b10 	vmov	r4, r5, d0
 8004210:	2d00      	cmp	r5, #0
 8004212:	460e      	mov	r6, r1
 8004214:	4619      	mov	r1, r3
 8004216:	462b      	mov	r3, r5
 8004218:	bfbb      	ittet	lt
 800421a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800421e:	461d      	movlt	r5, r3
 8004220:	2300      	movge	r3, #0
 8004222:	232d      	movlt	r3, #45	; 0x2d
 8004224:	700b      	strb	r3, [r1, #0]
 8004226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004228:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800422c:	4691      	mov	r9, r2
 800422e:	f023 0820 	bic.w	r8, r3, #32
 8004232:	bfbc      	itt	lt
 8004234:	4622      	movlt	r2, r4
 8004236:	4614      	movlt	r4, r2
 8004238:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800423c:	d005      	beq.n	800424a <__cvt+0x42>
 800423e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004242:	d100      	bne.n	8004246 <__cvt+0x3e>
 8004244:	3601      	adds	r6, #1
 8004246:	2102      	movs	r1, #2
 8004248:	e000      	b.n	800424c <__cvt+0x44>
 800424a:	2103      	movs	r1, #3
 800424c:	ab03      	add	r3, sp, #12
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	ab02      	add	r3, sp, #8
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	ec45 4b10 	vmov	d0, r4, r5
 8004258:	4653      	mov	r3, sl
 800425a:	4632      	mov	r2, r6
 800425c:	f000 ff08 	bl	8005070 <_dtoa_r>
 8004260:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004264:	4607      	mov	r7, r0
 8004266:	d102      	bne.n	800426e <__cvt+0x66>
 8004268:	f019 0f01 	tst.w	r9, #1
 800426c:	d022      	beq.n	80042b4 <__cvt+0xac>
 800426e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004272:	eb07 0906 	add.w	r9, r7, r6
 8004276:	d110      	bne.n	800429a <__cvt+0x92>
 8004278:	783b      	ldrb	r3, [r7, #0]
 800427a:	2b30      	cmp	r3, #48	; 0x30
 800427c:	d10a      	bne.n	8004294 <__cvt+0x8c>
 800427e:	2200      	movs	r2, #0
 8004280:	2300      	movs	r3, #0
 8004282:	4620      	mov	r0, r4
 8004284:	4629      	mov	r1, r5
 8004286:	f7fc fc3f 	bl	8000b08 <__aeabi_dcmpeq>
 800428a:	b918      	cbnz	r0, 8004294 <__cvt+0x8c>
 800428c:	f1c6 0601 	rsb	r6, r6, #1
 8004290:	f8ca 6000 	str.w	r6, [sl]
 8004294:	f8da 3000 	ldr.w	r3, [sl]
 8004298:	4499      	add	r9, r3
 800429a:	2200      	movs	r2, #0
 800429c:	2300      	movs	r3, #0
 800429e:	4620      	mov	r0, r4
 80042a0:	4629      	mov	r1, r5
 80042a2:	f7fc fc31 	bl	8000b08 <__aeabi_dcmpeq>
 80042a6:	b108      	cbz	r0, 80042ac <__cvt+0xa4>
 80042a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80042ac:	2230      	movs	r2, #48	; 0x30
 80042ae:	9b03      	ldr	r3, [sp, #12]
 80042b0:	454b      	cmp	r3, r9
 80042b2:	d307      	bcc.n	80042c4 <__cvt+0xbc>
 80042b4:	9b03      	ldr	r3, [sp, #12]
 80042b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042b8:	1bdb      	subs	r3, r3, r7
 80042ba:	4638      	mov	r0, r7
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	b004      	add	sp, #16
 80042c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c4:	1c59      	adds	r1, r3, #1
 80042c6:	9103      	str	r1, [sp, #12]
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	e7f0      	b.n	80042ae <__cvt+0xa6>

080042cc <__exponent>:
 80042cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042ce:	4603      	mov	r3, r0
 80042d0:	2900      	cmp	r1, #0
 80042d2:	bfb8      	it	lt
 80042d4:	4249      	neglt	r1, r1
 80042d6:	f803 2b02 	strb.w	r2, [r3], #2
 80042da:	bfb4      	ite	lt
 80042dc:	222d      	movlt	r2, #45	; 0x2d
 80042de:	222b      	movge	r2, #43	; 0x2b
 80042e0:	2909      	cmp	r1, #9
 80042e2:	7042      	strb	r2, [r0, #1]
 80042e4:	dd2a      	ble.n	800433c <__exponent+0x70>
 80042e6:	f10d 0207 	add.w	r2, sp, #7
 80042ea:	4617      	mov	r7, r2
 80042ec:	260a      	movs	r6, #10
 80042ee:	4694      	mov	ip, r2
 80042f0:	fb91 f5f6 	sdiv	r5, r1, r6
 80042f4:	fb06 1415 	mls	r4, r6, r5, r1
 80042f8:	3430      	adds	r4, #48	; 0x30
 80042fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80042fe:	460c      	mov	r4, r1
 8004300:	2c63      	cmp	r4, #99	; 0x63
 8004302:	f102 32ff 	add.w	r2, r2, #4294967295
 8004306:	4629      	mov	r1, r5
 8004308:	dcf1      	bgt.n	80042ee <__exponent+0x22>
 800430a:	3130      	adds	r1, #48	; 0x30
 800430c:	f1ac 0402 	sub.w	r4, ip, #2
 8004310:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004314:	1c41      	adds	r1, r0, #1
 8004316:	4622      	mov	r2, r4
 8004318:	42ba      	cmp	r2, r7
 800431a:	d30a      	bcc.n	8004332 <__exponent+0x66>
 800431c:	f10d 0209 	add.w	r2, sp, #9
 8004320:	eba2 020c 	sub.w	r2, r2, ip
 8004324:	42bc      	cmp	r4, r7
 8004326:	bf88      	it	hi
 8004328:	2200      	movhi	r2, #0
 800432a:	4413      	add	r3, r2
 800432c:	1a18      	subs	r0, r3, r0
 800432e:	b003      	add	sp, #12
 8004330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004332:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004336:	f801 5f01 	strb.w	r5, [r1, #1]!
 800433a:	e7ed      	b.n	8004318 <__exponent+0x4c>
 800433c:	2330      	movs	r3, #48	; 0x30
 800433e:	3130      	adds	r1, #48	; 0x30
 8004340:	7083      	strb	r3, [r0, #2]
 8004342:	70c1      	strb	r1, [r0, #3]
 8004344:	1d03      	adds	r3, r0, #4
 8004346:	e7f1      	b.n	800432c <__exponent+0x60>

08004348 <_printf_float>:
 8004348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434c:	ed2d 8b02 	vpush	{d8}
 8004350:	b08d      	sub	sp, #52	; 0x34
 8004352:	460c      	mov	r4, r1
 8004354:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004358:	4616      	mov	r6, r2
 800435a:	461f      	mov	r7, r3
 800435c:	4605      	mov	r5, r0
 800435e:	f000 fd87 	bl	8004e70 <_localeconv_r>
 8004362:	f8d0 a000 	ldr.w	sl, [r0]
 8004366:	4650      	mov	r0, sl
 8004368:	f7fb ffa2 	bl	80002b0 <strlen>
 800436c:	2300      	movs	r3, #0
 800436e:	930a      	str	r3, [sp, #40]	; 0x28
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	9305      	str	r3, [sp, #20]
 8004374:	f8d8 3000 	ldr.w	r3, [r8]
 8004378:	f894 b018 	ldrb.w	fp, [r4, #24]
 800437c:	3307      	adds	r3, #7
 800437e:	f023 0307 	bic.w	r3, r3, #7
 8004382:	f103 0208 	add.w	r2, r3, #8
 8004386:	f8c8 2000 	str.w	r2, [r8]
 800438a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800438e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004392:	9307      	str	r3, [sp, #28]
 8004394:	f8cd 8018 	str.w	r8, [sp, #24]
 8004398:	ee08 0a10 	vmov	s16, r0
 800439c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80043a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043a4:	4b9e      	ldr	r3, [pc, #632]	; (8004620 <_printf_float+0x2d8>)
 80043a6:	f04f 32ff 	mov.w	r2, #4294967295
 80043aa:	f7fc fbdf 	bl	8000b6c <__aeabi_dcmpun>
 80043ae:	bb88      	cbnz	r0, 8004414 <_printf_float+0xcc>
 80043b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043b4:	4b9a      	ldr	r3, [pc, #616]	; (8004620 <_printf_float+0x2d8>)
 80043b6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ba:	f7fc fbb9 	bl	8000b30 <__aeabi_dcmple>
 80043be:	bb48      	cbnz	r0, 8004414 <_printf_float+0xcc>
 80043c0:	2200      	movs	r2, #0
 80043c2:	2300      	movs	r3, #0
 80043c4:	4640      	mov	r0, r8
 80043c6:	4649      	mov	r1, r9
 80043c8:	f7fc fba8 	bl	8000b1c <__aeabi_dcmplt>
 80043cc:	b110      	cbz	r0, 80043d4 <_printf_float+0x8c>
 80043ce:	232d      	movs	r3, #45	; 0x2d
 80043d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d4:	4a93      	ldr	r2, [pc, #588]	; (8004624 <_printf_float+0x2dc>)
 80043d6:	4b94      	ldr	r3, [pc, #592]	; (8004628 <_printf_float+0x2e0>)
 80043d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80043dc:	bf94      	ite	ls
 80043de:	4690      	movls	r8, r2
 80043e0:	4698      	movhi	r8, r3
 80043e2:	2303      	movs	r3, #3
 80043e4:	6123      	str	r3, [r4, #16]
 80043e6:	9b05      	ldr	r3, [sp, #20]
 80043e8:	f023 0304 	bic.w	r3, r3, #4
 80043ec:	6023      	str	r3, [r4, #0]
 80043ee:	f04f 0900 	mov.w	r9, #0
 80043f2:	9700      	str	r7, [sp, #0]
 80043f4:	4633      	mov	r3, r6
 80043f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80043f8:	4621      	mov	r1, r4
 80043fa:	4628      	mov	r0, r5
 80043fc:	f000 f9da 	bl	80047b4 <_printf_common>
 8004400:	3001      	adds	r0, #1
 8004402:	f040 8090 	bne.w	8004526 <_printf_float+0x1de>
 8004406:	f04f 30ff 	mov.w	r0, #4294967295
 800440a:	b00d      	add	sp, #52	; 0x34
 800440c:	ecbd 8b02 	vpop	{d8}
 8004410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004414:	4642      	mov	r2, r8
 8004416:	464b      	mov	r3, r9
 8004418:	4640      	mov	r0, r8
 800441a:	4649      	mov	r1, r9
 800441c:	f7fc fba6 	bl	8000b6c <__aeabi_dcmpun>
 8004420:	b140      	cbz	r0, 8004434 <_printf_float+0xec>
 8004422:	464b      	mov	r3, r9
 8004424:	2b00      	cmp	r3, #0
 8004426:	bfbc      	itt	lt
 8004428:	232d      	movlt	r3, #45	; 0x2d
 800442a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800442e:	4a7f      	ldr	r2, [pc, #508]	; (800462c <_printf_float+0x2e4>)
 8004430:	4b7f      	ldr	r3, [pc, #508]	; (8004630 <_printf_float+0x2e8>)
 8004432:	e7d1      	b.n	80043d8 <_printf_float+0x90>
 8004434:	6863      	ldr	r3, [r4, #4]
 8004436:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800443a:	9206      	str	r2, [sp, #24]
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	d13f      	bne.n	80044c0 <_printf_float+0x178>
 8004440:	2306      	movs	r3, #6
 8004442:	6063      	str	r3, [r4, #4]
 8004444:	9b05      	ldr	r3, [sp, #20]
 8004446:	6861      	ldr	r1, [r4, #4]
 8004448:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800444c:	2300      	movs	r3, #0
 800444e:	9303      	str	r3, [sp, #12]
 8004450:	ab0a      	add	r3, sp, #40	; 0x28
 8004452:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004456:	ab09      	add	r3, sp, #36	; 0x24
 8004458:	ec49 8b10 	vmov	d0, r8, r9
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	6022      	str	r2, [r4, #0]
 8004460:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004464:	4628      	mov	r0, r5
 8004466:	f7ff fecf 	bl	8004208 <__cvt>
 800446a:	9b06      	ldr	r3, [sp, #24]
 800446c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800446e:	2b47      	cmp	r3, #71	; 0x47
 8004470:	4680      	mov	r8, r0
 8004472:	d108      	bne.n	8004486 <_printf_float+0x13e>
 8004474:	1cc8      	adds	r0, r1, #3
 8004476:	db02      	blt.n	800447e <_printf_float+0x136>
 8004478:	6863      	ldr	r3, [r4, #4]
 800447a:	4299      	cmp	r1, r3
 800447c:	dd41      	ble.n	8004502 <_printf_float+0x1ba>
 800447e:	f1ab 0302 	sub.w	r3, fp, #2
 8004482:	fa5f fb83 	uxtb.w	fp, r3
 8004486:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800448a:	d820      	bhi.n	80044ce <_printf_float+0x186>
 800448c:	3901      	subs	r1, #1
 800448e:	465a      	mov	r2, fp
 8004490:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004494:	9109      	str	r1, [sp, #36]	; 0x24
 8004496:	f7ff ff19 	bl	80042cc <__exponent>
 800449a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800449c:	1813      	adds	r3, r2, r0
 800449e:	2a01      	cmp	r2, #1
 80044a0:	4681      	mov	r9, r0
 80044a2:	6123      	str	r3, [r4, #16]
 80044a4:	dc02      	bgt.n	80044ac <_printf_float+0x164>
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	07d2      	lsls	r2, r2, #31
 80044aa:	d501      	bpl.n	80044b0 <_printf_float+0x168>
 80044ac:	3301      	adds	r3, #1
 80044ae:	6123      	str	r3, [r4, #16]
 80044b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d09c      	beq.n	80043f2 <_printf_float+0xaa>
 80044b8:	232d      	movs	r3, #45	; 0x2d
 80044ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044be:	e798      	b.n	80043f2 <_printf_float+0xaa>
 80044c0:	9a06      	ldr	r2, [sp, #24]
 80044c2:	2a47      	cmp	r2, #71	; 0x47
 80044c4:	d1be      	bne.n	8004444 <_printf_float+0xfc>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1bc      	bne.n	8004444 <_printf_float+0xfc>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e7b9      	b.n	8004442 <_printf_float+0xfa>
 80044ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80044d2:	d118      	bne.n	8004506 <_printf_float+0x1be>
 80044d4:	2900      	cmp	r1, #0
 80044d6:	6863      	ldr	r3, [r4, #4]
 80044d8:	dd0b      	ble.n	80044f2 <_printf_float+0x1aa>
 80044da:	6121      	str	r1, [r4, #16]
 80044dc:	b913      	cbnz	r3, 80044e4 <_printf_float+0x19c>
 80044de:	6822      	ldr	r2, [r4, #0]
 80044e0:	07d0      	lsls	r0, r2, #31
 80044e2:	d502      	bpl.n	80044ea <_printf_float+0x1a2>
 80044e4:	3301      	adds	r3, #1
 80044e6:	440b      	add	r3, r1
 80044e8:	6123      	str	r3, [r4, #16]
 80044ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80044ec:	f04f 0900 	mov.w	r9, #0
 80044f0:	e7de      	b.n	80044b0 <_printf_float+0x168>
 80044f2:	b913      	cbnz	r3, 80044fa <_printf_float+0x1b2>
 80044f4:	6822      	ldr	r2, [r4, #0]
 80044f6:	07d2      	lsls	r2, r2, #31
 80044f8:	d501      	bpl.n	80044fe <_printf_float+0x1b6>
 80044fa:	3302      	adds	r3, #2
 80044fc:	e7f4      	b.n	80044e8 <_printf_float+0x1a0>
 80044fe:	2301      	movs	r3, #1
 8004500:	e7f2      	b.n	80044e8 <_printf_float+0x1a0>
 8004502:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004508:	4299      	cmp	r1, r3
 800450a:	db05      	blt.n	8004518 <_printf_float+0x1d0>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	6121      	str	r1, [r4, #16]
 8004510:	07d8      	lsls	r0, r3, #31
 8004512:	d5ea      	bpl.n	80044ea <_printf_float+0x1a2>
 8004514:	1c4b      	adds	r3, r1, #1
 8004516:	e7e7      	b.n	80044e8 <_printf_float+0x1a0>
 8004518:	2900      	cmp	r1, #0
 800451a:	bfd4      	ite	le
 800451c:	f1c1 0202 	rsble	r2, r1, #2
 8004520:	2201      	movgt	r2, #1
 8004522:	4413      	add	r3, r2
 8004524:	e7e0      	b.n	80044e8 <_printf_float+0x1a0>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	055a      	lsls	r2, r3, #21
 800452a:	d407      	bmi.n	800453c <_printf_float+0x1f4>
 800452c:	6923      	ldr	r3, [r4, #16]
 800452e:	4642      	mov	r2, r8
 8004530:	4631      	mov	r1, r6
 8004532:	4628      	mov	r0, r5
 8004534:	47b8      	blx	r7
 8004536:	3001      	adds	r0, #1
 8004538:	d12c      	bne.n	8004594 <_printf_float+0x24c>
 800453a:	e764      	b.n	8004406 <_printf_float+0xbe>
 800453c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004540:	f240 80e0 	bls.w	8004704 <_printf_float+0x3bc>
 8004544:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004548:	2200      	movs	r2, #0
 800454a:	2300      	movs	r3, #0
 800454c:	f7fc fadc 	bl	8000b08 <__aeabi_dcmpeq>
 8004550:	2800      	cmp	r0, #0
 8004552:	d034      	beq.n	80045be <_printf_float+0x276>
 8004554:	4a37      	ldr	r2, [pc, #220]	; (8004634 <_printf_float+0x2ec>)
 8004556:	2301      	movs	r3, #1
 8004558:	4631      	mov	r1, r6
 800455a:	4628      	mov	r0, r5
 800455c:	47b8      	blx	r7
 800455e:	3001      	adds	r0, #1
 8004560:	f43f af51 	beq.w	8004406 <_printf_float+0xbe>
 8004564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004568:	429a      	cmp	r2, r3
 800456a:	db02      	blt.n	8004572 <_printf_float+0x22a>
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	07d8      	lsls	r0, r3, #31
 8004570:	d510      	bpl.n	8004594 <_printf_float+0x24c>
 8004572:	ee18 3a10 	vmov	r3, s16
 8004576:	4652      	mov	r2, sl
 8004578:	4631      	mov	r1, r6
 800457a:	4628      	mov	r0, r5
 800457c:	47b8      	blx	r7
 800457e:	3001      	adds	r0, #1
 8004580:	f43f af41 	beq.w	8004406 <_printf_float+0xbe>
 8004584:	f04f 0800 	mov.w	r8, #0
 8004588:	f104 091a 	add.w	r9, r4, #26
 800458c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800458e:	3b01      	subs	r3, #1
 8004590:	4543      	cmp	r3, r8
 8004592:	dc09      	bgt.n	80045a8 <_printf_float+0x260>
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	079b      	lsls	r3, r3, #30
 8004598:	f100 8107 	bmi.w	80047aa <_printf_float+0x462>
 800459c:	68e0      	ldr	r0, [r4, #12]
 800459e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045a0:	4298      	cmp	r0, r3
 80045a2:	bfb8      	it	lt
 80045a4:	4618      	movlt	r0, r3
 80045a6:	e730      	b.n	800440a <_printf_float+0xc2>
 80045a8:	2301      	movs	r3, #1
 80045aa:	464a      	mov	r2, r9
 80045ac:	4631      	mov	r1, r6
 80045ae:	4628      	mov	r0, r5
 80045b0:	47b8      	blx	r7
 80045b2:	3001      	adds	r0, #1
 80045b4:	f43f af27 	beq.w	8004406 <_printf_float+0xbe>
 80045b8:	f108 0801 	add.w	r8, r8, #1
 80045bc:	e7e6      	b.n	800458c <_printf_float+0x244>
 80045be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	dc39      	bgt.n	8004638 <_printf_float+0x2f0>
 80045c4:	4a1b      	ldr	r2, [pc, #108]	; (8004634 <_printf_float+0x2ec>)
 80045c6:	2301      	movs	r3, #1
 80045c8:	4631      	mov	r1, r6
 80045ca:	4628      	mov	r0, r5
 80045cc:	47b8      	blx	r7
 80045ce:	3001      	adds	r0, #1
 80045d0:	f43f af19 	beq.w	8004406 <_printf_float+0xbe>
 80045d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80045d8:	4313      	orrs	r3, r2
 80045da:	d102      	bne.n	80045e2 <_printf_float+0x29a>
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	07d9      	lsls	r1, r3, #31
 80045e0:	d5d8      	bpl.n	8004594 <_printf_float+0x24c>
 80045e2:	ee18 3a10 	vmov	r3, s16
 80045e6:	4652      	mov	r2, sl
 80045e8:	4631      	mov	r1, r6
 80045ea:	4628      	mov	r0, r5
 80045ec:	47b8      	blx	r7
 80045ee:	3001      	adds	r0, #1
 80045f0:	f43f af09 	beq.w	8004406 <_printf_float+0xbe>
 80045f4:	f04f 0900 	mov.w	r9, #0
 80045f8:	f104 0a1a 	add.w	sl, r4, #26
 80045fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045fe:	425b      	negs	r3, r3
 8004600:	454b      	cmp	r3, r9
 8004602:	dc01      	bgt.n	8004608 <_printf_float+0x2c0>
 8004604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004606:	e792      	b.n	800452e <_printf_float+0x1e6>
 8004608:	2301      	movs	r3, #1
 800460a:	4652      	mov	r2, sl
 800460c:	4631      	mov	r1, r6
 800460e:	4628      	mov	r0, r5
 8004610:	47b8      	blx	r7
 8004612:	3001      	adds	r0, #1
 8004614:	f43f aef7 	beq.w	8004406 <_printf_float+0xbe>
 8004618:	f109 0901 	add.w	r9, r9, #1
 800461c:	e7ee      	b.n	80045fc <_printf_float+0x2b4>
 800461e:	bf00      	nop
 8004620:	7fefffff 	.word	0x7fefffff
 8004624:	08006d4c 	.word	0x08006d4c
 8004628:	08006d50 	.word	0x08006d50
 800462c:	08006d54 	.word	0x08006d54
 8004630:	08006d58 	.word	0x08006d58
 8004634:	08006d5c 	.word	0x08006d5c
 8004638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800463a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800463c:	429a      	cmp	r2, r3
 800463e:	bfa8      	it	ge
 8004640:	461a      	movge	r2, r3
 8004642:	2a00      	cmp	r2, #0
 8004644:	4691      	mov	r9, r2
 8004646:	dc37      	bgt.n	80046b8 <_printf_float+0x370>
 8004648:	f04f 0b00 	mov.w	fp, #0
 800464c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004650:	f104 021a 	add.w	r2, r4, #26
 8004654:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004656:	9305      	str	r3, [sp, #20]
 8004658:	eba3 0309 	sub.w	r3, r3, r9
 800465c:	455b      	cmp	r3, fp
 800465e:	dc33      	bgt.n	80046c8 <_printf_float+0x380>
 8004660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004664:	429a      	cmp	r2, r3
 8004666:	db3b      	blt.n	80046e0 <_printf_float+0x398>
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	07da      	lsls	r2, r3, #31
 800466c:	d438      	bmi.n	80046e0 <_printf_float+0x398>
 800466e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004672:	eba2 0903 	sub.w	r9, r2, r3
 8004676:	9b05      	ldr	r3, [sp, #20]
 8004678:	1ad2      	subs	r2, r2, r3
 800467a:	4591      	cmp	r9, r2
 800467c:	bfa8      	it	ge
 800467e:	4691      	movge	r9, r2
 8004680:	f1b9 0f00 	cmp.w	r9, #0
 8004684:	dc35      	bgt.n	80046f2 <_printf_float+0x3aa>
 8004686:	f04f 0800 	mov.w	r8, #0
 800468a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800468e:	f104 0a1a 	add.w	sl, r4, #26
 8004692:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	eba3 0309 	sub.w	r3, r3, r9
 800469c:	4543      	cmp	r3, r8
 800469e:	f77f af79 	ble.w	8004594 <_printf_float+0x24c>
 80046a2:	2301      	movs	r3, #1
 80046a4:	4652      	mov	r2, sl
 80046a6:	4631      	mov	r1, r6
 80046a8:	4628      	mov	r0, r5
 80046aa:	47b8      	blx	r7
 80046ac:	3001      	adds	r0, #1
 80046ae:	f43f aeaa 	beq.w	8004406 <_printf_float+0xbe>
 80046b2:	f108 0801 	add.w	r8, r8, #1
 80046b6:	e7ec      	b.n	8004692 <_printf_float+0x34a>
 80046b8:	4613      	mov	r3, r2
 80046ba:	4631      	mov	r1, r6
 80046bc:	4642      	mov	r2, r8
 80046be:	4628      	mov	r0, r5
 80046c0:	47b8      	blx	r7
 80046c2:	3001      	adds	r0, #1
 80046c4:	d1c0      	bne.n	8004648 <_printf_float+0x300>
 80046c6:	e69e      	b.n	8004406 <_printf_float+0xbe>
 80046c8:	2301      	movs	r3, #1
 80046ca:	4631      	mov	r1, r6
 80046cc:	4628      	mov	r0, r5
 80046ce:	9205      	str	r2, [sp, #20]
 80046d0:	47b8      	blx	r7
 80046d2:	3001      	adds	r0, #1
 80046d4:	f43f ae97 	beq.w	8004406 <_printf_float+0xbe>
 80046d8:	9a05      	ldr	r2, [sp, #20]
 80046da:	f10b 0b01 	add.w	fp, fp, #1
 80046de:	e7b9      	b.n	8004654 <_printf_float+0x30c>
 80046e0:	ee18 3a10 	vmov	r3, s16
 80046e4:	4652      	mov	r2, sl
 80046e6:	4631      	mov	r1, r6
 80046e8:	4628      	mov	r0, r5
 80046ea:	47b8      	blx	r7
 80046ec:	3001      	adds	r0, #1
 80046ee:	d1be      	bne.n	800466e <_printf_float+0x326>
 80046f0:	e689      	b.n	8004406 <_printf_float+0xbe>
 80046f2:	9a05      	ldr	r2, [sp, #20]
 80046f4:	464b      	mov	r3, r9
 80046f6:	4442      	add	r2, r8
 80046f8:	4631      	mov	r1, r6
 80046fa:	4628      	mov	r0, r5
 80046fc:	47b8      	blx	r7
 80046fe:	3001      	adds	r0, #1
 8004700:	d1c1      	bne.n	8004686 <_printf_float+0x33e>
 8004702:	e680      	b.n	8004406 <_printf_float+0xbe>
 8004704:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004706:	2a01      	cmp	r2, #1
 8004708:	dc01      	bgt.n	800470e <_printf_float+0x3c6>
 800470a:	07db      	lsls	r3, r3, #31
 800470c:	d53a      	bpl.n	8004784 <_printf_float+0x43c>
 800470e:	2301      	movs	r3, #1
 8004710:	4642      	mov	r2, r8
 8004712:	4631      	mov	r1, r6
 8004714:	4628      	mov	r0, r5
 8004716:	47b8      	blx	r7
 8004718:	3001      	adds	r0, #1
 800471a:	f43f ae74 	beq.w	8004406 <_printf_float+0xbe>
 800471e:	ee18 3a10 	vmov	r3, s16
 8004722:	4652      	mov	r2, sl
 8004724:	4631      	mov	r1, r6
 8004726:	4628      	mov	r0, r5
 8004728:	47b8      	blx	r7
 800472a:	3001      	adds	r0, #1
 800472c:	f43f ae6b 	beq.w	8004406 <_printf_float+0xbe>
 8004730:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004734:	2200      	movs	r2, #0
 8004736:	2300      	movs	r3, #0
 8004738:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800473c:	f7fc f9e4 	bl	8000b08 <__aeabi_dcmpeq>
 8004740:	b9d8      	cbnz	r0, 800477a <_printf_float+0x432>
 8004742:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004746:	f108 0201 	add.w	r2, r8, #1
 800474a:	4631      	mov	r1, r6
 800474c:	4628      	mov	r0, r5
 800474e:	47b8      	blx	r7
 8004750:	3001      	adds	r0, #1
 8004752:	d10e      	bne.n	8004772 <_printf_float+0x42a>
 8004754:	e657      	b.n	8004406 <_printf_float+0xbe>
 8004756:	2301      	movs	r3, #1
 8004758:	4652      	mov	r2, sl
 800475a:	4631      	mov	r1, r6
 800475c:	4628      	mov	r0, r5
 800475e:	47b8      	blx	r7
 8004760:	3001      	adds	r0, #1
 8004762:	f43f ae50 	beq.w	8004406 <_printf_float+0xbe>
 8004766:	f108 0801 	add.w	r8, r8, #1
 800476a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800476c:	3b01      	subs	r3, #1
 800476e:	4543      	cmp	r3, r8
 8004770:	dcf1      	bgt.n	8004756 <_printf_float+0x40e>
 8004772:	464b      	mov	r3, r9
 8004774:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004778:	e6da      	b.n	8004530 <_printf_float+0x1e8>
 800477a:	f04f 0800 	mov.w	r8, #0
 800477e:	f104 0a1a 	add.w	sl, r4, #26
 8004782:	e7f2      	b.n	800476a <_printf_float+0x422>
 8004784:	2301      	movs	r3, #1
 8004786:	4642      	mov	r2, r8
 8004788:	e7df      	b.n	800474a <_printf_float+0x402>
 800478a:	2301      	movs	r3, #1
 800478c:	464a      	mov	r2, r9
 800478e:	4631      	mov	r1, r6
 8004790:	4628      	mov	r0, r5
 8004792:	47b8      	blx	r7
 8004794:	3001      	adds	r0, #1
 8004796:	f43f ae36 	beq.w	8004406 <_printf_float+0xbe>
 800479a:	f108 0801 	add.w	r8, r8, #1
 800479e:	68e3      	ldr	r3, [r4, #12]
 80047a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047a2:	1a5b      	subs	r3, r3, r1
 80047a4:	4543      	cmp	r3, r8
 80047a6:	dcf0      	bgt.n	800478a <_printf_float+0x442>
 80047a8:	e6f8      	b.n	800459c <_printf_float+0x254>
 80047aa:	f04f 0800 	mov.w	r8, #0
 80047ae:	f104 0919 	add.w	r9, r4, #25
 80047b2:	e7f4      	b.n	800479e <_printf_float+0x456>

080047b4 <_printf_common>:
 80047b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b8:	4616      	mov	r6, r2
 80047ba:	4699      	mov	r9, r3
 80047bc:	688a      	ldr	r2, [r1, #8]
 80047be:	690b      	ldr	r3, [r1, #16]
 80047c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047c4:	4293      	cmp	r3, r2
 80047c6:	bfb8      	it	lt
 80047c8:	4613      	movlt	r3, r2
 80047ca:	6033      	str	r3, [r6, #0]
 80047cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047d0:	4607      	mov	r7, r0
 80047d2:	460c      	mov	r4, r1
 80047d4:	b10a      	cbz	r2, 80047da <_printf_common+0x26>
 80047d6:	3301      	adds	r3, #1
 80047d8:	6033      	str	r3, [r6, #0]
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	0699      	lsls	r1, r3, #26
 80047de:	bf42      	ittt	mi
 80047e0:	6833      	ldrmi	r3, [r6, #0]
 80047e2:	3302      	addmi	r3, #2
 80047e4:	6033      	strmi	r3, [r6, #0]
 80047e6:	6825      	ldr	r5, [r4, #0]
 80047e8:	f015 0506 	ands.w	r5, r5, #6
 80047ec:	d106      	bne.n	80047fc <_printf_common+0x48>
 80047ee:	f104 0a19 	add.w	sl, r4, #25
 80047f2:	68e3      	ldr	r3, [r4, #12]
 80047f4:	6832      	ldr	r2, [r6, #0]
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	42ab      	cmp	r3, r5
 80047fa:	dc26      	bgt.n	800484a <_printf_common+0x96>
 80047fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004800:	1e13      	subs	r3, r2, #0
 8004802:	6822      	ldr	r2, [r4, #0]
 8004804:	bf18      	it	ne
 8004806:	2301      	movne	r3, #1
 8004808:	0692      	lsls	r2, r2, #26
 800480a:	d42b      	bmi.n	8004864 <_printf_common+0xb0>
 800480c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004810:	4649      	mov	r1, r9
 8004812:	4638      	mov	r0, r7
 8004814:	47c0      	blx	r8
 8004816:	3001      	adds	r0, #1
 8004818:	d01e      	beq.n	8004858 <_printf_common+0xa4>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	6922      	ldr	r2, [r4, #16]
 800481e:	f003 0306 	and.w	r3, r3, #6
 8004822:	2b04      	cmp	r3, #4
 8004824:	bf02      	ittt	eq
 8004826:	68e5      	ldreq	r5, [r4, #12]
 8004828:	6833      	ldreq	r3, [r6, #0]
 800482a:	1aed      	subeq	r5, r5, r3
 800482c:	68a3      	ldr	r3, [r4, #8]
 800482e:	bf0c      	ite	eq
 8004830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004834:	2500      	movne	r5, #0
 8004836:	4293      	cmp	r3, r2
 8004838:	bfc4      	itt	gt
 800483a:	1a9b      	subgt	r3, r3, r2
 800483c:	18ed      	addgt	r5, r5, r3
 800483e:	2600      	movs	r6, #0
 8004840:	341a      	adds	r4, #26
 8004842:	42b5      	cmp	r5, r6
 8004844:	d11a      	bne.n	800487c <_printf_common+0xc8>
 8004846:	2000      	movs	r0, #0
 8004848:	e008      	b.n	800485c <_printf_common+0xa8>
 800484a:	2301      	movs	r3, #1
 800484c:	4652      	mov	r2, sl
 800484e:	4649      	mov	r1, r9
 8004850:	4638      	mov	r0, r7
 8004852:	47c0      	blx	r8
 8004854:	3001      	adds	r0, #1
 8004856:	d103      	bne.n	8004860 <_printf_common+0xac>
 8004858:	f04f 30ff 	mov.w	r0, #4294967295
 800485c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004860:	3501      	adds	r5, #1
 8004862:	e7c6      	b.n	80047f2 <_printf_common+0x3e>
 8004864:	18e1      	adds	r1, r4, r3
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	2030      	movs	r0, #48	; 0x30
 800486a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800486e:	4422      	add	r2, r4
 8004870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004878:	3302      	adds	r3, #2
 800487a:	e7c7      	b.n	800480c <_printf_common+0x58>
 800487c:	2301      	movs	r3, #1
 800487e:	4622      	mov	r2, r4
 8004880:	4649      	mov	r1, r9
 8004882:	4638      	mov	r0, r7
 8004884:	47c0      	blx	r8
 8004886:	3001      	adds	r0, #1
 8004888:	d0e6      	beq.n	8004858 <_printf_common+0xa4>
 800488a:	3601      	adds	r6, #1
 800488c:	e7d9      	b.n	8004842 <_printf_common+0x8e>
	...

08004890 <_printf_i>:
 8004890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004894:	7e0f      	ldrb	r7, [r1, #24]
 8004896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004898:	2f78      	cmp	r7, #120	; 0x78
 800489a:	4691      	mov	r9, r2
 800489c:	4680      	mov	r8, r0
 800489e:	460c      	mov	r4, r1
 80048a0:	469a      	mov	sl, r3
 80048a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048a6:	d807      	bhi.n	80048b8 <_printf_i+0x28>
 80048a8:	2f62      	cmp	r7, #98	; 0x62
 80048aa:	d80a      	bhi.n	80048c2 <_printf_i+0x32>
 80048ac:	2f00      	cmp	r7, #0
 80048ae:	f000 80d4 	beq.w	8004a5a <_printf_i+0x1ca>
 80048b2:	2f58      	cmp	r7, #88	; 0x58
 80048b4:	f000 80c0 	beq.w	8004a38 <_printf_i+0x1a8>
 80048b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048c0:	e03a      	b.n	8004938 <_printf_i+0xa8>
 80048c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048c6:	2b15      	cmp	r3, #21
 80048c8:	d8f6      	bhi.n	80048b8 <_printf_i+0x28>
 80048ca:	a101      	add	r1, pc, #4	; (adr r1, 80048d0 <_printf_i+0x40>)
 80048cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048d0:	08004929 	.word	0x08004929
 80048d4:	0800493d 	.word	0x0800493d
 80048d8:	080048b9 	.word	0x080048b9
 80048dc:	080048b9 	.word	0x080048b9
 80048e0:	080048b9 	.word	0x080048b9
 80048e4:	080048b9 	.word	0x080048b9
 80048e8:	0800493d 	.word	0x0800493d
 80048ec:	080048b9 	.word	0x080048b9
 80048f0:	080048b9 	.word	0x080048b9
 80048f4:	080048b9 	.word	0x080048b9
 80048f8:	080048b9 	.word	0x080048b9
 80048fc:	08004a41 	.word	0x08004a41
 8004900:	08004969 	.word	0x08004969
 8004904:	080049fb 	.word	0x080049fb
 8004908:	080048b9 	.word	0x080048b9
 800490c:	080048b9 	.word	0x080048b9
 8004910:	08004a63 	.word	0x08004a63
 8004914:	080048b9 	.word	0x080048b9
 8004918:	08004969 	.word	0x08004969
 800491c:	080048b9 	.word	0x080048b9
 8004920:	080048b9 	.word	0x080048b9
 8004924:	08004a03 	.word	0x08004a03
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	1d1a      	adds	r2, r3, #4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	602a      	str	r2, [r5, #0]
 8004930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004938:	2301      	movs	r3, #1
 800493a:	e09f      	b.n	8004a7c <_printf_i+0x1ec>
 800493c:	6820      	ldr	r0, [r4, #0]
 800493e:	682b      	ldr	r3, [r5, #0]
 8004940:	0607      	lsls	r7, r0, #24
 8004942:	f103 0104 	add.w	r1, r3, #4
 8004946:	6029      	str	r1, [r5, #0]
 8004948:	d501      	bpl.n	800494e <_printf_i+0xbe>
 800494a:	681e      	ldr	r6, [r3, #0]
 800494c:	e003      	b.n	8004956 <_printf_i+0xc6>
 800494e:	0646      	lsls	r6, r0, #25
 8004950:	d5fb      	bpl.n	800494a <_printf_i+0xba>
 8004952:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004956:	2e00      	cmp	r6, #0
 8004958:	da03      	bge.n	8004962 <_printf_i+0xd2>
 800495a:	232d      	movs	r3, #45	; 0x2d
 800495c:	4276      	negs	r6, r6
 800495e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004962:	485a      	ldr	r0, [pc, #360]	; (8004acc <_printf_i+0x23c>)
 8004964:	230a      	movs	r3, #10
 8004966:	e012      	b.n	800498e <_printf_i+0xfe>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	6820      	ldr	r0, [r4, #0]
 800496c:	1d19      	adds	r1, r3, #4
 800496e:	6029      	str	r1, [r5, #0]
 8004970:	0605      	lsls	r5, r0, #24
 8004972:	d501      	bpl.n	8004978 <_printf_i+0xe8>
 8004974:	681e      	ldr	r6, [r3, #0]
 8004976:	e002      	b.n	800497e <_printf_i+0xee>
 8004978:	0641      	lsls	r1, r0, #25
 800497a:	d5fb      	bpl.n	8004974 <_printf_i+0xe4>
 800497c:	881e      	ldrh	r6, [r3, #0]
 800497e:	4853      	ldr	r0, [pc, #332]	; (8004acc <_printf_i+0x23c>)
 8004980:	2f6f      	cmp	r7, #111	; 0x6f
 8004982:	bf0c      	ite	eq
 8004984:	2308      	moveq	r3, #8
 8004986:	230a      	movne	r3, #10
 8004988:	2100      	movs	r1, #0
 800498a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800498e:	6865      	ldr	r5, [r4, #4]
 8004990:	60a5      	str	r5, [r4, #8]
 8004992:	2d00      	cmp	r5, #0
 8004994:	bfa2      	ittt	ge
 8004996:	6821      	ldrge	r1, [r4, #0]
 8004998:	f021 0104 	bicge.w	r1, r1, #4
 800499c:	6021      	strge	r1, [r4, #0]
 800499e:	b90e      	cbnz	r6, 80049a4 <_printf_i+0x114>
 80049a0:	2d00      	cmp	r5, #0
 80049a2:	d04b      	beq.n	8004a3c <_printf_i+0x1ac>
 80049a4:	4615      	mov	r5, r2
 80049a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80049aa:	fb03 6711 	mls	r7, r3, r1, r6
 80049ae:	5dc7      	ldrb	r7, [r0, r7]
 80049b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049b4:	4637      	mov	r7, r6
 80049b6:	42bb      	cmp	r3, r7
 80049b8:	460e      	mov	r6, r1
 80049ba:	d9f4      	bls.n	80049a6 <_printf_i+0x116>
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d10b      	bne.n	80049d8 <_printf_i+0x148>
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	07de      	lsls	r6, r3, #31
 80049c4:	d508      	bpl.n	80049d8 <_printf_i+0x148>
 80049c6:	6923      	ldr	r3, [r4, #16]
 80049c8:	6861      	ldr	r1, [r4, #4]
 80049ca:	4299      	cmp	r1, r3
 80049cc:	bfde      	ittt	le
 80049ce:	2330      	movle	r3, #48	; 0x30
 80049d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049d8:	1b52      	subs	r2, r2, r5
 80049da:	6122      	str	r2, [r4, #16]
 80049dc:	f8cd a000 	str.w	sl, [sp]
 80049e0:	464b      	mov	r3, r9
 80049e2:	aa03      	add	r2, sp, #12
 80049e4:	4621      	mov	r1, r4
 80049e6:	4640      	mov	r0, r8
 80049e8:	f7ff fee4 	bl	80047b4 <_printf_common>
 80049ec:	3001      	adds	r0, #1
 80049ee:	d14a      	bne.n	8004a86 <_printf_i+0x1f6>
 80049f0:	f04f 30ff 	mov.w	r0, #4294967295
 80049f4:	b004      	add	sp, #16
 80049f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	f043 0320 	orr.w	r3, r3, #32
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	4833      	ldr	r0, [pc, #204]	; (8004ad0 <_printf_i+0x240>)
 8004a04:	2778      	movs	r7, #120	; 0x78
 8004a06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	6829      	ldr	r1, [r5, #0]
 8004a0e:	061f      	lsls	r7, r3, #24
 8004a10:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a14:	d402      	bmi.n	8004a1c <_printf_i+0x18c>
 8004a16:	065f      	lsls	r7, r3, #25
 8004a18:	bf48      	it	mi
 8004a1a:	b2b6      	uxthmi	r6, r6
 8004a1c:	07df      	lsls	r7, r3, #31
 8004a1e:	bf48      	it	mi
 8004a20:	f043 0320 	orrmi.w	r3, r3, #32
 8004a24:	6029      	str	r1, [r5, #0]
 8004a26:	bf48      	it	mi
 8004a28:	6023      	strmi	r3, [r4, #0]
 8004a2a:	b91e      	cbnz	r6, 8004a34 <_printf_i+0x1a4>
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	f023 0320 	bic.w	r3, r3, #32
 8004a32:	6023      	str	r3, [r4, #0]
 8004a34:	2310      	movs	r3, #16
 8004a36:	e7a7      	b.n	8004988 <_printf_i+0xf8>
 8004a38:	4824      	ldr	r0, [pc, #144]	; (8004acc <_printf_i+0x23c>)
 8004a3a:	e7e4      	b.n	8004a06 <_printf_i+0x176>
 8004a3c:	4615      	mov	r5, r2
 8004a3e:	e7bd      	b.n	80049bc <_printf_i+0x12c>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	6826      	ldr	r6, [r4, #0]
 8004a44:	6961      	ldr	r1, [r4, #20]
 8004a46:	1d18      	adds	r0, r3, #4
 8004a48:	6028      	str	r0, [r5, #0]
 8004a4a:	0635      	lsls	r5, r6, #24
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	d501      	bpl.n	8004a54 <_printf_i+0x1c4>
 8004a50:	6019      	str	r1, [r3, #0]
 8004a52:	e002      	b.n	8004a5a <_printf_i+0x1ca>
 8004a54:	0670      	lsls	r0, r6, #25
 8004a56:	d5fb      	bpl.n	8004a50 <_printf_i+0x1c0>
 8004a58:	8019      	strh	r1, [r3, #0]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	6123      	str	r3, [r4, #16]
 8004a5e:	4615      	mov	r5, r2
 8004a60:	e7bc      	b.n	80049dc <_printf_i+0x14c>
 8004a62:	682b      	ldr	r3, [r5, #0]
 8004a64:	1d1a      	adds	r2, r3, #4
 8004a66:	602a      	str	r2, [r5, #0]
 8004a68:	681d      	ldr	r5, [r3, #0]
 8004a6a:	6862      	ldr	r2, [r4, #4]
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f7fb fbce 	bl	8000210 <memchr>
 8004a74:	b108      	cbz	r0, 8004a7a <_printf_i+0x1ea>
 8004a76:	1b40      	subs	r0, r0, r5
 8004a78:	6060      	str	r0, [r4, #4]
 8004a7a:	6863      	ldr	r3, [r4, #4]
 8004a7c:	6123      	str	r3, [r4, #16]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a84:	e7aa      	b.n	80049dc <_printf_i+0x14c>
 8004a86:	6923      	ldr	r3, [r4, #16]
 8004a88:	462a      	mov	r2, r5
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	47d0      	blx	sl
 8004a90:	3001      	adds	r0, #1
 8004a92:	d0ad      	beq.n	80049f0 <_printf_i+0x160>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	079b      	lsls	r3, r3, #30
 8004a98:	d413      	bmi.n	8004ac2 <_printf_i+0x232>
 8004a9a:	68e0      	ldr	r0, [r4, #12]
 8004a9c:	9b03      	ldr	r3, [sp, #12]
 8004a9e:	4298      	cmp	r0, r3
 8004aa0:	bfb8      	it	lt
 8004aa2:	4618      	movlt	r0, r3
 8004aa4:	e7a6      	b.n	80049f4 <_printf_i+0x164>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	4632      	mov	r2, r6
 8004aaa:	4649      	mov	r1, r9
 8004aac:	4640      	mov	r0, r8
 8004aae:	47d0      	blx	sl
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d09d      	beq.n	80049f0 <_printf_i+0x160>
 8004ab4:	3501      	adds	r5, #1
 8004ab6:	68e3      	ldr	r3, [r4, #12]
 8004ab8:	9903      	ldr	r1, [sp, #12]
 8004aba:	1a5b      	subs	r3, r3, r1
 8004abc:	42ab      	cmp	r3, r5
 8004abe:	dcf2      	bgt.n	8004aa6 <_printf_i+0x216>
 8004ac0:	e7eb      	b.n	8004a9a <_printf_i+0x20a>
 8004ac2:	2500      	movs	r5, #0
 8004ac4:	f104 0619 	add.w	r6, r4, #25
 8004ac8:	e7f5      	b.n	8004ab6 <_printf_i+0x226>
 8004aca:	bf00      	nop
 8004acc:	08006d5e 	.word	0x08006d5e
 8004ad0:	08006d6f 	.word	0x08006d6f

08004ad4 <std>:
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	b510      	push	{r4, lr}
 8004ad8:	4604      	mov	r4, r0
 8004ada:	e9c0 3300 	strd	r3, r3, [r0]
 8004ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ae2:	6083      	str	r3, [r0, #8]
 8004ae4:	8181      	strh	r1, [r0, #12]
 8004ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8004ae8:	81c2      	strh	r2, [r0, #14]
 8004aea:	6183      	str	r3, [r0, #24]
 8004aec:	4619      	mov	r1, r3
 8004aee:	2208      	movs	r2, #8
 8004af0:	305c      	adds	r0, #92	; 0x5c
 8004af2:	f000 f9b4 	bl	8004e5e <memset>
 8004af6:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <std+0x58>)
 8004af8:	6263      	str	r3, [r4, #36]	; 0x24
 8004afa:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <std+0x5c>)
 8004afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004afe:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <std+0x60>)
 8004b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b02:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <std+0x64>)
 8004b04:	6323      	str	r3, [r4, #48]	; 0x30
 8004b06:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <std+0x68>)
 8004b08:	6224      	str	r4, [r4, #32]
 8004b0a:	429c      	cmp	r4, r3
 8004b0c:	d006      	beq.n	8004b1c <std+0x48>
 8004b0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004b12:	4294      	cmp	r4, r2
 8004b14:	d002      	beq.n	8004b1c <std+0x48>
 8004b16:	33d0      	adds	r3, #208	; 0xd0
 8004b18:	429c      	cmp	r4, r3
 8004b1a:	d105      	bne.n	8004b28 <std+0x54>
 8004b1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b24:	f000 ba18 	b.w	8004f58 <__retarget_lock_init_recursive>
 8004b28:	bd10      	pop	{r4, pc}
 8004b2a:	bf00      	nop
 8004b2c:	08004dd9 	.word	0x08004dd9
 8004b30:	08004dfb 	.word	0x08004dfb
 8004b34:	08004e33 	.word	0x08004e33
 8004b38:	08004e57 	.word	0x08004e57
 8004b3c:	200002cc 	.word	0x200002cc

08004b40 <stdio_exit_handler>:
 8004b40:	4a02      	ldr	r2, [pc, #8]	; (8004b4c <stdio_exit_handler+0xc>)
 8004b42:	4903      	ldr	r1, [pc, #12]	; (8004b50 <stdio_exit_handler+0x10>)
 8004b44:	4803      	ldr	r0, [pc, #12]	; (8004b54 <stdio_exit_handler+0x14>)
 8004b46:	f000 b869 	b.w	8004c1c <_fwalk_sglue>
 8004b4a:	bf00      	nop
 8004b4c:	2000000c 	.word	0x2000000c
 8004b50:	080068e1 	.word	0x080068e1
 8004b54:	20000018 	.word	0x20000018

08004b58 <cleanup_stdio>:
 8004b58:	6841      	ldr	r1, [r0, #4]
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <cleanup_stdio+0x34>)
 8004b5c:	4299      	cmp	r1, r3
 8004b5e:	b510      	push	{r4, lr}
 8004b60:	4604      	mov	r4, r0
 8004b62:	d001      	beq.n	8004b68 <cleanup_stdio+0x10>
 8004b64:	f001 febc 	bl	80068e0 <_fflush_r>
 8004b68:	68a1      	ldr	r1, [r4, #8]
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <cleanup_stdio+0x38>)
 8004b6c:	4299      	cmp	r1, r3
 8004b6e:	d002      	beq.n	8004b76 <cleanup_stdio+0x1e>
 8004b70:	4620      	mov	r0, r4
 8004b72:	f001 feb5 	bl	80068e0 <_fflush_r>
 8004b76:	68e1      	ldr	r1, [r4, #12]
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <cleanup_stdio+0x3c>)
 8004b7a:	4299      	cmp	r1, r3
 8004b7c:	d004      	beq.n	8004b88 <cleanup_stdio+0x30>
 8004b7e:	4620      	mov	r0, r4
 8004b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b84:	f001 beac 	b.w	80068e0 <_fflush_r>
 8004b88:	bd10      	pop	{r4, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200002cc 	.word	0x200002cc
 8004b90:	20000334 	.word	0x20000334
 8004b94:	2000039c 	.word	0x2000039c

08004b98 <global_stdio_init.part.0>:
 8004b98:	b510      	push	{r4, lr}
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <global_stdio_init.part.0+0x30>)
 8004b9c:	4c0b      	ldr	r4, [pc, #44]	; (8004bcc <global_stdio_init.part.0+0x34>)
 8004b9e:	4a0c      	ldr	r2, [pc, #48]	; (8004bd0 <global_stdio_init.part.0+0x38>)
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2104      	movs	r1, #4
 8004ba8:	f7ff ff94 	bl	8004ad4 <std>
 8004bac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	2109      	movs	r1, #9
 8004bb4:	f7ff ff8e 	bl	8004ad4 <std>
 8004bb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc2:	2112      	movs	r1, #18
 8004bc4:	f7ff bf86 	b.w	8004ad4 <std>
 8004bc8:	20000404 	.word	0x20000404
 8004bcc:	200002cc 	.word	0x200002cc
 8004bd0:	08004b41 	.word	0x08004b41

08004bd4 <__sfp_lock_acquire>:
 8004bd4:	4801      	ldr	r0, [pc, #4]	; (8004bdc <__sfp_lock_acquire+0x8>)
 8004bd6:	f000 b9c0 	b.w	8004f5a <__retarget_lock_acquire_recursive>
 8004bda:	bf00      	nop
 8004bdc:	2000040d 	.word	0x2000040d

08004be0 <__sfp_lock_release>:
 8004be0:	4801      	ldr	r0, [pc, #4]	; (8004be8 <__sfp_lock_release+0x8>)
 8004be2:	f000 b9bb 	b.w	8004f5c <__retarget_lock_release_recursive>
 8004be6:	bf00      	nop
 8004be8:	2000040d 	.word	0x2000040d

08004bec <__sinit>:
 8004bec:	b510      	push	{r4, lr}
 8004bee:	4604      	mov	r4, r0
 8004bf0:	f7ff fff0 	bl	8004bd4 <__sfp_lock_acquire>
 8004bf4:	6a23      	ldr	r3, [r4, #32]
 8004bf6:	b11b      	cbz	r3, 8004c00 <__sinit+0x14>
 8004bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bfc:	f7ff bff0 	b.w	8004be0 <__sfp_lock_release>
 8004c00:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <__sinit+0x28>)
 8004c02:	6223      	str	r3, [r4, #32]
 8004c04:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <__sinit+0x2c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f5      	bne.n	8004bf8 <__sinit+0xc>
 8004c0c:	f7ff ffc4 	bl	8004b98 <global_stdio_init.part.0>
 8004c10:	e7f2      	b.n	8004bf8 <__sinit+0xc>
 8004c12:	bf00      	nop
 8004c14:	08004b59 	.word	0x08004b59
 8004c18:	20000404 	.word	0x20000404

08004c1c <_fwalk_sglue>:
 8004c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c20:	4607      	mov	r7, r0
 8004c22:	4688      	mov	r8, r1
 8004c24:	4614      	mov	r4, r2
 8004c26:	2600      	movs	r6, #0
 8004c28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c2c:	f1b9 0901 	subs.w	r9, r9, #1
 8004c30:	d505      	bpl.n	8004c3e <_fwalk_sglue+0x22>
 8004c32:	6824      	ldr	r4, [r4, #0]
 8004c34:	2c00      	cmp	r4, #0
 8004c36:	d1f7      	bne.n	8004c28 <_fwalk_sglue+0xc>
 8004c38:	4630      	mov	r0, r6
 8004c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c3e:	89ab      	ldrh	r3, [r5, #12]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d907      	bls.n	8004c54 <_fwalk_sglue+0x38>
 8004c44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	d003      	beq.n	8004c54 <_fwalk_sglue+0x38>
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	4638      	mov	r0, r7
 8004c50:	47c0      	blx	r8
 8004c52:	4306      	orrs	r6, r0
 8004c54:	3568      	adds	r5, #104	; 0x68
 8004c56:	e7e9      	b.n	8004c2c <_fwalk_sglue+0x10>

08004c58 <iprintf>:
 8004c58:	b40f      	push	{r0, r1, r2, r3}
 8004c5a:	b507      	push	{r0, r1, r2, lr}
 8004c5c:	4906      	ldr	r1, [pc, #24]	; (8004c78 <iprintf+0x20>)
 8004c5e:	ab04      	add	r3, sp, #16
 8004c60:	6808      	ldr	r0, [r1, #0]
 8004c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c66:	6881      	ldr	r1, [r0, #8]
 8004c68:	9301      	str	r3, [sp, #4]
 8004c6a:	f001 fc99 	bl	80065a0 <_vfiprintf_r>
 8004c6e:	b003      	add	sp, #12
 8004c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c74:	b004      	add	sp, #16
 8004c76:	4770      	bx	lr
 8004c78:	20000064 	.word	0x20000064

08004c7c <setvbuf>:
 8004c7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004c80:	461d      	mov	r5, r3
 8004c82:	4b54      	ldr	r3, [pc, #336]	; (8004dd4 <setvbuf+0x158>)
 8004c84:	681f      	ldr	r7, [r3, #0]
 8004c86:	4604      	mov	r4, r0
 8004c88:	460e      	mov	r6, r1
 8004c8a:	4690      	mov	r8, r2
 8004c8c:	b127      	cbz	r7, 8004c98 <setvbuf+0x1c>
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	b913      	cbnz	r3, 8004c98 <setvbuf+0x1c>
 8004c92:	4638      	mov	r0, r7
 8004c94:	f7ff ffaa 	bl	8004bec <__sinit>
 8004c98:	f1b8 0f02 	cmp.w	r8, #2
 8004c9c:	d006      	beq.n	8004cac <setvbuf+0x30>
 8004c9e:	f1b8 0f01 	cmp.w	r8, #1
 8004ca2:	f200 8094 	bhi.w	8004dce <setvbuf+0x152>
 8004ca6:	2d00      	cmp	r5, #0
 8004ca8:	f2c0 8091 	blt.w	8004dce <setvbuf+0x152>
 8004cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cae:	07da      	lsls	r2, r3, #31
 8004cb0:	d405      	bmi.n	8004cbe <setvbuf+0x42>
 8004cb2:	89a3      	ldrh	r3, [r4, #12]
 8004cb4:	059b      	lsls	r3, r3, #22
 8004cb6:	d402      	bmi.n	8004cbe <setvbuf+0x42>
 8004cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cba:	f000 f94e 	bl	8004f5a <__retarget_lock_acquire_recursive>
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	f001 fe0d 	bl	80068e0 <_fflush_r>
 8004cc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cc8:	b141      	cbz	r1, 8004cdc <setvbuf+0x60>
 8004cca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cce:	4299      	cmp	r1, r3
 8004cd0:	d002      	beq.n	8004cd8 <setvbuf+0x5c>
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	f000 ffbe 	bl	8005c54 <_free_r>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	6363      	str	r3, [r4, #52]	; 0x34
 8004cdc:	2300      	movs	r3, #0
 8004cde:	61a3      	str	r3, [r4, #24]
 8004ce0:	6063      	str	r3, [r4, #4]
 8004ce2:	89a3      	ldrh	r3, [r4, #12]
 8004ce4:	0618      	lsls	r0, r3, #24
 8004ce6:	d503      	bpl.n	8004cf0 <setvbuf+0x74>
 8004ce8:	6921      	ldr	r1, [r4, #16]
 8004cea:	4638      	mov	r0, r7
 8004cec:	f000 ffb2 	bl	8005c54 <_free_r>
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004cf6:	f023 0303 	bic.w	r3, r3, #3
 8004cfa:	f1b8 0f02 	cmp.w	r8, #2
 8004cfe:	81a3      	strh	r3, [r4, #12]
 8004d00:	d05f      	beq.n	8004dc2 <setvbuf+0x146>
 8004d02:	ab01      	add	r3, sp, #4
 8004d04:	466a      	mov	r2, sp
 8004d06:	4621      	mov	r1, r4
 8004d08:	4638      	mov	r0, r7
 8004d0a:	f001 fe11 	bl	8006930 <__swhatbuf_r>
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	4318      	orrs	r0, r3
 8004d12:	81a0      	strh	r0, [r4, #12]
 8004d14:	bb2d      	cbnz	r5, 8004d62 <setvbuf+0xe6>
 8004d16:	9d00      	ldr	r5, [sp, #0]
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f000 ffe7 	bl	8005cec <malloc>
 8004d1e:	4606      	mov	r6, r0
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d150      	bne.n	8004dc6 <setvbuf+0x14a>
 8004d24:	f8dd 9000 	ldr.w	r9, [sp]
 8004d28:	45a9      	cmp	r9, r5
 8004d2a:	d13e      	bne.n	8004daa <setvbuf+0x12e>
 8004d2c:	f04f 35ff 	mov.w	r5, #4294967295
 8004d30:	2200      	movs	r2, #0
 8004d32:	60a2      	str	r2, [r4, #8]
 8004d34:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004d38:	6022      	str	r2, [r4, #0]
 8004d3a:	6122      	str	r2, [r4, #16]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d42:	6162      	str	r2, [r4, #20]
 8004d44:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d46:	f043 0302 	orr.w	r3, r3, #2
 8004d4a:	07d1      	lsls	r1, r2, #31
 8004d4c:	81a3      	strh	r3, [r4, #12]
 8004d4e:	d404      	bmi.n	8004d5a <setvbuf+0xde>
 8004d50:	059b      	lsls	r3, r3, #22
 8004d52:	d402      	bmi.n	8004d5a <setvbuf+0xde>
 8004d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d56:	f000 f901 	bl	8004f5c <__retarget_lock_release_recursive>
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	b003      	add	sp, #12
 8004d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d62:	2e00      	cmp	r6, #0
 8004d64:	d0d8      	beq.n	8004d18 <setvbuf+0x9c>
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	b913      	cbnz	r3, 8004d70 <setvbuf+0xf4>
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	f7ff ff3e 	bl	8004bec <__sinit>
 8004d70:	f1b8 0f01 	cmp.w	r8, #1
 8004d74:	bf08      	it	eq
 8004d76:	89a3      	ldrheq	r3, [r4, #12]
 8004d78:	6026      	str	r6, [r4, #0]
 8004d7a:	bf04      	itt	eq
 8004d7c:	f043 0301 	orreq.w	r3, r3, #1
 8004d80:	81a3      	strheq	r3, [r4, #12]
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	f013 0208 	ands.w	r2, r3, #8
 8004d88:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004d8c:	d01d      	beq.n	8004dca <setvbuf+0x14e>
 8004d8e:	07da      	lsls	r2, r3, #31
 8004d90:	bf41      	itttt	mi
 8004d92:	2200      	movmi	r2, #0
 8004d94:	426d      	negmi	r5, r5
 8004d96:	60a2      	strmi	r2, [r4, #8]
 8004d98:	61a5      	strmi	r5, [r4, #24]
 8004d9a:	bf58      	it	pl
 8004d9c:	60a5      	strpl	r5, [r4, #8]
 8004d9e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004da0:	f015 0501 	ands.w	r5, r5, #1
 8004da4:	d0d4      	beq.n	8004d50 <setvbuf+0xd4>
 8004da6:	2500      	movs	r5, #0
 8004da8:	e7d7      	b.n	8004d5a <setvbuf+0xde>
 8004daa:	4648      	mov	r0, r9
 8004dac:	f000 ff9e 	bl	8005cec <malloc>
 8004db0:	4606      	mov	r6, r0
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d0ba      	beq.n	8004d2c <setvbuf+0xb0>
 8004db6:	89a3      	ldrh	r3, [r4, #12]
 8004db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dbc:	81a3      	strh	r3, [r4, #12]
 8004dbe:	464d      	mov	r5, r9
 8004dc0:	e7d1      	b.n	8004d66 <setvbuf+0xea>
 8004dc2:	2500      	movs	r5, #0
 8004dc4:	e7b4      	b.n	8004d30 <setvbuf+0xb4>
 8004dc6:	46a9      	mov	r9, r5
 8004dc8:	e7f5      	b.n	8004db6 <setvbuf+0x13a>
 8004dca:	60a2      	str	r2, [r4, #8]
 8004dcc:	e7e7      	b.n	8004d9e <setvbuf+0x122>
 8004dce:	f04f 35ff 	mov.w	r5, #4294967295
 8004dd2:	e7c2      	b.n	8004d5a <setvbuf+0xde>
 8004dd4:	20000064 	.word	0x20000064

08004dd8 <__sread>:
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	460c      	mov	r4, r1
 8004ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de0:	f000 f86c 	bl	8004ebc <_read_r>
 8004de4:	2800      	cmp	r0, #0
 8004de6:	bfab      	itete	ge
 8004de8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dea:	89a3      	ldrhlt	r3, [r4, #12]
 8004dec:	181b      	addge	r3, r3, r0
 8004dee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004df2:	bfac      	ite	ge
 8004df4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004df6:	81a3      	strhlt	r3, [r4, #12]
 8004df8:	bd10      	pop	{r4, pc}

08004dfa <__swrite>:
 8004dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfe:	461f      	mov	r7, r3
 8004e00:	898b      	ldrh	r3, [r1, #12]
 8004e02:	05db      	lsls	r3, r3, #23
 8004e04:	4605      	mov	r5, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	4616      	mov	r6, r2
 8004e0a:	d505      	bpl.n	8004e18 <__swrite+0x1e>
 8004e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e10:	2302      	movs	r3, #2
 8004e12:	2200      	movs	r2, #0
 8004e14:	f000 f840 	bl	8004e98 <_lseek_r>
 8004e18:	89a3      	ldrh	r3, [r4, #12]
 8004e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e22:	81a3      	strh	r3, [r4, #12]
 8004e24:	4632      	mov	r2, r6
 8004e26:	463b      	mov	r3, r7
 8004e28:	4628      	mov	r0, r5
 8004e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e2e:	f000 b857 	b.w	8004ee0 <_write_r>

08004e32 <__sseek>:
 8004e32:	b510      	push	{r4, lr}
 8004e34:	460c      	mov	r4, r1
 8004e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e3a:	f000 f82d 	bl	8004e98 <_lseek_r>
 8004e3e:	1c43      	adds	r3, r0, #1
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	bf15      	itete	ne
 8004e44:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e4e:	81a3      	strheq	r3, [r4, #12]
 8004e50:	bf18      	it	ne
 8004e52:	81a3      	strhne	r3, [r4, #12]
 8004e54:	bd10      	pop	{r4, pc}

08004e56 <__sclose>:
 8004e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e5a:	f000 b80d 	b.w	8004e78 <_close_r>

08004e5e <memset>:
 8004e5e:	4402      	add	r2, r0
 8004e60:	4603      	mov	r3, r0
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d100      	bne.n	8004e68 <memset+0xa>
 8004e66:	4770      	bx	lr
 8004e68:	f803 1b01 	strb.w	r1, [r3], #1
 8004e6c:	e7f9      	b.n	8004e62 <memset+0x4>
	...

08004e70 <_localeconv_r>:
 8004e70:	4800      	ldr	r0, [pc, #0]	; (8004e74 <_localeconv_r+0x4>)
 8004e72:	4770      	bx	lr
 8004e74:	20000158 	.word	0x20000158

08004e78 <_close_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d06      	ldr	r5, [pc, #24]	; (8004e94 <_close_r+0x1c>)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fc fa77 	bl	8001376 <_close>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_close_r+0x1a>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_close_r+0x1a>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	20000408 	.word	0x20000408

08004e98 <_lseek_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4d07      	ldr	r5, [pc, #28]	; (8004eb8 <_lseek_r+0x20>)
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	4608      	mov	r0, r1
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	602a      	str	r2, [r5, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f7fc fa8c 	bl	80013c4 <_lseek>
 8004eac:	1c43      	adds	r3, r0, #1
 8004eae:	d102      	bne.n	8004eb6 <_lseek_r+0x1e>
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	b103      	cbz	r3, 8004eb6 <_lseek_r+0x1e>
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
 8004eb8:	20000408 	.word	0x20000408

08004ebc <_read_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4d07      	ldr	r5, [pc, #28]	; (8004edc <_read_r+0x20>)
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	4608      	mov	r0, r1
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	602a      	str	r2, [r5, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f7fc fa1a 	bl	8001304 <_read>
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	d102      	bne.n	8004eda <_read_r+0x1e>
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	b103      	cbz	r3, 8004eda <_read_r+0x1e>
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
 8004edc:	20000408 	.word	0x20000408

08004ee0 <_write_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4d07      	ldr	r5, [pc, #28]	; (8004f00 <_write_r+0x20>)
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	4608      	mov	r0, r1
 8004ee8:	4611      	mov	r1, r2
 8004eea:	2200      	movs	r2, #0
 8004eec:	602a      	str	r2, [r5, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f7fc fa25 	bl	800133e <_write>
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	d102      	bne.n	8004efe <_write_r+0x1e>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	b103      	cbz	r3, 8004efe <_write_r+0x1e>
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
 8004f00:	20000408 	.word	0x20000408

08004f04 <__errno>:
 8004f04:	4b01      	ldr	r3, [pc, #4]	; (8004f0c <__errno+0x8>)
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	20000064 	.word	0x20000064

08004f10 <__libc_init_array>:
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	4d0d      	ldr	r5, [pc, #52]	; (8004f48 <__libc_init_array+0x38>)
 8004f14:	4c0d      	ldr	r4, [pc, #52]	; (8004f4c <__libc_init_array+0x3c>)
 8004f16:	1b64      	subs	r4, r4, r5
 8004f18:	10a4      	asrs	r4, r4, #2
 8004f1a:	2600      	movs	r6, #0
 8004f1c:	42a6      	cmp	r6, r4
 8004f1e:	d109      	bne.n	8004f34 <__libc_init_array+0x24>
 8004f20:	4d0b      	ldr	r5, [pc, #44]	; (8004f50 <__libc_init_array+0x40>)
 8004f22:	4c0c      	ldr	r4, [pc, #48]	; (8004f54 <__libc_init_array+0x44>)
 8004f24:	f001 feee 	bl	8006d04 <_init>
 8004f28:	1b64      	subs	r4, r4, r5
 8004f2a:	10a4      	asrs	r4, r4, #2
 8004f2c:	2600      	movs	r6, #0
 8004f2e:	42a6      	cmp	r6, r4
 8004f30:	d105      	bne.n	8004f3e <__libc_init_array+0x2e>
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f38:	4798      	blx	r3
 8004f3a:	3601      	adds	r6, #1
 8004f3c:	e7ee      	b.n	8004f1c <__libc_init_array+0xc>
 8004f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f42:	4798      	blx	r3
 8004f44:	3601      	adds	r6, #1
 8004f46:	e7f2      	b.n	8004f2e <__libc_init_array+0x1e>
 8004f48:	080070c4 	.word	0x080070c4
 8004f4c:	080070c4 	.word	0x080070c4
 8004f50:	080070c4 	.word	0x080070c4
 8004f54:	080070c8 	.word	0x080070c8

08004f58 <__retarget_lock_init_recursive>:
 8004f58:	4770      	bx	lr

08004f5a <__retarget_lock_acquire_recursive>:
 8004f5a:	4770      	bx	lr

08004f5c <__retarget_lock_release_recursive>:
 8004f5c:	4770      	bx	lr

08004f5e <quorem>:
 8004f5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f62:	6903      	ldr	r3, [r0, #16]
 8004f64:	690c      	ldr	r4, [r1, #16]
 8004f66:	42a3      	cmp	r3, r4
 8004f68:	4607      	mov	r7, r0
 8004f6a:	db7e      	blt.n	800506a <quorem+0x10c>
 8004f6c:	3c01      	subs	r4, #1
 8004f6e:	f101 0814 	add.w	r8, r1, #20
 8004f72:	f100 0514 	add.w	r5, r0, #20
 8004f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f84:	3301      	adds	r3, #1
 8004f86:	429a      	cmp	r2, r3
 8004f88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004f8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f90:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f94:	d331      	bcc.n	8004ffa <quorem+0x9c>
 8004f96:	f04f 0e00 	mov.w	lr, #0
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	46ac      	mov	ip, r5
 8004f9e:	46f2      	mov	sl, lr
 8004fa0:	f850 2b04 	ldr.w	r2, [r0], #4
 8004fa4:	b293      	uxth	r3, r2
 8004fa6:	fb06 e303 	mla	r3, r6, r3, lr
 8004faa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004fae:	0c1a      	lsrs	r2, r3, #16
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	ebaa 0303 	sub.w	r3, sl, r3
 8004fb6:	f8dc a000 	ldr.w	sl, [ip]
 8004fba:	fa13 f38a 	uxtah	r3, r3, sl
 8004fbe:	fb06 220e 	mla	r2, r6, lr, r2
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	9b00      	ldr	r3, [sp, #0]
 8004fc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004fca:	b292      	uxth	r2, r2
 8004fcc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004fd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fd4:	f8bd 3000 	ldrh.w	r3, [sp]
 8004fd8:	4581      	cmp	r9, r0
 8004fda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fde:	f84c 3b04 	str.w	r3, [ip], #4
 8004fe2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004fe6:	d2db      	bcs.n	8004fa0 <quorem+0x42>
 8004fe8:	f855 300b 	ldr.w	r3, [r5, fp]
 8004fec:	b92b      	cbnz	r3, 8004ffa <quorem+0x9c>
 8004fee:	9b01      	ldr	r3, [sp, #4]
 8004ff0:	3b04      	subs	r3, #4
 8004ff2:	429d      	cmp	r5, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	d32c      	bcc.n	8005052 <quorem+0xf4>
 8004ff8:	613c      	str	r4, [r7, #16]
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	f001 f9a6 	bl	800634c <__mcmp>
 8005000:	2800      	cmp	r0, #0
 8005002:	db22      	blt.n	800504a <quorem+0xec>
 8005004:	3601      	adds	r6, #1
 8005006:	4629      	mov	r1, r5
 8005008:	2000      	movs	r0, #0
 800500a:	f858 2b04 	ldr.w	r2, [r8], #4
 800500e:	f8d1 c000 	ldr.w	ip, [r1]
 8005012:	b293      	uxth	r3, r2
 8005014:	1ac3      	subs	r3, r0, r3
 8005016:	0c12      	lsrs	r2, r2, #16
 8005018:	fa13 f38c 	uxtah	r3, r3, ip
 800501c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005020:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005024:	b29b      	uxth	r3, r3
 8005026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800502a:	45c1      	cmp	r9, r8
 800502c:	f841 3b04 	str.w	r3, [r1], #4
 8005030:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005034:	d2e9      	bcs.n	800500a <quorem+0xac>
 8005036:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800503a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800503e:	b922      	cbnz	r2, 800504a <quorem+0xec>
 8005040:	3b04      	subs	r3, #4
 8005042:	429d      	cmp	r5, r3
 8005044:	461a      	mov	r2, r3
 8005046:	d30a      	bcc.n	800505e <quorem+0x100>
 8005048:	613c      	str	r4, [r7, #16]
 800504a:	4630      	mov	r0, r6
 800504c:	b003      	add	sp, #12
 800504e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	3b04      	subs	r3, #4
 8005056:	2a00      	cmp	r2, #0
 8005058:	d1ce      	bne.n	8004ff8 <quorem+0x9a>
 800505a:	3c01      	subs	r4, #1
 800505c:	e7c9      	b.n	8004ff2 <quorem+0x94>
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	3b04      	subs	r3, #4
 8005062:	2a00      	cmp	r2, #0
 8005064:	d1f0      	bne.n	8005048 <quorem+0xea>
 8005066:	3c01      	subs	r4, #1
 8005068:	e7eb      	b.n	8005042 <quorem+0xe4>
 800506a:	2000      	movs	r0, #0
 800506c:	e7ee      	b.n	800504c <quorem+0xee>
	...

08005070 <_dtoa_r>:
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	ed2d 8b04 	vpush	{d8-d9}
 8005078:	69c5      	ldr	r5, [r0, #28]
 800507a:	b093      	sub	sp, #76	; 0x4c
 800507c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005080:	ec57 6b10 	vmov	r6, r7, d0
 8005084:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005088:	9107      	str	r1, [sp, #28]
 800508a:	4604      	mov	r4, r0
 800508c:	920a      	str	r2, [sp, #40]	; 0x28
 800508e:	930d      	str	r3, [sp, #52]	; 0x34
 8005090:	b975      	cbnz	r5, 80050b0 <_dtoa_r+0x40>
 8005092:	2010      	movs	r0, #16
 8005094:	f000 fe2a 	bl	8005cec <malloc>
 8005098:	4602      	mov	r2, r0
 800509a:	61e0      	str	r0, [r4, #28]
 800509c:	b920      	cbnz	r0, 80050a8 <_dtoa_r+0x38>
 800509e:	4bae      	ldr	r3, [pc, #696]	; (8005358 <_dtoa_r+0x2e8>)
 80050a0:	21ef      	movs	r1, #239	; 0xef
 80050a2:	48ae      	ldr	r0, [pc, #696]	; (800535c <_dtoa_r+0x2ec>)
 80050a4:	f001 fd7c 	bl	8006ba0 <__assert_func>
 80050a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80050ac:	6005      	str	r5, [r0, #0]
 80050ae:	60c5      	str	r5, [r0, #12]
 80050b0:	69e3      	ldr	r3, [r4, #28]
 80050b2:	6819      	ldr	r1, [r3, #0]
 80050b4:	b151      	cbz	r1, 80050cc <_dtoa_r+0x5c>
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	604a      	str	r2, [r1, #4]
 80050ba:	2301      	movs	r3, #1
 80050bc:	4093      	lsls	r3, r2
 80050be:	608b      	str	r3, [r1, #8]
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 ff07 	bl	8005ed4 <_Bfree>
 80050c6:	69e3      	ldr	r3, [r4, #28]
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	1e3b      	subs	r3, r7, #0
 80050ce:	bfbb      	ittet	lt
 80050d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80050d4:	9303      	strlt	r3, [sp, #12]
 80050d6:	2300      	movge	r3, #0
 80050d8:	2201      	movlt	r2, #1
 80050da:	bfac      	ite	ge
 80050dc:	f8c8 3000 	strge.w	r3, [r8]
 80050e0:	f8c8 2000 	strlt.w	r2, [r8]
 80050e4:	4b9e      	ldr	r3, [pc, #632]	; (8005360 <_dtoa_r+0x2f0>)
 80050e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80050ea:	ea33 0308 	bics.w	r3, r3, r8
 80050ee:	d11b      	bne.n	8005128 <_dtoa_r+0xb8>
 80050f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80050f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80050fc:	4333      	orrs	r3, r6
 80050fe:	f000 8593 	beq.w	8005c28 <_dtoa_r+0xbb8>
 8005102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005104:	b963      	cbnz	r3, 8005120 <_dtoa_r+0xb0>
 8005106:	4b97      	ldr	r3, [pc, #604]	; (8005364 <_dtoa_r+0x2f4>)
 8005108:	e027      	b.n	800515a <_dtoa_r+0xea>
 800510a:	4b97      	ldr	r3, [pc, #604]	; (8005368 <_dtoa_r+0x2f8>)
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	9800      	ldr	r0, [sp, #0]
 8005116:	b013      	add	sp, #76	; 0x4c
 8005118:	ecbd 8b04 	vpop	{d8-d9}
 800511c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005120:	4b90      	ldr	r3, [pc, #576]	; (8005364 <_dtoa_r+0x2f4>)
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	3303      	adds	r3, #3
 8005126:	e7f3      	b.n	8005110 <_dtoa_r+0xa0>
 8005128:	ed9d 7b02 	vldr	d7, [sp, #8]
 800512c:	2200      	movs	r2, #0
 800512e:	ec51 0b17 	vmov	r0, r1, d7
 8005132:	eeb0 8a47 	vmov.f32	s16, s14
 8005136:	eef0 8a67 	vmov.f32	s17, s15
 800513a:	2300      	movs	r3, #0
 800513c:	f7fb fce4 	bl	8000b08 <__aeabi_dcmpeq>
 8005140:	4681      	mov	r9, r0
 8005142:	b160      	cbz	r0, 800515e <_dtoa_r+0xee>
 8005144:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005146:	2301      	movs	r3, #1
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8568 	beq.w	8005c22 <_dtoa_r+0xbb2>
 8005152:	4b86      	ldr	r3, [pc, #536]	; (800536c <_dtoa_r+0x2fc>)
 8005154:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	3b01      	subs	r3, #1
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	e7da      	b.n	8005114 <_dtoa_r+0xa4>
 800515e:	aa10      	add	r2, sp, #64	; 0x40
 8005160:	a911      	add	r1, sp, #68	; 0x44
 8005162:	4620      	mov	r0, r4
 8005164:	eeb0 0a48 	vmov.f32	s0, s16
 8005168:	eef0 0a68 	vmov.f32	s1, s17
 800516c:	f001 f994 	bl	8006498 <__d2b>
 8005170:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005174:	4682      	mov	sl, r0
 8005176:	2d00      	cmp	r5, #0
 8005178:	d07f      	beq.n	800527a <_dtoa_r+0x20a>
 800517a:	ee18 3a90 	vmov	r3, s17
 800517e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005182:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005186:	ec51 0b18 	vmov	r0, r1, d8
 800518a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800518e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005192:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005196:	4619      	mov	r1, r3
 8005198:	2200      	movs	r2, #0
 800519a:	4b75      	ldr	r3, [pc, #468]	; (8005370 <_dtoa_r+0x300>)
 800519c:	f7fb f894 	bl	80002c8 <__aeabi_dsub>
 80051a0:	a367      	add	r3, pc, #412	; (adr r3, 8005340 <_dtoa_r+0x2d0>)
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	f7fb fa47 	bl	8000638 <__aeabi_dmul>
 80051aa:	a367      	add	r3, pc, #412	; (adr r3, 8005348 <_dtoa_r+0x2d8>)
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f7fb f88c 	bl	80002cc <__adddf3>
 80051b4:	4606      	mov	r6, r0
 80051b6:	4628      	mov	r0, r5
 80051b8:	460f      	mov	r7, r1
 80051ba:	f7fb f9d3 	bl	8000564 <__aeabi_i2d>
 80051be:	a364      	add	r3, pc, #400	; (adr r3, 8005350 <_dtoa_r+0x2e0>)
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f7fb fa38 	bl	8000638 <__aeabi_dmul>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4630      	mov	r0, r6
 80051ce:	4639      	mov	r1, r7
 80051d0:	f7fb f87c 	bl	80002cc <__adddf3>
 80051d4:	4606      	mov	r6, r0
 80051d6:	460f      	mov	r7, r1
 80051d8:	f7fb fcde 	bl	8000b98 <__aeabi_d2iz>
 80051dc:	2200      	movs	r2, #0
 80051de:	4683      	mov	fp, r0
 80051e0:	2300      	movs	r3, #0
 80051e2:	4630      	mov	r0, r6
 80051e4:	4639      	mov	r1, r7
 80051e6:	f7fb fc99 	bl	8000b1c <__aeabi_dcmplt>
 80051ea:	b148      	cbz	r0, 8005200 <_dtoa_r+0x190>
 80051ec:	4658      	mov	r0, fp
 80051ee:	f7fb f9b9 	bl	8000564 <__aeabi_i2d>
 80051f2:	4632      	mov	r2, r6
 80051f4:	463b      	mov	r3, r7
 80051f6:	f7fb fc87 	bl	8000b08 <__aeabi_dcmpeq>
 80051fa:	b908      	cbnz	r0, 8005200 <_dtoa_r+0x190>
 80051fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005200:	f1bb 0f16 	cmp.w	fp, #22
 8005204:	d857      	bhi.n	80052b6 <_dtoa_r+0x246>
 8005206:	4b5b      	ldr	r3, [pc, #364]	; (8005374 <_dtoa_r+0x304>)
 8005208:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	ec51 0b18 	vmov	r0, r1, d8
 8005214:	f7fb fc82 	bl	8000b1c <__aeabi_dcmplt>
 8005218:	2800      	cmp	r0, #0
 800521a:	d04e      	beq.n	80052ba <_dtoa_r+0x24a>
 800521c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005220:	2300      	movs	r3, #0
 8005222:	930c      	str	r3, [sp, #48]	; 0x30
 8005224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005226:	1b5b      	subs	r3, r3, r5
 8005228:	1e5a      	subs	r2, r3, #1
 800522a:	bf45      	ittet	mi
 800522c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005230:	9305      	strmi	r3, [sp, #20]
 8005232:	2300      	movpl	r3, #0
 8005234:	2300      	movmi	r3, #0
 8005236:	9206      	str	r2, [sp, #24]
 8005238:	bf54      	ite	pl
 800523a:	9305      	strpl	r3, [sp, #20]
 800523c:	9306      	strmi	r3, [sp, #24]
 800523e:	f1bb 0f00 	cmp.w	fp, #0
 8005242:	db3c      	blt.n	80052be <_dtoa_r+0x24e>
 8005244:	9b06      	ldr	r3, [sp, #24]
 8005246:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800524a:	445b      	add	r3, fp
 800524c:	9306      	str	r3, [sp, #24]
 800524e:	2300      	movs	r3, #0
 8005250:	9308      	str	r3, [sp, #32]
 8005252:	9b07      	ldr	r3, [sp, #28]
 8005254:	2b09      	cmp	r3, #9
 8005256:	d868      	bhi.n	800532a <_dtoa_r+0x2ba>
 8005258:	2b05      	cmp	r3, #5
 800525a:	bfc4      	itt	gt
 800525c:	3b04      	subgt	r3, #4
 800525e:	9307      	strgt	r3, [sp, #28]
 8005260:	9b07      	ldr	r3, [sp, #28]
 8005262:	f1a3 0302 	sub.w	r3, r3, #2
 8005266:	bfcc      	ite	gt
 8005268:	2500      	movgt	r5, #0
 800526a:	2501      	movle	r5, #1
 800526c:	2b03      	cmp	r3, #3
 800526e:	f200 8085 	bhi.w	800537c <_dtoa_r+0x30c>
 8005272:	e8df f003 	tbb	[pc, r3]
 8005276:	3b2e      	.short	0x3b2e
 8005278:	5839      	.short	0x5839
 800527a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800527e:	441d      	add	r5, r3
 8005280:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005284:	2b20      	cmp	r3, #32
 8005286:	bfc1      	itttt	gt
 8005288:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800528c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005290:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005294:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005298:	bfd6      	itet	le
 800529a:	f1c3 0320 	rsble	r3, r3, #32
 800529e:	ea48 0003 	orrgt.w	r0, r8, r3
 80052a2:	fa06 f003 	lslle.w	r0, r6, r3
 80052a6:	f7fb f94d 	bl	8000544 <__aeabi_ui2d>
 80052aa:	2201      	movs	r2, #1
 80052ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80052b0:	3d01      	subs	r5, #1
 80052b2:	920e      	str	r2, [sp, #56]	; 0x38
 80052b4:	e76f      	b.n	8005196 <_dtoa_r+0x126>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e7b3      	b.n	8005222 <_dtoa_r+0x1b2>
 80052ba:	900c      	str	r0, [sp, #48]	; 0x30
 80052bc:	e7b2      	b.n	8005224 <_dtoa_r+0x1b4>
 80052be:	9b05      	ldr	r3, [sp, #20]
 80052c0:	eba3 030b 	sub.w	r3, r3, fp
 80052c4:	9305      	str	r3, [sp, #20]
 80052c6:	f1cb 0300 	rsb	r3, fp, #0
 80052ca:	9308      	str	r3, [sp, #32]
 80052cc:	2300      	movs	r3, #0
 80052ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80052d0:	e7bf      	b.n	8005252 <_dtoa_r+0x1e2>
 80052d2:	2300      	movs	r3, #0
 80052d4:	9309      	str	r3, [sp, #36]	; 0x24
 80052d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052d8:	2b00      	cmp	r3, #0
 80052da:	dc52      	bgt.n	8005382 <_dtoa_r+0x312>
 80052dc:	2301      	movs	r3, #1
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	9304      	str	r3, [sp, #16]
 80052e2:	461a      	mov	r2, r3
 80052e4:	920a      	str	r2, [sp, #40]	; 0x28
 80052e6:	e00b      	b.n	8005300 <_dtoa_r+0x290>
 80052e8:	2301      	movs	r3, #1
 80052ea:	e7f3      	b.n	80052d4 <_dtoa_r+0x264>
 80052ec:	2300      	movs	r3, #0
 80052ee:	9309      	str	r3, [sp, #36]	; 0x24
 80052f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052f2:	445b      	add	r3, fp
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	3301      	adds	r3, #1
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	9304      	str	r3, [sp, #16]
 80052fc:	bfb8      	it	lt
 80052fe:	2301      	movlt	r3, #1
 8005300:	69e0      	ldr	r0, [r4, #28]
 8005302:	2100      	movs	r1, #0
 8005304:	2204      	movs	r2, #4
 8005306:	f102 0614 	add.w	r6, r2, #20
 800530a:	429e      	cmp	r6, r3
 800530c:	d93d      	bls.n	800538a <_dtoa_r+0x31a>
 800530e:	6041      	str	r1, [r0, #4]
 8005310:	4620      	mov	r0, r4
 8005312:	f000 fd9f 	bl	8005e54 <_Balloc>
 8005316:	9000      	str	r0, [sp, #0]
 8005318:	2800      	cmp	r0, #0
 800531a:	d139      	bne.n	8005390 <_dtoa_r+0x320>
 800531c:	4b16      	ldr	r3, [pc, #88]	; (8005378 <_dtoa_r+0x308>)
 800531e:	4602      	mov	r2, r0
 8005320:	f240 11af 	movw	r1, #431	; 0x1af
 8005324:	e6bd      	b.n	80050a2 <_dtoa_r+0x32>
 8005326:	2301      	movs	r3, #1
 8005328:	e7e1      	b.n	80052ee <_dtoa_r+0x27e>
 800532a:	2501      	movs	r5, #1
 800532c:	2300      	movs	r3, #0
 800532e:	9307      	str	r3, [sp, #28]
 8005330:	9509      	str	r5, [sp, #36]	; 0x24
 8005332:	f04f 33ff 	mov.w	r3, #4294967295
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	9304      	str	r3, [sp, #16]
 800533a:	2200      	movs	r2, #0
 800533c:	2312      	movs	r3, #18
 800533e:	e7d1      	b.n	80052e4 <_dtoa_r+0x274>
 8005340:	636f4361 	.word	0x636f4361
 8005344:	3fd287a7 	.word	0x3fd287a7
 8005348:	8b60c8b3 	.word	0x8b60c8b3
 800534c:	3fc68a28 	.word	0x3fc68a28
 8005350:	509f79fb 	.word	0x509f79fb
 8005354:	3fd34413 	.word	0x3fd34413
 8005358:	08006d8d 	.word	0x08006d8d
 800535c:	08006da4 	.word	0x08006da4
 8005360:	7ff00000 	.word	0x7ff00000
 8005364:	08006d89 	.word	0x08006d89
 8005368:	08006d80 	.word	0x08006d80
 800536c:	08006d5d 	.word	0x08006d5d
 8005370:	3ff80000 	.word	0x3ff80000
 8005374:	08006e90 	.word	0x08006e90
 8005378:	08006dfc 	.word	0x08006dfc
 800537c:	2301      	movs	r3, #1
 800537e:	9309      	str	r3, [sp, #36]	; 0x24
 8005380:	e7d7      	b.n	8005332 <_dtoa_r+0x2c2>
 8005382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	9304      	str	r3, [sp, #16]
 8005388:	e7ba      	b.n	8005300 <_dtoa_r+0x290>
 800538a:	3101      	adds	r1, #1
 800538c:	0052      	lsls	r2, r2, #1
 800538e:	e7ba      	b.n	8005306 <_dtoa_r+0x296>
 8005390:	69e3      	ldr	r3, [r4, #28]
 8005392:	9a00      	ldr	r2, [sp, #0]
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	9b04      	ldr	r3, [sp, #16]
 8005398:	2b0e      	cmp	r3, #14
 800539a:	f200 80a8 	bhi.w	80054ee <_dtoa_r+0x47e>
 800539e:	2d00      	cmp	r5, #0
 80053a0:	f000 80a5 	beq.w	80054ee <_dtoa_r+0x47e>
 80053a4:	f1bb 0f00 	cmp.w	fp, #0
 80053a8:	dd38      	ble.n	800541c <_dtoa_r+0x3ac>
 80053aa:	4bc0      	ldr	r3, [pc, #768]	; (80056ac <_dtoa_r+0x63c>)
 80053ac:	f00b 020f 	and.w	r2, fp, #15
 80053b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80053b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80053bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80053c0:	d019      	beq.n	80053f6 <_dtoa_r+0x386>
 80053c2:	4bbb      	ldr	r3, [pc, #748]	; (80056b0 <_dtoa_r+0x640>)
 80053c4:	ec51 0b18 	vmov	r0, r1, d8
 80053c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80053cc:	f7fb fa5e 	bl	800088c <__aeabi_ddiv>
 80053d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053d4:	f008 080f 	and.w	r8, r8, #15
 80053d8:	2503      	movs	r5, #3
 80053da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80056b0 <_dtoa_r+0x640>
 80053de:	f1b8 0f00 	cmp.w	r8, #0
 80053e2:	d10a      	bne.n	80053fa <_dtoa_r+0x38a>
 80053e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053e8:	4632      	mov	r2, r6
 80053ea:	463b      	mov	r3, r7
 80053ec:	f7fb fa4e 	bl	800088c <__aeabi_ddiv>
 80053f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053f4:	e02b      	b.n	800544e <_dtoa_r+0x3de>
 80053f6:	2502      	movs	r5, #2
 80053f8:	e7ef      	b.n	80053da <_dtoa_r+0x36a>
 80053fa:	f018 0f01 	tst.w	r8, #1
 80053fe:	d008      	beq.n	8005412 <_dtoa_r+0x3a2>
 8005400:	4630      	mov	r0, r6
 8005402:	4639      	mov	r1, r7
 8005404:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005408:	f7fb f916 	bl	8000638 <__aeabi_dmul>
 800540c:	3501      	adds	r5, #1
 800540e:	4606      	mov	r6, r0
 8005410:	460f      	mov	r7, r1
 8005412:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005416:	f109 0908 	add.w	r9, r9, #8
 800541a:	e7e0      	b.n	80053de <_dtoa_r+0x36e>
 800541c:	f000 809f 	beq.w	800555e <_dtoa_r+0x4ee>
 8005420:	f1cb 0600 	rsb	r6, fp, #0
 8005424:	4ba1      	ldr	r3, [pc, #644]	; (80056ac <_dtoa_r+0x63c>)
 8005426:	4fa2      	ldr	r7, [pc, #648]	; (80056b0 <_dtoa_r+0x640>)
 8005428:	f006 020f 	and.w	r2, r6, #15
 800542c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	ec51 0b18 	vmov	r0, r1, d8
 8005438:	f7fb f8fe 	bl	8000638 <__aeabi_dmul>
 800543c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005440:	1136      	asrs	r6, r6, #4
 8005442:	2300      	movs	r3, #0
 8005444:	2502      	movs	r5, #2
 8005446:	2e00      	cmp	r6, #0
 8005448:	d17e      	bne.n	8005548 <_dtoa_r+0x4d8>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1d0      	bne.n	80053f0 <_dtoa_r+0x380>
 800544e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005450:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8084 	beq.w	8005562 <_dtoa_r+0x4f2>
 800545a:	4b96      	ldr	r3, [pc, #600]	; (80056b4 <_dtoa_r+0x644>)
 800545c:	2200      	movs	r2, #0
 800545e:	4640      	mov	r0, r8
 8005460:	4649      	mov	r1, r9
 8005462:	f7fb fb5b 	bl	8000b1c <__aeabi_dcmplt>
 8005466:	2800      	cmp	r0, #0
 8005468:	d07b      	beq.n	8005562 <_dtoa_r+0x4f2>
 800546a:	9b04      	ldr	r3, [sp, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d078      	beq.n	8005562 <_dtoa_r+0x4f2>
 8005470:	9b01      	ldr	r3, [sp, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	dd39      	ble.n	80054ea <_dtoa_r+0x47a>
 8005476:	4b90      	ldr	r3, [pc, #576]	; (80056b8 <_dtoa_r+0x648>)
 8005478:	2200      	movs	r2, #0
 800547a:	4640      	mov	r0, r8
 800547c:	4649      	mov	r1, r9
 800547e:	f7fb f8db 	bl	8000638 <__aeabi_dmul>
 8005482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005486:	9e01      	ldr	r6, [sp, #4]
 8005488:	f10b 37ff 	add.w	r7, fp, #4294967295
 800548c:	3501      	adds	r5, #1
 800548e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005492:	4628      	mov	r0, r5
 8005494:	f7fb f866 	bl	8000564 <__aeabi_i2d>
 8005498:	4642      	mov	r2, r8
 800549a:	464b      	mov	r3, r9
 800549c:	f7fb f8cc 	bl	8000638 <__aeabi_dmul>
 80054a0:	4b86      	ldr	r3, [pc, #536]	; (80056bc <_dtoa_r+0x64c>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	f7fa ff12 	bl	80002cc <__adddf3>
 80054a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80054ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b0:	9303      	str	r3, [sp, #12]
 80054b2:	2e00      	cmp	r6, #0
 80054b4:	d158      	bne.n	8005568 <_dtoa_r+0x4f8>
 80054b6:	4b82      	ldr	r3, [pc, #520]	; (80056c0 <_dtoa_r+0x650>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	4640      	mov	r0, r8
 80054bc:	4649      	mov	r1, r9
 80054be:	f7fa ff03 	bl	80002c8 <__aeabi_dsub>
 80054c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054c6:	4680      	mov	r8, r0
 80054c8:	4689      	mov	r9, r1
 80054ca:	f7fb fb45 	bl	8000b58 <__aeabi_dcmpgt>
 80054ce:	2800      	cmp	r0, #0
 80054d0:	f040 8296 	bne.w	8005a00 <_dtoa_r+0x990>
 80054d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80054d8:	4640      	mov	r0, r8
 80054da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054de:	4649      	mov	r1, r9
 80054e0:	f7fb fb1c 	bl	8000b1c <__aeabi_dcmplt>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	f040 8289 	bne.w	80059fc <_dtoa_r+0x98c>
 80054ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80054ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f2c0 814e 	blt.w	8005792 <_dtoa_r+0x722>
 80054f6:	f1bb 0f0e 	cmp.w	fp, #14
 80054fa:	f300 814a 	bgt.w	8005792 <_dtoa_r+0x722>
 80054fe:	4b6b      	ldr	r3, [pc, #428]	; (80056ac <_dtoa_r+0x63c>)
 8005500:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005504:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	f280 80dc 	bge.w	80056c8 <_dtoa_r+0x658>
 8005510:	9b04      	ldr	r3, [sp, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	f300 80d8 	bgt.w	80056c8 <_dtoa_r+0x658>
 8005518:	f040 826f 	bne.w	80059fa <_dtoa_r+0x98a>
 800551c:	4b68      	ldr	r3, [pc, #416]	; (80056c0 <_dtoa_r+0x650>)
 800551e:	2200      	movs	r2, #0
 8005520:	4640      	mov	r0, r8
 8005522:	4649      	mov	r1, r9
 8005524:	f7fb f888 	bl	8000638 <__aeabi_dmul>
 8005528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800552c:	f7fb fb0a 	bl	8000b44 <__aeabi_dcmpge>
 8005530:	9e04      	ldr	r6, [sp, #16]
 8005532:	4637      	mov	r7, r6
 8005534:	2800      	cmp	r0, #0
 8005536:	f040 8245 	bne.w	80059c4 <_dtoa_r+0x954>
 800553a:	9d00      	ldr	r5, [sp, #0]
 800553c:	2331      	movs	r3, #49	; 0x31
 800553e:	f805 3b01 	strb.w	r3, [r5], #1
 8005542:	f10b 0b01 	add.w	fp, fp, #1
 8005546:	e241      	b.n	80059cc <_dtoa_r+0x95c>
 8005548:	07f2      	lsls	r2, r6, #31
 800554a:	d505      	bpl.n	8005558 <_dtoa_r+0x4e8>
 800554c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005550:	f7fb f872 	bl	8000638 <__aeabi_dmul>
 8005554:	3501      	adds	r5, #1
 8005556:	2301      	movs	r3, #1
 8005558:	1076      	asrs	r6, r6, #1
 800555a:	3708      	adds	r7, #8
 800555c:	e773      	b.n	8005446 <_dtoa_r+0x3d6>
 800555e:	2502      	movs	r5, #2
 8005560:	e775      	b.n	800544e <_dtoa_r+0x3de>
 8005562:	9e04      	ldr	r6, [sp, #16]
 8005564:	465f      	mov	r7, fp
 8005566:	e792      	b.n	800548e <_dtoa_r+0x41e>
 8005568:	9900      	ldr	r1, [sp, #0]
 800556a:	4b50      	ldr	r3, [pc, #320]	; (80056ac <_dtoa_r+0x63c>)
 800556c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005570:	4431      	add	r1, r6
 8005572:	9102      	str	r1, [sp, #8]
 8005574:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005576:	eeb0 9a47 	vmov.f32	s18, s14
 800557a:	eef0 9a67 	vmov.f32	s19, s15
 800557e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005582:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005586:	2900      	cmp	r1, #0
 8005588:	d044      	beq.n	8005614 <_dtoa_r+0x5a4>
 800558a:	494e      	ldr	r1, [pc, #312]	; (80056c4 <_dtoa_r+0x654>)
 800558c:	2000      	movs	r0, #0
 800558e:	f7fb f97d 	bl	800088c <__aeabi_ddiv>
 8005592:	ec53 2b19 	vmov	r2, r3, d9
 8005596:	f7fa fe97 	bl	80002c8 <__aeabi_dsub>
 800559a:	9d00      	ldr	r5, [sp, #0]
 800559c:	ec41 0b19 	vmov	d9, r0, r1
 80055a0:	4649      	mov	r1, r9
 80055a2:	4640      	mov	r0, r8
 80055a4:	f7fb faf8 	bl	8000b98 <__aeabi_d2iz>
 80055a8:	4606      	mov	r6, r0
 80055aa:	f7fa ffdb 	bl	8000564 <__aeabi_i2d>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	4640      	mov	r0, r8
 80055b4:	4649      	mov	r1, r9
 80055b6:	f7fa fe87 	bl	80002c8 <__aeabi_dsub>
 80055ba:	3630      	adds	r6, #48	; 0x30
 80055bc:	f805 6b01 	strb.w	r6, [r5], #1
 80055c0:	ec53 2b19 	vmov	r2, r3, d9
 80055c4:	4680      	mov	r8, r0
 80055c6:	4689      	mov	r9, r1
 80055c8:	f7fb faa8 	bl	8000b1c <__aeabi_dcmplt>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d164      	bne.n	800569a <_dtoa_r+0x62a>
 80055d0:	4642      	mov	r2, r8
 80055d2:	464b      	mov	r3, r9
 80055d4:	4937      	ldr	r1, [pc, #220]	; (80056b4 <_dtoa_r+0x644>)
 80055d6:	2000      	movs	r0, #0
 80055d8:	f7fa fe76 	bl	80002c8 <__aeabi_dsub>
 80055dc:	ec53 2b19 	vmov	r2, r3, d9
 80055e0:	f7fb fa9c 	bl	8000b1c <__aeabi_dcmplt>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	f040 80b6 	bne.w	8005756 <_dtoa_r+0x6e6>
 80055ea:	9b02      	ldr	r3, [sp, #8]
 80055ec:	429d      	cmp	r5, r3
 80055ee:	f43f af7c 	beq.w	80054ea <_dtoa_r+0x47a>
 80055f2:	4b31      	ldr	r3, [pc, #196]	; (80056b8 <_dtoa_r+0x648>)
 80055f4:	ec51 0b19 	vmov	r0, r1, d9
 80055f8:	2200      	movs	r2, #0
 80055fa:	f7fb f81d 	bl	8000638 <__aeabi_dmul>
 80055fe:	4b2e      	ldr	r3, [pc, #184]	; (80056b8 <_dtoa_r+0x648>)
 8005600:	ec41 0b19 	vmov	d9, r0, r1
 8005604:	2200      	movs	r2, #0
 8005606:	4640      	mov	r0, r8
 8005608:	4649      	mov	r1, r9
 800560a:	f7fb f815 	bl	8000638 <__aeabi_dmul>
 800560e:	4680      	mov	r8, r0
 8005610:	4689      	mov	r9, r1
 8005612:	e7c5      	b.n	80055a0 <_dtoa_r+0x530>
 8005614:	ec51 0b17 	vmov	r0, r1, d7
 8005618:	f7fb f80e 	bl	8000638 <__aeabi_dmul>
 800561c:	9b02      	ldr	r3, [sp, #8]
 800561e:	9d00      	ldr	r5, [sp, #0]
 8005620:	930f      	str	r3, [sp, #60]	; 0x3c
 8005622:	ec41 0b19 	vmov	d9, r0, r1
 8005626:	4649      	mov	r1, r9
 8005628:	4640      	mov	r0, r8
 800562a:	f7fb fab5 	bl	8000b98 <__aeabi_d2iz>
 800562e:	4606      	mov	r6, r0
 8005630:	f7fa ff98 	bl	8000564 <__aeabi_i2d>
 8005634:	3630      	adds	r6, #48	; 0x30
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4640      	mov	r0, r8
 800563c:	4649      	mov	r1, r9
 800563e:	f7fa fe43 	bl	80002c8 <__aeabi_dsub>
 8005642:	f805 6b01 	strb.w	r6, [r5], #1
 8005646:	9b02      	ldr	r3, [sp, #8]
 8005648:	429d      	cmp	r5, r3
 800564a:	4680      	mov	r8, r0
 800564c:	4689      	mov	r9, r1
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	d124      	bne.n	800569e <_dtoa_r+0x62e>
 8005654:	4b1b      	ldr	r3, [pc, #108]	; (80056c4 <_dtoa_r+0x654>)
 8005656:	ec51 0b19 	vmov	r0, r1, d9
 800565a:	f7fa fe37 	bl	80002cc <__adddf3>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	4640      	mov	r0, r8
 8005664:	4649      	mov	r1, r9
 8005666:	f7fb fa77 	bl	8000b58 <__aeabi_dcmpgt>
 800566a:	2800      	cmp	r0, #0
 800566c:	d173      	bne.n	8005756 <_dtoa_r+0x6e6>
 800566e:	ec53 2b19 	vmov	r2, r3, d9
 8005672:	4914      	ldr	r1, [pc, #80]	; (80056c4 <_dtoa_r+0x654>)
 8005674:	2000      	movs	r0, #0
 8005676:	f7fa fe27 	bl	80002c8 <__aeabi_dsub>
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	4640      	mov	r0, r8
 8005680:	4649      	mov	r1, r9
 8005682:	f7fb fa4b 	bl	8000b1c <__aeabi_dcmplt>
 8005686:	2800      	cmp	r0, #0
 8005688:	f43f af2f 	beq.w	80054ea <_dtoa_r+0x47a>
 800568c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800568e:	1e6b      	subs	r3, r5, #1
 8005690:	930f      	str	r3, [sp, #60]	; 0x3c
 8005692:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005696:	2b30      	cmp	r3, #48	; 0x30
 8005698:	d0f8      	beq.n	800568c <_dtoa_r+0x61c>
 800569a:	46bb      	mov	fp, r7
 800569c:	e04a      	b.n	8005734 <_dtoa_r+0x6c4>
 800569e:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <_dtoa_r+0x648>)
 80056a0:	f7fa ffca 	bl	8000638 <__aeabi_dmul>
 80056a4:	4680      	mov	r8, r0
 80056a6:	4689      	mov	r9, r1
 80056a8:	e7bd      	b.n	8005626 <_dtoa_r+0x5b6>
 80056aa:	bf00      	nop
 80056ac:	08006e90 	.word	0x08006e90
 80056b0:	08006e68 	.word	0x08006e68
 80056b4:	3ff00000 	.word	0x3ff00000
 80056b8:	40240000 	.word	0x40240000
 80056bc:	401c0000 	.word	0x401c0000
 80056c0:	40140000 	.word	0x40140000
 80056c4:	3fe00000 	.word	0x3fe00000
 80056c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80056cc:	9d00      	ldr	r5, [sp, #0]
 80056ce:	4642      	mov	r2, r8
 80056d0:	464b      	mov	r3, r9
 80056d2:	4630      	mov	r0, r6
 80056d4:	4639      	mov	r1, r7
 80056d6:	f7fb f8d9 	bl	800088c <__aeabi_ddiv>
 80056da:	f7fb fa5d 	bl	8000b98 <__aeabi_d2iz>
 80056de:	9001      	str	r0, [sp, #4]
 80056e0:	f7fa ff40 	bl	8000564 <__aeabi_i2d>
 80056e4:	4642      	mov	r2, r8
 80056e6:	464b      	mov	r3, r9
 80056e8:	f7fa ffa6 	bl	8000638 <__aeabi_dmul>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4630      	mov	r0, r6
 80056f2:	4639      	mov	r1, r7
 80056f4:	f7fa fde8 	bl	80002c8 <__aeabi_dsub>
 80056f8:	9e01      	ldr	r6, [sp, #4]
 80056fa:	9f04      	ldr	r7, [sp, #16]
 80056fc:	3630      	adds	r6, #48	; 0x30
 80056fe:	f805 6b01 	strb.w	r6, [r5], #1
 8005702:	9e00      	ldr	r6, [sp, #0]
 8005704:	1bae      	subs	r6, r5, r6
 8005706:	42b7      	cmp	r7, r6
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	d134      	bne.n	8005778 <_dtoa_r+0x708>
 800570e:	f7fa fddd 	bl	80002cc <__adddf3>
 8005712:	4642      	mov	r2, r8
 8005714:	464b      	mov	r3, r9
 8005716:	4606      	mov	r6, r0
 8005718:	460f      	mov	r7, r1
 800571a:	f7fb fa1d 	bl	8000b58 <__aeabi_dcmpgt>
 800571e:	b9c8      	cbnz	r0, 8005754 <_dtoa_r+0x6e4>
 8005720:	4642      	mov	r2, r8
 8005722:	464b      	mov	r3, r9
 8005724:	4630      	mov	r0, r6
 8005726:	4639      	mov	r1, r7
 8005728:	f7fb f9ee 	bl	8000b08 <__aeabi_dcmpeq>
 800572c:	b110      	cbz	r0, 8005734 <_dtoa_r+0x6c4>
 800572e:	9b01      	ldr	r3, [sp, #4]
 8005730:	07db      	lsls	r3, r3, #31
 8005732:	d40f      	bmi.n	8005754 <_dtoa_r+0x6e4>
 8005734:	4651      	mov	r1, sl
 8005736:	4620      	mov	r0, r4
 8005738:	f000 fbcc 	bl	8005ed4 <_Bfree>
 800573c:	2300      	movs	r3, #0
 800573e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005740:	702b      	strb	r3, [r5, #0]
 8005742:	f10b 0301 	add.w	r3, fp, #1
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800574a:	2b00      	cmp	r3, #0
 800574c:	f43f ace2 	beq.w	8005114 <_dtoa_r+0xa4>
 8005750:	601d      	str	r5, [r3, #0]
 8005752:	e4df      	b.n	8005114 <_dtoa_r+0xa4>
 8005754:	465f      	mov	r7, fp
 8005756:	462b      	mov	r3, r5
 8005758:	461d      	mov	r5, r3
 800575a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800575e:	2a39      	cmp	r2, #57	; 0x39
 8005760:	d106      	bne.n	8005770 <_dtoa_r+0x700>
 8005762:	9a00      	ldr	r2, [sp, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d1f7      	bne.n	8005758 <_dtoa_r+0x6e8>
 8005768:	9900      	ldr	r1, [sp, #0]
 800576a:	2230      	movs	r2, #48	; 0x30
 800576c:	3701      	adds	r7, #1
 800576e:	700a      	strb	r2, [r1, #0]
 8005770:	781a      	ldrb	r2, [r3, #0]
 8005772:	3201      	adds	r2, #1
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	e790      	b.n	800569a <_dtoa_r+0x62a>
 8005778:	4ba3      	ldr	r3, [pc, #652]	; (8005a08 <_dtoa_r+0x998>)
 800577a:	2200      	movs	r2, #0
 800577c:	f7fa ff5c 	bl	8000638 <__aeabi_dmul>
 8005780:	2200      	movs	r2, #0
 8005782:	2300      	movs	r3, #0
 8005784:	4606      	mov	r6, r0
 8005786:	460f      	mov	r7, r1
 8005788:	f7fb f9be 	bl	8000b08 <__aeabi_dcmpeq>
 800578c:	2800      	cmp	r0, #0
 800578e:	d09e      	beq.n	80056ce <_dtoa_r+0x65e>
 8005790:	e7d0      	b.n	8005734 <_dtoa_r+0x6c4>
 8005792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005794:	2a00      	cmp	r2, #0
 8005796:	f000 80ca 	beq.w	800592e <_dtoa_r+0x8be>
 800579a:	9a07      	ldr	r2, [sp, #28]
 800579c:	2a01      	cmp	r2, #1
 800579e:	f300 80ad 	bgt.w	80058fc <_dtoa_r+0x88c>
 80057a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057a4:	2a00      	cmp	r2, #0
 80057a6:	f000 80a5 	beq.w	80058f4 <_dtoa_r+0x884>
 80057aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80057ae:	9e08      	ldr	r6, [sp, #32]
 80057b0:	9d05      	ldr	r5, [sp, #20]
 80057b2:	9a05      	ldr	r2, [sp, #20]
 80057b4:	441a      	add	r2, r3
 80057b6:	9205      	str	r2, [sp, #20]
 80057b8:	9a06      	ldr	r2, [sp, #24]
 80057ba:	2101      	movs	r1, #1
 80057bc:	441a      	add	r2, r3
 80057be:	4620      	mov	r0, r4
 80057c0:	9206      	str	r2, [sp, #24]
 80057c2:	f000 fc3d 	bl	8006040 <__i2b>
 80057c6:	4607      	mov	r7, r0
 80057c8:	b165      	cbz	r5, 80057e4 <_dtoa_r+0x774>
 80057ca:	9b06      	ldr	r3, [sp, #24]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	dd09      	ble.n	80057e4 <_dtoa_r+0x774>
 80057d0:	42ab      	cmp	r3, r5
 80057d2:	9a05      	ldr	r2, [sp, #20]
 80057d4:	bfa8      	it	ge
 80057d6:	462b      	movge	r3, r5
 80057d8:	1ad2      	subs	r2, r2, r3
 80057da:	9205      	str	r2, [sp, #20]
 80057dc:	9a06      	ldr	r2, [sp, #24]
 80057de:	1aed      	subs	r5, r5, r3
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	9306      	str	r3, [sp, #24]
 80057e4:	9b08      	ldr	r3, [sp, #32]
 80057e6:	b1f3      	cbz	r3, 8005826 <_dtoa_r+0x7b6>
 80057e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 80a3 	beq.w	8005936 <_dtoa_r+0x8c6>
 80057f0:	2e00      	cmp	r6, #0
 80057f2:	dd10      	ble.n	8005816 <_dtoa_r+0x7a6>
 80057f4:	4639      	mov	r1, r7
 80057f6:	4632      	mov	r2, r6
 80057f8:	4620      	mov	r0, r4
 80057fa:	f000 fce1 	bl	80061c0 <__pow5mult>
 80057fe:	4652      	mov	r2, sl
 8005800:	4601      	mov	r1, r0
 8005802:	4607      	mov	r7, r0
 8005804:	4620      	mov	r0, r4
 8005806:	f000 fc31 	bl	800606c <__multiply>
 800580a:	4651      	mov	r1, sl
 800580c:	4680      	mov	r8, r0
 800580e:	4620      	mov	r0, r4
 8005810:	f000 fb60 	bl	8005ed4 <_Bfree>
 8005814:	46c2      	mov	sl, r8
 8005816:	9b08      	ldr	r3, [sp, #32]
 8005818:	1b9a      	subs	r2, r3, r6
 800581a:	d004      	beq.n	8005826 <_dtoa_r+0x7b6>
 800581c:	4651      	mov	r1, sl
 800581e:	4620      	mov	r0, r4
 8005820:	f000 fcce 	bl	80061c0 <__pow5mult>
 8005824:	4682      	mov	sl, r0
 8005826:	2101      	movs	r1, #1
 8005828:	4620      	mov	r0, r4
 800582a:	f000 fc09 	bl	8006040 <__i2b>
 800582e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005830:	2b00      	cmp	r3, #0
 8005832:	4606      	mov	r6, r0
 8005834:	f340 8081 	ble.w	800593a <_dtoa_r+0x8ca>
 8005838:	461a      	mov	r2, r3
 800583a:	4601      	mov	r1, r0
 800583c:	4620      	mov	r0, r4
 800583e:	f000 fcbf 	bl	80061c0 <__pow5mult>
 8005842:	9b07      	ldr	r3, [sp, #28]
 8005844:	2b01      	cmp	r3, #1
 8005846:	4606      	mov	r6, r0
 8005848:	dd7a      	ble.n	8005940 <_dtoa_r+0x8d0>
 800584a:	f04f 0800 	mov.w	r8, #0
 800584e:	6933      	ldr	r3, [r6, #16]
 8005850:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005854:	6918      	ldr	r0, [r3, #16]
 8005856:	f000 fba5 	bl	8005fa4 <__hi0bits>
 800585a:	f1c0 0020 	rsb	r0, r0, #32
 800585e:	9b06      	ldr	r3, [sp, #24]
 8005860:	4418      	add	r0, r3
 8005862:	f010 001f 	ands.w	r0, r0, #31
 8005866:	f000 8094 	beq.w	8005992 <_dtoa_r+0x922>
 800586a:	f1c0 0320 	rsb	r3, r0, #32
 800586e:	2b04      	cmp	r3, #4
 8005870:	f340 8085 	ble.w	800597e <_dtoa_r+0x90e>
 8005874:	9b05      	ldr	r3, [sp, #20]
 8005876:	f1c0 001c 	rsb	r0, r0, #28
 800587a:	4403      	add	r3, r0
 800587c:	9305      	str	r3, [sp, #20]
 800587e:	9b06      	ldr	r3, [sp, #24]
 8005880:	4403      	add	r3, r0
 8005882:	4405      	add	r5, r0
 8005884:	9306      	str	r3, [sp, #24]
 8005886:	9b05      	ldr	r3, [sp, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	dd05      	ble.n	8005898 <_dtoa_r+0x828>
 800588c:	4651      	mov	r1, sl
 800588e:	461a      	mov	r2, r3
 8005890:	4620      	mov	r0, r4
 8005892:	f000 fcef 	bl	8006274 <__lshift>
 8005896:	4682      	mov	sl, r0
 8005898:	9b06      	ldr	r3, [sp, #24]
 800589a:	2b00      	cmp	r3, #0
 800589c:	dd05      	ble.n	80058aa <_dtoa_r+0x83a>
 800589e:	4631      	mov	r1, r6
 80058a0:	461a      	mov	r2, r3
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 fce6 	bl	8006274 <__lshift>
 80058a8:	4606      	mov	r6, r0
 80058aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d072      	beq.n	8005996 <_dtoa_r+0x926>
 80058b0:	4631      	mov	r1, r6
 80058b2:	4650      	mov	r0, sl
 80058b4:	f000 fd4a 	bl	800634c <__mcmp>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	da6c      	bge.n	8005996 <_dtoa_r+0x926>
 80058bc:	2300      	movs	r3, #0
 80058be:	4651      	mov	r1, sl
 80058c0:	220a      	movs	r2, #10
 80058c2:	4620      	mov	r0, r4
 80058c4:	f000 fb28 	bl	8005f18 <__multadd>
 80058c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80058ce:	4682      	mov	sl, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 81b0 	beq.w	8005c36 <_dtoa_r+0xbc6>
 80058d6:	2300      	movs	r3, #0
 80058d8:	4639      	mov	r1, r7
 80058da:	220a      	movs	r2, #10
 80058dc:	4620      	mov	r0, r4
 80058de:	f000 fb1b 	bl	8005f18 <__multadd>
 80058e2:	9b01      	ldr	r3, [sp, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	4607      	mov	r7, r0
 80058e8:	f300 8096 	bgt.w	8005a18 <_dtoa_r+0x9a8>
 80058ec:	9b07      	ldr	r3, [sp, #28]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	dc59      	bgt.n	80059a6 <_dtoa_r+0x936>
 80058f2:	e091      	b.n	8005a18 <_dtoa_r+0x9a8>
 80058f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80058fa:	e758      	b.n	80057ae <_dtoa_r+0x73e>
 80058fc:	9b04      	ldr	r3, [sp, #16]
 80058fe:	1e5e      	subs	r6, r3, #1
 8005900:	9b08      	ldr	r3, [sp, #32]
 8005902:	42b3      	cmp	r3, r6
 8005904:	bfbf      	itttt	lt
 8005906:	9b08      	ldrlt	r3, [sp, #32]
 8005908:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800590a:	9608      	strlt	r6, [sp, #32]
 800590c:	1af3      	sublt	r3, r6, r3
 800590e:	bfb4      	ite	lt
 8005910:	18d2      	addlt	r2, r2, r3
 8005912:	1b9e      	subge	r6, r3, r6
 8005914:	9b04      	ldr	r3, [sp, #16]
 8005916:	bfbc      	itt	lt
 8005918:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800591a:	2600      	movlt	r6, #0
 800591c:	2b00      	cmp	r3, #0
 800591e:	bfb7      	itett	lt
 8005920:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005924:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005928:	1a9d      	sublt	r5, r3, r2
 800592a:	2300      	movlt	r3, #0
 800592c:	e741      	b.n	80057b2 <_dtoa_r+0x742>
 800592e:	9e08      	ldr	r6, [sp, #32]
 8005930:	9d05      	ldr	r5, [sp, #20]
 8005932:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005934:	e748      	b.n	80057c8 <_dtoa_r+0x758>
 8005936:	9a08      	ldr	r2, [sp, #32]
 8005938:	e770      	b.n	800581c <_dtoa_r+0x7ac>
 800593a:	9b07      	ldr	r3, [sp, #28]
 800593c:	2b01      	cmp	r3, #1
 800593e:	dc19      	bgt.n	8005974 <_dtoa_r+0x904>
 8005940:	9b02      	ldr	r3, [sp, #8]
 8005942:	b9bb      	cbnz	r3, 8005974 <_dtoa_r+0x904>
 8005944:	9b03      	ldr	r3, [sp, #12]
 8005946:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800594a:	b99b      	cbnz	r3, 8005974 <_dtoa_r+0x904>
 800594c:	9b03      	ldr	r3, [sp, #12]
 800594e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005952:	0d1b      	lsrs	r3, r3, #20
 8005954:	051b      	lsls	r3, r3, #20
 8005956:	b183      	cbz	r3, 800597a <_dtoa_r+0x90a>
 8005958:	9b05      	ldr	r3, [sp, #20]
 800595a:	3301      	adds	r3, #1
 800595c:	9305      	str	r3, [sp, #20]
 800595e:	9b06      	ldr	r3, [sp, #24]
 8005960:	3301      	adds	r3, #1
 8005962:	9306      	str	r3, [sp, #24]
 8005964:	f04f 0801 	mov.w	r8, #1
 8005968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800596a:	2b00      	cmp	r3, #0
 800596c:	f47f af6f 	bne.w	800584e <_dtoa_r+0x7de>
 8005970:	2001      	movs	r0, #1
 8005972:	e774      	b.n	800585e <_dtoa_r+0x7ee>
 8005974:	f04f 0800 	mov.w	r8, #0
 8005978:	e7f6      	b.n	8005968 <_dtoa_r+0x8f8>
 800597a:	4698      	mov	r8, r3
 800597c:	e7f4      	b.n	8005968 <_dtoa_r+0x8f8>
 800597e:	d082      	beq.n	8005886 <_dtoa_r+0x816>
 8005980:	9a05      	ldr	r2, [sp, #20]
 8005982:	331c      	adds	r3, #28
 8005984:	441a      	add	r2, r3
 8005986:	9205      	str	r2, [sp, #20]
 8005988:	9a06      	ldr	r2, [sp, #24]
 800598a:	441a      	add	r2, r3
 800598c:	441d      	add	r5, r3
 800598e:	9206      	str	r2, [sp, #24]
 8005990:	e779      	b.n	8005886 <_dtoa_r+0x816>
 8005992:	4603      	mov	r3, r0
 8005994:	e7f4      	b.n	8005980 <_dtoa_r+0x910>
 8005996:	9b04      	ldr	r3, [sp, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	dc37      	bgt.n	8005a0c <_dtoa_r+0x99c>
 800599c:	9b07      	ldr	r3, [sp, #28]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	dd34      	ble.n	8005a0c <_dtoa_r+0x99c>
 80059a2:	9b04      	ldr	r3, [sp, #16]
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	9b01      	ldr	r3, [sp, #4]
 80059a8:	b963      	cbnz	r3, 80059c4 <_dtoa_r+0x954>
 80059aa:	4631      	mov	r1, r6
 80059ac:	2205      	movs	r2, #5
 80059ae:	4620      	mov	r0, r4
 80059b0:	f000 fab2 	bl	8005f18 <__multadd>
 80059b4:	4601      	mov	r1, r0
 80059b6:	4606      	mov	r6, r0
 80059b8:	4650      	mov	r0, sl
 80059ba:	f000 fcc7 	bl	800634c <__mcmp>
 80059be:	2800      	cmp	r0, #0
 80059c0:	f73f adbb 	bgt.w	800553a <_dtoa_r+0x4ca>
 80059c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c6:	9d00      	ldr	r5, [sp, #0]
 80059c8:	ea6f 0b03 	mvn.w	fp, r3
 80059cc:	f04f 0800 	mov.w	r8, #0
 80059d0:	4631      	mov	r1, r6
 80059d2:	4620      	mov	r0, r4
 80059d4:	f000 fa7e 	bl	8005ed4 <_Bfree>
 80059d8:	2f00      	cmp	r7, #0
 80059da:	f43f aeab 	beq.w	8005734 <_dtoa_r+0x6c4>
 80059de:	f1b8 0f00 	cmp.w	r8, #0
 80059e2:	d005      	beq.n	80059f0 <_dtoa_r+0x980>
 80059e4:	45b8      	cmp	r8, r7
 80059e6:	d003      	beq.n	80059f0 <_dtoa_r+0x980>
 80059e8:	4641      	mov	r1, r8
 80059ea:	4620      	mov	r0, r4
 80059ec:	f000 fa72 	bl	8005ed4 <_Bfree>
 80059f0:	4639      	mov	r1, r7
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 fa6e 	bl	8005ed4 <_Bfree>
 80059f8:	e69c      	b.n	8005734 <_dtoa_r+0x6c4>
 80059fa:	2600      	movs	r6, #0
 80059fc:	4637      	mov	r7, r6
 80059fe:	e7e1      	b.n	80059c4 <_dtoa_r+0x954>
 8005a00:	46bb      	mov	fp, r7
 8005a02:	4637      	mov	r7, r6
 8005a04:	e599      	b.n	800553a <_dtoa_r+0x4ca>
 8005a06:	bf00      	nop
 8005a08:	40240000 	.word	0x40240000
 8005a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 80c8 	beq.w	8005ba4 <_dtoa_r+0xb34>
 8005a14:	9b04      	ldr	r3, [sp, #16]
 8005a16:	9301      	str	r3, [sp, #4]
 8005a18:	2d00      	cmp	r5, #0
 8005a1a:	dd05      	ble.n	8005a28 <_dtoa_r+0x9b8>
 8005a1c:	4639      	mov	r1, r7
 8005a1e:	462a      	mov	r2, r5
 8005a20:	4620      	mov	r0, r4
 8005a22:	f000 fc27 	bl	8006274 <__lshift>
 8005a26:	4607      	mov	r7, r0
 8005a28:	f1b8 0f00 	cmp.w	r8, #0
 8005a2c:	d05b      	beq.n	8005ae6 <_dtoa_r+0xa76>
 8005a2e:	6879      	ldr	r1, [r7, #4]
 8005a30:	4620      	mov	r0, r4
 8005a32:	f000 fa0f 	bl	8005e54 <_Balloc>
 8005a36:	4605      	mov	r5, r0
 8005a38:	b928      	cbnz	r0, 8005a46 <_dtoa_r+0x9d6>
 8005a3a:	4b83      	ldr	r3, [pc, #524]	; (8005c48 <_dtoa_r+0xbd8>)
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005a42:	f7ff bb2e 	b.w	80050a2 <_dtoa_r+0x32>
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	3202      	adds	r2, #2
 8005a4a:	0092      	lsls	r2, r2, #2
 8005a4c:	f107 010c 	add.w	r1, r7, #12
 8005a50:	300c      	adds	r0, #12
 8005a52:	f001 f897 	bl	8006b84 <memcpy>
 8005a56:	2201      	movs	r2, #1
 8005a58:	4629      	mov	r1, r5
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f000 fc0a 	bl	8006274 <__lshift>
 8005a60:	9b00      	ldr	r3, [sp, #0]
 8005a62:	3301      	adds	r3, #1
 8005a64:	9304      	str	r3, [sp, #16]
 8005a66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	9308      	str	r3, [sp, #32]
 8005a6e:	9b02      	ldr	r3, [sp, #8]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	46b8      	mov	r8, r7
 8005a76:	9306      	str	r3, [sp, #24]
 8005a78:	4607      	mov	r7, r0
 8005a7a:	9b04      	ldr	r3, [sp, #16]
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	4650      	mov	r0, sl
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	f7ff fa6b 	bl	8004f5e <quorem>
 8005a88:	4641      	mov	r1, r8
 8005a8a:	9002      	str	r0, [sp, #8]
 8005a8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005a90:	4650      	mov	r0, sl
 8005a92:	f000 fc5b 	bl	800634c <__mcmp>
 8005a96:	463a      	mov	r2, r7
 8005a98:	9005      	str	r0, [sp, #20]
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f000 fc71 	bl	8006384 <__mdiff>
 8005aa2:	68c2      	ldr	r2, [r0, #12]
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	bb02      	cbnz	r2, 8005aea <_dtoa_r+0xa7a>
 8005aa8:	4601      	mov	r1, r0
 8005aaa:	4650      	mov	r0, sl
 8005aac:	f000 fc4e 	bl	800634c <__mcmp>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ab8:	f000 fa0c 	bl	8005ed4 <_Bfree>
 8005abc:	9b07      	ldr	r3, [sp, #28]
 8005abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ac0:	9d04      	ldr	r5, [sp, #16]
 8005ac2:	ea43 0102 	orr.w	r1, r3, r2
 8005ac6:	9b06      	ldr	r3, [sp, #24]
 8005ac8:	4319      	orrs	r1, r3
 8005aca:	d110      	bne.n	8005aee <_dtoa_r+0xa7e>
 8005acc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ad0:	d029      	beq.n	8005b26 <_dtoa_r+0xab6>
 8005ad2:	9b05      	ldr	r3, [sp, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dd02      	ble.n	8005ade <_dtoa_r+0xa6e>
 8005ad8:	9b02      	ldr	r3, [sp, #8]
 8005ada:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005ade:	9b01      	ldr	r3, [sp, #4]
 8005ae0:	f883 9000 	strb.w	r9, [r3]
 8005ae4:	e774      	b.n	80059d0 <_dtoa_r+0x960>
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	e7ba      	b.n	8005a60 <_dtoa_r+0x9f0>
 8005aea:	2201      	movs	r2, #1
 8005aec:	e7e1      	b.n	8005ab2 <_dtoa_r+0xa42>
 8005aee:	9b05      	ldr	r3, [sp, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	db04      	blt.n	8005afe <_dtoa_r+0xa8e>
 8005af4:	9907      	ldr	r1, [sp, #28]
 8005af6:	430b      	orrs	r3, r1
 8005af8:	9906      	ldr	r1, [sp, #24]
 8005afa:	430b      	orrs	r3, r1
 8005afc:	d120      	bne.n	8005b40 <_dtoa_r+0xad0>
 8005afe:	2a00      	cmp	r2, #0
 8005b00:	dded      	ble.n	8005ade <_dtoa_r+0xa6e>
 8005b02:	4651      	mov	r1, sl
 8005b04:	2201      	movs	r2, #1
 8005b06:	4620      	mov	r0, r4
 8005b08:	f000 fbb4 	bl	8006274 <__lshift>
 8005b0c:	4631      	mov	r1, r6
 8005b0e:	4682      	mov	sl, r0
 8005b10:	f000 fc1c 	bl	800634c <__mcmp>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	dc03      	bgt.n	8005b20 <_dtoa_r+0xab0>
 8005b18:	d1e1      	bne.n	8005ade <_dtoa_r+0xa6e>
 8005b1a:	f019 0f01 	tst.w	r9, #1
 8005b1e:	d0de      	beq.n	8005ade <_dtoa_r+0xa6e>
 8005b20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005b24:	d1d8      	bne.n	8005ad8 <_dtoa_r+0xa68>
 8005b26:	9a01      	ldr	r2, [sp, #4]
 8005b28:	2339      	movs	r3, #57	; 0x39
 8005b2a:	7013      	strb	r3, [r2, #0]
 8005b2c:	462b      	mov	r3, r5
 8005b2e:	461d      	mov	r5, r3
 8005b30:	3b01      	subs	r3, #1
 8005b32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005b36:	2a39      	cmp	r2, #57	; 0x39
 8005b38:	d06c      	beq.n	8005c14 <_dtoa_r+0xba4>
 8005b3a:	3201      	adds	r2, #1
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	e747      	b.n	80059d0 <_dtoa_r+0x960>
 8005b40:	2a00      	cmp	r2, #0
 8005b42:	dd07      	ble.n	8005b54 <_dtoa_r+0xae4>
 8005b44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005b48:	d0ed      	beq.n	8005b26 <_dtoa_r+0xab6>
 8005b4a:	9a01      	ldr	r2, [sp, #4]
 8005b4c:	f109 0301 	add.w	r3, r9, #1
 8005b50:	7013      	strb	r3, [r2, #0]
 8005b52:	e73d      	b.n	80059d0 <_dtoa_r+0x960>
 8005b54:	9b04      	ldr	r3, [sp, #16]
 8005b56:	9a08      	ldr	r2, [sp, #32]
 8005b58:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d043      	beq.n	8005be8 <_dtoa_r+0xb78>
 8005b60:	4651      	mov	r1, sl
 8005b62:	2300      	movs	r3, #0
 8005b64:	220a      	movs	r2, #10
 8005b66:	4620      	mov	r0, r4
 8005b68:	f000 f9d6 	bl	8005f18 <__multadd>
 8005b6c:	45b8      	cmp	r8, r7
 8005b6e:	4682      	mov	sl, r0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	f04f 020a 	mov.w	r2, #10
 8005b78:	4641      	mov	r1, r8
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	d107      	bne.n	8005b8e <_dtoa_r+0xb1e>
 8005b7e:	f000 f9cb 	bl	8005f18 <__multadd>
 8005b82:	4680      	mov	r8, r0
 8005b84:	4607      	mov	r7, r0
 8005b86:	9b04      	ldr	r3, [sp, #16]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	9304      	str	r3, [sp, #16]
 8005b8c:	e775      	b.n	8005a7a <_dtoa_r+0xa0a>
 8005b8e:	f000 f9c3 	bl	8005f18 <__multadd>
 8005b92:	4639      	mov	r1, r7
 8005b94:	4680      	mov	r8, r0
 8005b96:	2300      	movs	r3, #0
 8005b98:	220a      	movs	r2, #10
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f000 f9bc 	bl	8005f18 <__multadd>
 8005ba0:	4607      	mov	r7, r0
 8005ba2:	e7f0      	b.n	8005b86 <_dtoa_r+0xb16>
 8005ba4:	9b04      	ldr	r3, [sp, #16]
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	9d00      	ldr	r5, [sp, #0]
 8005baa:	4631      	mov	r1, r6
 8005bac:	4650      	mov	r0, sl
 8005bae:	f7ff f9d6 	bl	8004f5e <quorem>
 8005bb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005bb6:	9b00      	ldr	r3, [sp, #0]
 8005bb8:	f805 9b01 	strb.w	r9, [r5], #1
 8005bbc:	1aea      	subs	r2, r5, r3
 8005bbe:	9b01      	ldr	r3, [sp, #4]
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	dd07      	ble.n	8005bd4 <_dtoa_r+0xb64>
 8005bc4:	4651      	mov	r1, sl
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	220a      	movs	r2, #10
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f000 f9a4 	bl	8005f18 <__multadd>
 8005bd0:	4682      	mov	sl, r0
 8005bd2:	e7ea      	b.n	8005baa <_dtoa_r+0xb3a>
 8005bd4:	9b01      	ldr	r3, [sp, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	bfc8      	it	gt
 8005bda:	461d      	movgt	r5, r3
 8005bdc:	9b00      	ldr	r3, [sp, #0]
 8005bde:	bfd8      	it	le
 8005be0:	2501      	movle	r5, #1
 8005be2:	441d      	add	r5, r3
 8005be4:	f04f 0800 	mov.w	r8, #0
 8005be8:	4651      	mov	r1, sl
 8005bea:	2201      	movs	r2, #1
 8005bec:	4620      	mov	r0, r4
 8005bee:	f000 fb41 	bl	8006274 <__lshift>
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4682      	mov	sl, r0
 8005bf6:	f000 fba9 	bl	800634c <__mcmp>
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	dc96      	bgt.n	8005b2c <_dtoa_r+0xabc>
 8005bfe:	d102      	bne.n	8005c06 <_dtoa_r+0xb96>
 8005c00:	f019 0f01 	tst.w	r9, #1
 8005c04:	d192      	bne.n	8005b2c <_dtoa_r+0xabc>
 8005c06:	462b      	mov	r3, r5
 8005c08:	461d      	mov	r5, r3
 8005c0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c0e:	2a30      	cmp	r2, #48	; 0x30
 8005c10:	d0fa      	beq.n	8005c08 <_dtoa_r+0xb98>
 8005c12:	e6dd      	b.n	80059d0 <_dtoa_r+0x960>
 8005c14:	9a00      	ldr	r2, [sp, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d189      	bne.n	8005b2e <_dtoa_r+0xabe>
 8005c1a:	f10b 0b01 	add.w	fp, fp, #1
 8005c1e:	2331      	movs	r3, #49	; 0x31
 8005c20:	e796      	b.n	8005b50 <_dtoa_r+0xae0>
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <_dtoa_r+0xbdc>)
 8005c24:	f7ff ba99 	b.w	800515a <_dtoa_r+0xea>
 8005c28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f47f aa6d 	bne.w	800510a <_dtoa_r+0x9a>
 8005c30:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <_dtoa_r+0xbe0>)
 8005c32:	f7ff ba92 	b.w	800515a <_dtoa_r+0xea>
 8005c36:	9b01      	ldr	r3, [sp, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	dcb5      	bgt.n	8005ba8 <_dtoa_r+0xb38>
 8005c3c:	9b07      	ldr	r3, [sp, #28]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	f73f aeb1 	bgt.w	80059a6 <_dtoa_r+0x936>
 8005c44:	e7b0      	b.n	8005ba8 <_dtoa_r+0xb38>
 8005c46:	bf00      	nop
 8005c48:	08006dfc 	.word	0x08006dfc
 8005c4c:	08006d5c 	.word	0x08006d5c
 8005c50:	08006d80 	.word	0x08006d80

08005c54 <_free_r>:
 8005c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c56:	2900      	cmp	r1, #0
 8005c58:	d044      	beq.n	8005ce4 <_free_r+0x90>
 8005c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c5e:	9001      	str	r0, [sp, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f1a1 0404 	sub.w	r4, r1, #4
 8005c66:	bfb8      	it	lt
 8005c68:	18e4      	addlt	r4, r4, r3
 8005c6a:	f000 f8e7 	bl	8005e3c <__malloc_lock>
 8005c6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ce8 <_free_r+0x94>)
 8005c70:	9801      	ldr	r0, [sp, #4]
 8005c72:	6813      	ldr	r3, [r2, #0]
 8005c74:	b933      	cbnz	r3, 8005c84 <_free_r+0x30>
 8005c76:	6063      	str	r3, [r4, #4]
 8005c78:	6014      	str	r4, [r2, #0]
 8005c7a:	b003      	add	sp, #12
 8005c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c80:	f000 b8e2 	b.w	8005e48 <__malloc_unlock>
 8005c84:	42a3      	cmp	r3, r4
 8005c86:	d908      	bls.n	8005c9a <_free_r+0x46>
 8005c88:	6825      	ldr	r5, [r4, #0]
 8005c8a:	1961      	adds	r1, r4, r5
 8005c8c:	428b      	cmp	r3, r1
 8005c8e:	bf01      	itttt	eq
 8005c90:	6819      	ldreq	r1, [r3, #0]
 8005c92:	685b      	ldreq	r3, [r3, #4]
 8005c94:	1949      	addeq	r1, r1, r5
 8005c96:	6021      	streq	r1, [r4, #0]
 8005c98:	e7ed      	b.n	8005c76 <_free_r+0x22>
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	b10b      	cbz	r3, 8005ca4 <_free_r+0x50>
 8005ca0:	42a3      	cmp	r3, r4
 8005ca2:	d9fa      	bls.n	8005c9a <_free_r+0x46>
 8005ca4:	6811      	ldr	r1, [r2, #0]
 8005ca6:	1855      	adds	r5, r2, r1
 8005ca8:	42a5      	cmp	r5, r4
 8005caa:	d10b      	bne.n	8005cc4 <_free_r+0x70>
 8005cac:	6824      	ldr	r4, [r4, #0]
 8005cae:	4421      	add	r1, r4
 8005cb0:	1854      	adds	r4, r2, r1
 8005cb2:	42a3      	cmp	r3, r4
 8005cb4:	6011      	str	r1, [r2, #0]
 8005cb6:	d1e0      	bne.n	8005c7a <_free_r+0x26>
 8005cb8:	681c      	ldr	r4, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	6053      	str	r3, [r2, #4]
 8005cbe:	440c      	add	r4, r1
 8005cc0:	6014      	str	r4, [r2, #0]
 8005cc2:	e7da      	b.n	8005c7a <_free_r+0x26>
 8005cc4:	d902      	bls.n	8005ccc <_free_r+0x78>
 8005cc6:	230c      	movs	r3, #12
 8005cc8:	6003      	str	r3, [r0, #0]
 8005cca:	e7d6      	b.n	8005c7a <_free_r+0x26>
 8005ccc:	6825      	ldr	r5, [r4, #0]
 8005cce:	1961      	adds	r1, r4, r5
 8005cd0:	428b      	cmp	r3, r1
 8005cd2:	bf04      	itt	eq
 8005cd4:	6819      	ldreq	r1, [r3, #0]
 8005cd6:	685b      	ldreq	r3, [r3, #4]
 8005cd8:	6063      	str	r3, [r4, #4]
 8005cda:	bf04      	itt	eq
 8005cdc:	1949      	addeq	r1, r1, r5
 8005cde:	6021      	streq	r1, [r4, #0]
 8005ce0:	6054      	str	r4, [r2, #4]
 8005ce2:	e7ca      	b.n	8005c7a <_free_r+0x26>
 8005ce4:	b003      	add	sp, #12
 8005ce6:	bd30      	pop	{r4, r5, pc}
 8005ce8:	20000410 	.word	0x20000410

08005cec <malloc>:
 8005cec:	4b02      	ldr	r3, [pc, #8]	; (8005cf8 <malloc+0xc>)
 8005cee:	4601      	mov	r1, r0
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	f000 b823 	b.w	8005d3c <_malloc_r>
 8005cf6:	bf00      	nop
 8005cf8:	20000064 	.word	0x20000064

08005cfc <sbrk_aligned>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	4e0e      	ldr	r6, [pc, #56]	; (8005d38 <sbrk_aligned+0x3c>)
 8005d00:	460c      	mov	r4, r1
 8005d02:	6831      	ldr	r1, [r6, #0]
 8005d04:	4605      	mov	r5, r0
 8005d06:	b911      	cbnz	r1, 8005d0e <sbrk_aligned+0x12>
 8005d08:	f000 ff2c 	bl	8006b64 <_sbrk_r>
 8005d0c:	6030      	str	r0, [r6, #0]
 8005d0e:	4621      	mov	r1, r4
 8005d10:	4628      	mov	r0, r5
 8005d12:	f000 ff27 	bl	8006b64 <_sbrk_r>
 8005d16:	1c43      	adds	r3, r0, #1
 8005d18:	d00a      	beq.n	8005d30 <sbrk_aligned+0x34>
 8005d1a:	1cc4      	adds	r4, r0, #3
 8005d1c:	f024 0403 	bic.w	r4, r4, #3
 8005d20:	42a0      	cmp	r0, r4
 8005d22:	d007      	beq.n	8005d34 <sbrk_aligned+0x38>
 8005d24:	1a21      	subs	r1, r4, r0
 8005d26:	4628      	mov	r0, r5
 8005d28:	f000 ff1c 	bl	8006b64 <_sbrk_r>
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d101      	bne.n	8005d34 <sbrk_aligned+0x38>
 8005d30:	f04f 34ff 	mov.w	r4, #4294967295
 8005d34:	4620      	mov	r0, r4
 8005d36:	bd70      	pop	{r4, r5, r6, pc}
 8005d38:	20000414 	.word	0x20000414

08005d3c <_malloc_r>:
 8005d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d40:	1ccd      	adds	r5, r1, #3
 8005d42:	f025 0503 	bic.w	r5, r5, #3
 8005d46:	3508      	adds	r5, #8
 8005d48:	2d0c      	cmp	r5, #12
 8005d4a:	bf38      	it	cc
 8005d4c:	250c      	movcc	r5, #12
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	4607      	mov	r7, r0
 8005d52:	db01      	blt.n	8005d58 <_malloc_r+0x1c>
 8005d54:	42a9      	cmp	r1, r5
 8005d56:	d905      	bls.n	8005d64 <_malloc_r+0x28>
 8005d58:	230c      	movs	r3, #12
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	2600      	movs	r6, #0
 8005d5e:	4630      	mov	r0, r6
 8005d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e38 <_malloc_r+0xfc>
 8005d68:	f000 f868 	bl	8005e3c <__malloc_lock>
 8005d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d70:	461c      	mov	r4, r3
 8005d72:	bb5c      	cbnz	r4, 8005dcc <_malloc_r+0x90>
 8005d74:	4629      	mov	r1, r5
 8005d76:	4638      	mov	r0, r7
 8005d78:	f7ff ffc0 	bl	8005cfc <sbrk_aligned>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	4604      	mov	r4, r0
 8005d80:	d155      	bne.n	8005e2e <_malloc_r+0xf2>
 8005d82:	f8d8 4000 	ldr.w	r4, [r8]
 8005d86:	4626      	mov	r6, r4
 8005d88:	2e00      	cmp	r6, #0
 8005d8a:	d145      	bne.n	8005e18 <_malloc_r+0xdc>
 8005d8c:	2c00      	cmp	r4, #0
 8005d8e:	d048      	beq.n	8005e22 <_malloc_r+0xe6>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	4631      	mov	r1, r6
 8005d94:	4638      	mov	r0, r7
 8005d96:	eb04 0903 	add.w	r9, r4, r3
 8005d9a:	f000 fee3 	bl	8006b64 <_sbrk_r>
 8005d9e:	4581      	cmp	r9, r0
 8005da0:	d13f      	bne.n	8005e22 <_malloc_r+0xe6>
 8005da2:	6821      	ldr	r1, [r4, #0]
 8005da4:	1a6d      	subs	r5, r5, r1
 8005da6:	4629      	mov	r1, r5
 8005da8:	4638      	mov	r0, r7
 8005daa:	f7ff ffa7 	bl	8005cfc <sbrk_aligned>
 8005dae:	3001      	adds	r0, #1
 8005db0:	d037      	beq.n	8005e22 <_malloc_r+0xe6>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	442b      	add	r3, r5
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	f8d8 3000 	ldr.w	r3, [r8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d038      	beq.n	8005e32 <_malloc_r+0xf6>
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	42a2      	cmp	r2, r4
 8005dc4:	d12b      	bne.n	8005e1e <_malloc_r+0xe2>
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	605a      	str	r2, [r3, #4]
 8005dca:	e00f      	b.n	8005dec <_malloc_r+0xb0>
 8005dcc:	6822      	ldr	r2, [r4, #0]
 8005dce:	1b52      	subs	r2, r2, r5
 8005dd0:	d41f      	bmi.n	8005e12 <_malloc_r+0xd6>
 8005dd2:	2a0b      	cmp	r2, #11
 8005dd4:	d917      	bls.n	8005e06 <_malloc_r+0xca>
 8005dd6:	1961      	adds	r1, r4, r5
 8005dd8:	42a3      	cmp	r3, r4
 8005dda:	6025      	str	r5, [r4, #0]
 8005ddc:	bf18      	it	ne
 8005dde:	6059      	strne	r1, [r3, #4]
 8005de0:	6863      	ldr	r3, [r4, #4]
 8005de2:	bf08      	it	eq
 8005de4:	f8c8 1000 	streq.w	r1, [r8]
 8005de8:	5162      	str	r2, [r4, r5]
 8005dea:	604b      	str	r3, [r1, #4]
 8005dec:	4638      	mov	r0, r7
 8005dee:	f104 060b 	add.w	r6, r4, #11
 8005df2:	f000 f829 	bl	8005e48 <__malloc_unlock>
 8005df6:	f026 0607 	bic.w	r6, r6, #7
 8005dfa:	1d23      	adds	r3, r4, #4
 8005dfc:	1af2      	subs	r2, r6, r3
 8005dfe:	d0ae      	beq.n	8005d5e <_malloc_r+0x22>
 8005e00:	1b9b      	subs	r3, r3, r6
 8005e02:	50a3      	str	r3, [r4, r2]
 8005e04:	e7ab      	b.n	8005d5e <_malloc_r+0x22>
 8005e06:	42a3      	cmp	r3, r4
 8005e08:	6862      	ldr	r2, [r4, #4]
 8005e0a:	d1dd      	bne.n	8005dc8 <_malloc_r+0x8c>
 8005e0c:	f8c8 2000 	str.w	r2, [r8]
 8005e10:	e7ec      	b.n	8005dec <_malloc_r+0xb0>
 8005e12:	4623      	mov	r3, r4
 8005e14:	6864      	ldr	r4, [r4, #4]
 8005e16:	e7ac      	b.n	8005d72 <_malloc_r+0x36>
 8005e18:	4634      	mov	r4, r6
 8005e1a:	6876      	ldr	r6, [r6, #4]
 8005e1c:	e7b4      	b.n	8005d88 <_malloc_r+0x4c>
 8005e1e:	4613      	mov	r3, r2
 8005e20:	e7cc      	b.n	8005dbc <_malloc_r+0x80>
 8005e22:	230c      	movs	r3, #12
 8005e24:	603b      	str	r3, [r7, #0]
 8005e26:	4638      	mov	r0, r7
 8005e28:	f000 f80e 	bl	8005e48 <__malloc_unlock>
 8005e2c:	e797      	b.n	8005d5e <_malloc_r+0x22>
 8005e2e:	6025      	str	r5, [r4, #0]
 8005e30:	e7dc      	b.n	8005dec <_malloc_r+0xb0>
 8005e32:	605b      	str	r3, [r3, #4]
 8005e34:	deff      	udf	#255	; 0xff
 8005e36:	bf00      	nop
 8005e38:	20000410 	.word	0x20000410

08005e3c <__malloc_lock>:
 8005e3c:	4801      	ldr	r0, [pc, #4]	; (8005e44 <__malloc_lock+0x8>)
 8005e3e:	f7ff b88c 	b.w	8004f5a <__retarget_lock_acquire_recursive>
 8005e42:	bf00      	nop
 8005e44:	2000040c 	.word	0x2000040c

08005e48 <__malloc_unlock>:
 8005e48:	4801      	ldr	r0, [pc, #4]	; (8005e50 <__malloc_unlock+0x8>)
 8005e4a:	f7ff b887 	b.w	8004f5c <__retarget_lock_release_recursive>
 8005e4e:	bf00      	nop
 8005e50:	2000040c 	.word	0x2000040c

08005e54 <_Balloc>:
 8005e54:	b570      	push	{r4, r5, r6, lr}
 8005e56:	69c6      	ldr	r6, [r0, #28]
 8005e58:	4604      	mov	r4, r0
 8005e5a:	460d      	mov	r5, r1
 8005e5c:	b976      	cbnz	r6, 8005e7c <_Balloc+0x28>
 8005e5e:	2010      	movs	r0, #16
 8005e60:	f7ff ff44 	bl	8005cec <malloc>
 8005e64:	4602      	mov	r2, r0
 8005e66:	61e0      	str	r0, [r4, #28]
 8005e68:	b920      	cbnz	r0, 8005e74 <_Balloc+0x20>
 8005e6a:	4b18      	ldr	r3, [pc, #96]	; (8005ecc <_Balloc+0x78>)
 8005e6c:	4818      	ldr	r0, [pc, #96]	; (8005ed0 <_Balloc+0x7c>)
 8005e6e:	216b      	movs	r1, #107	; 0x6b
 8005e70:	f000 fe96 	bl	8006ba0 <__assert_func>
 8005e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e78:	6006      	str	r6, [r0, #0]
 8005e7a:	60c6      	str	r6, [r0, #12]
 8005e7c:	69e6      	ldr	r6, [r4, #28]
 8005e7e:	68f3      	ldr	r3, [r6, #12]
 8005e80:	b183      	cbz	r3, 8005ea4 <_Balloc+0x50>
 8005e82:	69e3      	ldr	r3, [r4, #28]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e8a:	b9b8      	cbnz	r0, 8005ebc <_Balloc+0x68>
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	fa01 f605 	lsl.w	r6, r1, r5
 8005e92:	1d72      	adds	r2, r6, #5
 8005e94:	0092      	lsls	r2, r2, #2
 8005e96:	4620      	mov	r0, r4
 8005e98:	f000 fea0 	bl	8006bdc <_calloc_r>
 8005e9c:	b160      	cbz	r0, 8005eb8 <_Balloc+0x64>
 8005e9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ea2:	e00e      	b.n	8005ec2 <_Balloc+0x6e>
 8005ea4:	2221      	movs	r2, #33	; 0x21
 8005ea6:	2104      	movs	r1, #4
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f000 fe97 	bl	8006bdc <_calloc_r>
 8005eae:	69e3      	ldr	r3, [r4, #28]
 8005eb0:	60f0      	str	r0, [r6, #12]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e4      	bne.n	8005e82 <_Balloc+0x2e>
 8005eb8:	2000      	movs	r0, #0
 8005eba:	bd70      	pop	{r4, r5, r6, pc}
 8005ebc:	6802      	ldr	r2, [r0, #0]
 8005ebe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ec8:	e7f7      	b.n	8005eba <_Balloc+0x66>
 8005eca:	bf00      	nop
 8005ecc:	08006d8d 	.word	0x08006d8d
 8005ed0:	08006e0d 	.word	0x08006e0d

08005ed4 <_Bfree>:
 8005ed4:	b570      	push	{r4, r5, r6, lr}
 8005ed6:	69c6      	ldr	r6, [r0, #28]
 8005ed8:	4605      	mov	r5, r0
 8005eda:	460c      	mov	r4, r1
 8005edc:	b976      	cbnz	r6, 8005efc <_Bfree+0x28>
 8005ede:	2010      	movs	r0, #16
 8005ee0:	f7ff ff04 	bl	8005cec <malloc>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	61e8      	str	r0, [r5, #28]
 8005ee8:	b920      	cbnz	r0, 8005ef4 <_Bfree+0x20>
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <_Bfree+0x3c>)
 8005eec:	4809      	ldr	r0, [pc, #36]	; (8005f14 <_Bfree+0x40>)
 8005eee:	218f      	movs	r1, #143	; 0x8f
 8005ef0:	f000 fe56 	bl	8006ba0 <__assert_func>
 8005ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ef8:	6006      	str	r6, [r0, #0]
 8005efa:	60c6      	str	r6, [r0, #12]
 8005efc:	b13c      	cbz	r4, 8005f0e <_Bfree+0x3a>
 8005efe:	69eb      	ldr	r3, [r5, #28]
 8005f00:	6862      	ldr	r2, [r4, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f08:	6021      	str	r1, [r4, #0]
 8005f0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
 8005f10:	08006d8d 	.word	0x08006d8d
 8005f14:	08006e0d 	.word	0x08006e0d

08005f18 <__multadd>:
 8005f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1c:	690d      	ldr	r5, [r1, #16]
 8005f1e:	4607      	mov	r7, r0
 8005f20:	460c      	mov	r4, r1
 8005f22:	461e      	mov	r6, r3
 8005f24:	f101 0c14 	add.w	ip, r1, #20
 8005f28:	2000      	movs	r0, #0
 8005f2a:	f8dc 3000 	ldr.w	r3, [ip]
 8005f2e:	b299      	uxth	r1, r3
 8005f30:	fb02 6101 	mla	r1, r2, r1, r6
 8005f34:	0c1e      	lsrs	r6, r3, #16
 8005f36:	0c0b      	lsrs	r3, r1, #16
 8005f38:	fb02 3306 	mla	r3, r2, r6, r3
 8005f3c:	b289      	uxth	r1, r1
 8005f3e:	3001      	adds	r0, #1
 8005f40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f44:	4285      	cmp	r5, r0
 8005f46:	f84c 1b04 	str.w	r1, [ip], #4
 8005f4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f4e:	dcec      	bgt.n	8005f2a <__multadd+0x12>
 8005f50:	b30e      	cbz	r6, 8005f96 <__multadd+0x7e>
 8005f52:	68a3      	ldr	r3, [r4, #8]
 8005f54:	42ab      	cmp	r3, r5
 8005f56:	dc19      	bgt.n	8005f8c <__multadd+0x74>
 8005f58:	6861      	ldr	r1, [r4, #4]
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	3101      	adds	r1, #1
 8005f5e:	f7ff ff79 	bl	8005e54 <_Balloc>
 8005f62:	4680      	mov	r8, r0
 8005f64:	b928      	cbnz	r0, 8005f72 <__multadd+0x5a>
 8005f66:	4602      	mov	r2, r0
 8005f68:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <__multadd+0x84>)
 8005f6a:	480d      	ldr	r0, [pc, #52]	; (8005fa0 <__multadd+0x88>)
 8005f6c:	21ba      	movs	r1, #186	; 0xba
 8005f6e:	f000 fe17 	bl	8006ba0 <__assert_func>
 8005f72:	6922      	ldr	r2, [r4, #16]
 8005f74:	3202      	adds	r2, #2
 8005f76:	f104 010c 	add.w	r1, r4, #12
 8005f7a:	0092      	lsls	r2, r2, #2
 8005f7c:	300c      	adds	r0, #12
 8005f7e:	f000 fe01 	bl	8006b84 <memcpy>
 8005f82:	4621      	mov	r1, r4
 8005f84:	4638      	mov	r0, r7
 8005f86:	f7ff ffa5 	bl	8005ed4 <_Bfree>
 8005f8a:	4644      	mov	r4, r8
 8005f8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f90:	3501      	adds	r5, #1
 8005f92:	615e      	str	r6, [r3, #20]
 8005f94:	6125      	str	r5, [r4, #16]
 8005f96:	4620      	mov	r0, r4
 8005f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f9c:	08006dfc 	.word	0x08006dfc
 8005fa0:	08006e0d 	.word	0x08006e0d

08005fa4 <__hi0bits>:
 8005fa4:	0c03      	lsrs	r3, r0, #16
 8005fa6:	041b      	lsls	r3, r3, #16
 8005fa8:	b9d3      	cbnz	r3, 8005fe0 <__hi0bits+0x3c>
 8005faa:	0400      	lsls	r0, r0, #16
 8005fac:	2310      	movs	r3, #16
 8005fae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005fb2:	bf04      	itt	eq
 8005fb4:	0200      	lsleq	r0, r0, #8
 8005fb6:	3308      	addeq	r3, #8
 8005fb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005fbc:	bf04      	itt	eq
 8005fbe:	0100      	lsleq	r0, r0, #4
 8005fc0:	3304      	addeq	r3, #4
 8005fc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005fc6:	bf04      	itt	eq
 8005fc8:	0080      	lsleq	r0, r0, #2
 8005fca:	3302      	addeq	r3, #2
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	db05      	blt.n	8005fdc <__hi0bits+0x38>
 8005fd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005fd4:	f103 0301 	add.w	r3, r3, #1
 8005fd8:	bf08      	it	eq
 8005fda:	2320      	moveq	r3, #32
 8005fdc:	4618      	mov	r0, r3
 8005fde:	4770      	bx	lr
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e7e4      	b.n	8005fae <__hi0bits+0xa>

08005fe4 <__lo0bits>:
 8005fe4:	6803      	ldr	r3, [r0, #0]
 8005fe6:	f013 0207 	ands.w	r2, r3, #7
 8005fea:	d00c      	beq.n	8006006 <__lo0bits+0x22>
 8005fec:	07d9      	lsls	r1, r3, #31
 8005fee:	d422      	bmi.n	8006036 <__lo0bits+0x52>
 8005ff0:	079a      	lsls	r2, r3, #30
 8005ff2:	bf49      	itett	mi
 8005ff4:	085b      	lsrmi	r3, r3, #1
 8005ff6:	089b      	lsrpl	r3, r3, #2
 8005ff8:	6003      	strmi	r3, [r0, #0]
 8005ffa:	2201      	movmi	r2, #1
 8005ffc:	bf5c      	itt	pl
 8005ffe:	6003      	strpl	r3, [r0, #0]
 8006000:	2202      	movpl	r2, #2
 8006002:	4610      	mov	r0, r2
 8006004:	4770      	bx	lr
 8006006:	b299      	uxth	r1, r3
 8006008:	b909      	cbnz	r1, 800600e <__lo0bits+0x2a>
 800600a:	0c1b      	lsrs	r3, r3, #16
 800600c:	2210      	movs	r2, #16
 800600e:	b2d9      	uxtb	r1, r3
 8006010:	b909      	cbnz	r1, 8006016 <__lo0bits+0x32>
 8006012:	3208      	adds	r2, #8
 8006014:	0a1b      	lsrs	r3, r3, #8
 8006016:	0719      	lsls	r1, r3, #28
 8006018:	bf04      	itt	eq
 800601a:	091b      	lsreq	r3, r3, #4
 800601c:	3204      	addeq	r2, #4
 800601e:	0799      	lsls	r1, r3, #30
 8006020:	bf04      	itt	eq
 8006022:	089b      	lsreq	r3, r3, #2
 8006024:	3202      	addeq	r2, #2
 8006026:	07d9      	lsls	r1, r3, #31
 8006028:	d403      	bmi.n	8006032 <__lo0bits+0x4e>
 800602a:	085b      	lsrs	r3, r3, #1
 800602c:	f102 0201 	add.w	r2, r2, #1
 8006030:	d003      	beq.n	800603a <__lo0bits+0x56>
 8006032:	6003      	str	r3, [r0, #0]
 8006034:	e7e5      	b.n	8006002 <__lo0bits+0x1e>
 8006036:	2200      	movs	r2, #0
 8006038:	e7e3      	b.n	8006002 <__lo0bits+0x1e>
 800603a:	2220      	movs	r2, #32
 800603c:	e7e1      	b.n	8006002 <__lo0bits+0x1e>
	...

08006040 <__i2b>:
 8006040:	b510      	push	{r4, lr}
 8006042:	460c      	mov	r4, r1
 8006044:	2101      	movs	r1, #1
 8006046:	f7ff ff05 	bl	8005e54 <_Balloc>
 800604a:	4602      	mov	r2, r0
 800604c:	b928      	cbnz	r0, 800605a <__i2b+0x1a>
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <__i2b+0x24>)
 8006050:	4805      	ldr	r0, [pc, #20]	; (8006068 <__i2b+0x28>)
 8006052:	f240 1145 	movw	r1, #325	; 0x145
 8006056:	f000 fda3 	bl	8006ba0 <__assert_func>
 800605a:	2301      	movs	r3, #1
 800605c:	6144      	str	r4, [r0, #20]
 800605e:	6103      	str	r3, [r0, #16]
 8006060:	bd10      	pop	{r4, pc}
 8006062:	bf00      	nop
 8006064:	08006dfc 	.word	0x08006dfc
 8006068:	08006e0d 	.word	0x08006e0d

0800606c <__multiply>:
 800606c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006070:	4691      	mov	r9, r2
 8006072:	690a      	ldr	r2, [r1, #16]
 8006074:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006078:	429a      	cmp	r2, r3
 800607a:	bfb8      	it	lt
 800607c:	460b      	movlt	r3, r1
 800607e:	460c      	mov	r4, r1
 8006080:	bfbc      	itt	lt
 8006082:	464c      	movlt	r4, r9
 8006084:	4699      	movlt	r9, r3
 8006086:	6927      	ldr	r7, [r4, #16]
 8006088:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800608c:	68a3      	ldr	r3, [r4, #8]
 800608e:	6861      	ldr	r1, [r4, #4]
 8006090:	eb07 060a 	add.w	r6, r7, sl
 8006094:	42b3      	cmp	r3, r6
 8006096:	b085      	sub	sp, #20
 8006098:	bfb8      	it	lt
 800609a:	3101      	addlt	r1, #1
 800609c:	f7ff feda 	bl	8005e54 <_Balloc>
 80060a0:	b930      	cbnz	r0, 80060b0 <__multiply+0x44>
 80060a2:	4602      	mov	r2, r0
 80060a4:	4b44      	ldr	r3, [pc, #272]	; (80061b8 <__multiply+0x14c>)
 80060a6:	4845      	ldr	r0, [pc, #276]	; (80061bc <__multiply+0x150>)
 80060a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80060ac:	f000 fd78 	bl	8006ba0 <__assert_func>
 80060b0:	f100 0514 	add.w	r5, r0, #20
 80060b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80060b8:	462b      	mov	r3, r5
 80060ba:	2200      	movs	r2, #0
 80060bc:	4543      	cmp	r3, r8
 80060be:	d321      	bcc.n	8006104 <__multiply+0x98>
 80060c0:	f104 0314 	add.w	r3, r4, #20
 80060c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80060c8:	f109 0314 	add.w	r3, r9, #20
 80060cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80060d0:	9202      	str	r2, [sp, #8]
 80060d2:	1b3a      	subs	r2, r7, r4
 80060d4:	3a15      	subs	r2, #21
 80060d6:	f022 0203 	bic.w	r2, r2, #3
 80060da:	3204      	adds	r2, #4
 80060dc:	f104 0115 	add.w	r1, r4, #21
 80060e0:	428f      	cmp	r7, r1
 80060e2:	bf38      	it	cc
 80060e4:	2204      	movcc	r2, #4
 80060e6:	9201      	str	r2, [sp, #4]
 80060e8:	9a02      	ldr	r2, [sp, #8]
 80060ea:	9303      	str	r3, [sp, #12]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d80c      	bhi.n	800610a <__multiply+0x9e>
 80060f0:	2e00      	cmp	r6, #0
 80060f2:	dd03      	ble.n	80060fc <__multiply+0x90>
 80060f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d05b      	beq.n	80061b4 <__multiply+0x148>
 80060fc:	6106      	str	r6, [r0, #16]
 80060fe:	b005      	add	sp, #20
 8006100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006104:	f843 2b04 	str.w	r2, [r3], #4
 8006108:	e7d8      	b.n	80060bc <__multiply+0x50>
 800610a:	f8b3 a000 	ldrh.w	sl, [r3]
 800610e:	f1ba 0f00 	cmp.w	sl, #0
 8006112:	d024      	beq.n	800615e <__multiply+0xf2>
 8006114:	f104 0e14 	add.w	lr, r4, #20
 8006118:	46a9      	mov	r9, r5
 800611a:	f04f 0c00 	mov.w	ip, #0
 800611e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006122:	f8d9 1000 	ldr.w	r1, [r9]
 8006126:	fa1f fb82 	uxth.w	fp, r2
 800612a:	b289      	uxth	r1, r1
 800612c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006130:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006134:	f8d9 2000 	ldr.w	r2, [r9]
 8006138:	4461      	add	r1, ip
 800613a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800613e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006142:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006146:	b289      	uxth	r1, r1
 8006148:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800614c:	4577      	cmp	r7, lr
 800614e:	f849 1b04 	str.w	r1, [r9], #4
 8006152:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006156:	d8e2      	bhi.n	800611e <__multiply+0xb2>
 8006158:	9a01      	ldr	r2, [sp, #4]
 800615a:	f845 c002 	str.w	ip, [r5, r2]
 800615e:	9a03      	ldr	r2, [sp, #12]
 8006160:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006164:	3304      	adds	r3, #4
 8006166:	f1b9 0f00 	cmp.w	r9, #0
 800616a:	d021      	beq.n	80061b0 <__multiply+0x144>
 800616c:	6829      	ldr	r1, [r5, #0]
 800616e:	f104 0c14 	add.w	ip, r4, #20
 8006172:	46ae      	mov	lr, r5
 8006174:	f04f 0a00 	mov.w	sl, #0
 8006178:	f8bc b000 	ldrh.w	fp, [ip]
 800617c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006180:	fb09 220b 	mla	r2, r9, fp, r2
 8006184:	4452      	add	r2, sl
 8006186:	b289      	uxth	r1, r1
 8006188:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800618c:	f84e 1b04 	str.w	r1, [lr], #4
 8006190:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006194:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006198:	f8be 1000 	ldrh.w	r1, [lr]
 800619c:	fb09 110a 	mla	r1, r9, sl, r1
 80061a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80061a4:	4567      	cmp	r7, ip
 80061a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80061aa:	d8e5      	bhi.n	8006178 <__multiply+0x10c>
 80061ac:	9a01      	ldr	r2, [sp, #4]
 80061ae:	50a9      	str	r1, [r5, r2]
 80061b0:	3504      	adds	r5, #4
 80061b2:	e799      	b.n	80060e8 <__multiply+0x7c>
 80061b4:	3e01      	subs	r6, #1
 80061b6:	e79b      	b.n	80060f0 <__multiply+0x84>
 80061b8:	08006dfc 	.word	0x08006dfc
 80061bc:	08006e0d 	.word	0x08006e0d

080061c0 <__pow5mult>:
 80061c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061c4:	4615      	mov	r5, r2
 80061c6:	f012 0203 	ands.w	r2, r2, #3
 80061ca:	4606      	mov	r6, r0
 80061cc:	460f      	mov	r7, r1
 80061ce:	d007      	beq.n	80061e0 <__pow5mult+0x20>
 80061d0:	4c25      	ldr	r4, [pc, #148]	; (8006268 <__pow5mult+0xa8>)
 80061d2:	3a01      	subs	r2, #1
 80061d4:	2300      	movs	r3, #0
 80061d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061da:	f7ff fe9d 	bl	8005f18 <__multadd>
 80061de:	4607      	mov	r7, r0
 80061e0:	10ad      	asrs	r5, r5, #2
 80061e2:	d03d      	beq.n	8006260 <__pow5mult+0xa0>
 80061e4:	69f4      	ldr	r4, [r6, #28]
 80061e6:	b97c      	cbnz	r4, 8006208 <__pow5mult+0x48>
 80061e8:	2010      	movs	r0, #16
 80061ea:	f7ff fd7f 	bl	8005cec <malloc>
 80061ee:	4602      	mov	r2, r0
 80061f0:	61f0      	str	r0, [r6, #28]
 80061f2:	b928      	cbnz	r0, 8006200 <__pow5mult+0x40>
 80061f4:	4b1d      	ldr	r3, [pc, #116]	; (800626c <__pow5mult+0xac>)
 80061f6:	481e      	ldr	r0, [pc, #120]	; (8006270 <__pow5mult+0xb0>)
 80061f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80061fc:	f000 fcd0 	bl	8006ba0 <__assert_func>
 8006200:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006204:	6004      	str	r4, [r0, #0]
 8006206:	60c4      	str	r4, [r0, #12]
 8006208:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800620c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006210:	b94c      	cbnz	r4, 8006226 <__pow5mult+0x66>
 8006212:	f240 2171 	movw	r1, #625	; 0x271
 8006216:	4630      	mov	r0, r6
 8006218:	f7ff ff12 	bl	8006040 <__i2b>
 800621c:	2300      	movs	r3, #0
 800621e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006222:	4604      	mov	r4, r0
 8006224:	6003      	str	r3, [r0, #0]
 8006226:	f04f 0900 	mov.w	r9, #0
 800622a:	07eb      	lsls	r3, r5, #31
 800622c:	d50a      	bpl.n	8006244 <__pow5mult+0x84>
 800622e:	4639      	mov	r1, r7
 8006230:	4622      	mov	r2, r4
 8006232:	4630      	mov	r0, r6
 8006234:	f7ff ff1a 	bl	800606c <__multiply>
 8006238:	4639      	mov	r1, r7
 800623a:	4680      	mov	r8, r0
 800623c:	4630      	mov	r0, r6
 800623e:	f7ff fe49 	bl	8005ed4 <_Bfree>
 8006242:	4647      	mov	r7, r8
 8006244:	106d      	asrs	r5, r5, #1
 8006246:	d00b      	beq.n	8006260 <__pow5mult+0xa0>
 8006248:	6820      	ldr	r0, [r4, #0]
 800624a:	b938      	cbnz	r0, 800625c <__pow5mult+0x9c>
 800624c:	4622      	mov	r2, r4
 800624e:	4621      	mov	r1, r4
 8006250:	4630      	mov	r0, r6
 8006252:	f7ff ff0b 	bl	800606c <__multiply>
 8006256:	6020      	str	r0, [r4, #0]
 8006258:	f8c0 9000 	str.w	r9, [r0]
 800625c:	4604      	mov	r4, r0
 800625e:	e7e4      	b.n	800622a <__pow5mult+0x6a>
 8006260:	4638      	mov	r0, r7
 8006262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006266:	bf00      	nop
 8006268:	08006f58 	.word	0x08006f58
 800626c:	08006d8d 	.word	0x08006d8d
 8006270:	08006e0d 	.word	0x08006e0d

08006274 <__lshift>:
 8006274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006278:	460c      	mov	r4, r1
 800627a:	6849      	ldr	r1, [r1, #4]
 800627c:	6923      	ldr	r3, [r4, #16]
 800627e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006282:	68a3      	ldr	r3, [r4, #8]
 8006284:	4607      	mov	r7, r0
 8006286:	4691      	mov	r9, r2
 8006288:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800628c:	f108 0601 	add.w	r6, r8, #1
 8006290:	42b3      	cmp	r3, r6
 8006292:	db0b      	blt.n	80062ac <__lshift+0x38>
 8006294:	4638      	mov	r0, r7
 8006296:	f7ff fddd 	bl	8005e54 <_Balloc>
 800629a:	4605      	mov	r5, r0
 800629c:	b948      	cbnz	r0, 80062b2 <__lshift+0x3e>
 800629e:	4602      	mov	r2, r0
 80062a0:	4b28      	ldr	r3, [pc, #160]	; (8006344 <__lshift+0xd0>)
 80062a2:	4829      	ldr	r0, [pc, #164]	; (8006348 <__lshift+0xd4>)
 80062a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80062a8:	f000 fc7a 	bl	8006ba0 <__assert_func>
 80062ac:	3101      	adds	r1, #1
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	e7ee      	b.n	8006290 <__lshift+0x1c>
 80062b2:	2300      	movs	r3, #0
 80062b4:	f100 0114 	add.w	r1, r0, #20
 80062b8:	f100 0210 	add.w	r2, r0, #16
 80062bc:	4618      	mov	r0, r3
 80062be:	4553      	cmp	r3, sl
 80062c0:	db33      	blt.n	800632a <__lshift+0xb6>
 80062c2:	6920      	ldr	r0, [r4, #16]
 80062c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062c8:	f104 0314 	add.w	r3, r4, #20
 80062cc:	f019 091f 	ands.w	r9, r9, #31
 80062d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062d8:	d02b      	beq.n	8006332 <__lshift+0xbe>
 80062da:	f1c9 0e20 	rsb	lr, r9, #32
 80062de:	468a      	mov	sl, r1
 80062e0:	2200      	movs	r2, #0
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	fa00 f009 	lsl.w	r0, r0, r9
 80062e8:	4310      	orrs	r0, r2
 80062ea:	f84a 0b04 	str.w	r0, [sl], #4
 80062ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80062f2:	459c      	cmp	ip, r3
 80062f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80062f8:	d8f3      	bhi.n	80062e2 <__lshift+0x6e>
 80062fa:	ebac 0304 	sub.w	r3, ip, r4
 80062fe:	3b15      	subs	r3, #21
 8006300:	f023 0303 	bic.w	r3, r3, #3
 8006304:	3304      	adds	r3, #4
 8006306:	f104 0015 	add.w	r0, r4, #21
 800630a:	4584      	cmp	ip, r0
 800630c:	bf38      	it	cc
 800630e:	2304      	movcc	r3, #4
 8006310:	50ca      	str	r2, [r1, r3]
 8006312:	b10a      	cbz	r2, 8006318 <__lshift+0xa4>
 8006314:	f108 0602 	add.w	r6, r8, #2
 8006318:	3e01      	subs	r6, #1
 800631a:	4638      	mov	r0, r7
 800631c:	612e      	str	r6, [r5, #16]
 800631e:	4621      	mov	r1, r4
 8006320:	f7ff fdd8 	bl	8005ed4 <_Bfree>
 8006324:	4628      	mov	r0, r5
 8006326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800632a:	f842 0f04 	str.w	r0, [r2, #4]!
 800632e:	3301      	adds	r3, #1
 8006330:	e7c5      	b.n	80062be <__lshift+0x4a>
 8006332:	3904      	subs	r1, #4
 8006334:	f853 2b04 	ldr.w	r2, [r3], #4
 8006338:	f841 2f04 	str.w	r2, [r1, #4]!
 800633c:	459c      	cmp	ip, r3
 800633e:	d8f9      	bhi.n	8006334 <__lshift+0xc0>
 8006340:	e7ea      	b.n	8006318 <__lshift+0xa4>
 8006342:	bf00      	nop
 8006344:	08006dfc 	.word	0x08006dfc
 8006348:	08006e0d 	.word	0x08006e0d

0800634c <__mcmp>:
 800634c:	b530      	push	{r4, r5, lr}
 800634e:	6902      	ldr	r2, [r0, #16]
 8006350:	690c      	ldr	r4, [r1, #16]
 8006352:	1b12      	subs	r2, r2, r4
 8006354:	d10e      	bne.n	8006374 <__mcmp+0x28>
 8006356:	f100 0314 	add.w	r3, r0, #20
 800635a:	3114      	adds	r1, #20
 800635c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006360:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006364:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006368:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800636c:	42a5      	cmp	r5, r4
 800636e:	d003      	beq.n	8006378 <__mcmp+0x2c>
 8006370:	d305      	bcc.n	800637e <__mcmp+0x32>
 8006372:	2201      	movs	r2, #1
 8006374:	4610      	mov	r0, r2
 8006376:	bd30      	pop	{r4, r5, pc}
 8006378:	4283      	cmp	r3, r0
 800637a:	d3f3      	bcc.n	8006364 <__mcmp+0x18>
 800637c:	e7fa      	b.n	8006374 <__mcmp+0x28>
 800637e:	f04f 32ff 	mov.w	r2, #4294967295
 8006382:	e7f7      	b.n	8006374 <__mcmp+0x28>

08006384 <__mdiff>:
 8006384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006388:	460c      	mov	r4, r1
 800638a:	4606      	mov	r6, r0
 800638c:	4611      	mov	r1, r2
 800638e:	4620      	mov	r0, r4
 8006390:	4690      	mov	r8, r2
 8006392:	f7ff ffdb 	bl	800634c <__mcmp>
 8006396:	1e05      	subs	r5, r0, #0
 8006398:	d110      	bne.n	80063bc <__mdiff+0x38>
 800639a:	4629      	mov	r1, r5
 800639c:	4630      	mov	r0, r6
 800639e:	f7ff fd59 	bl	8005e54 <_Balloc>
 80063a2:	b930      	cbnz	r0, 80063b2 <__mdiff+0x2e>
 80063a4:	4b3a      	ldr	r3, [pc, #232]	; (8006490 <__mdiff+0x10c>)
 80063a6:	4602      	mov	r2, r0
 80063a8:	f240 2137 	movw	r1, #567	; 0x237
 80063ac:	4839      	ldr	r0, [pc, #228]	; (8006494 <__mdiff+0x110>)
 80063ae:	f000 fbf7 	bl	8006ba0 <__assert_func>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80063b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063bc:	bfa4      	itt	ge
 80063be:	4643      	movge	r3, r8
 80063c0:	46a0      	movge	r8, r4
 80063c2:	4630      	mov	r0, r6
 80063c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80063c8:	bfa6      	itte	ge
 80063ca:	461c      	movge	r4, r3
 80063cc:	2500      	movge	r5, #0
 80063ce:	2501      	movlt	r5, #1
 80063d0:	f7ff fd40 	bl	8005e54 <_Balloc>
 80063d4:	b920      	cbnz	r0, 80063e0 <__mdiff+0x5c>
 80063d6:	4b2e      	ldr	r3, [pc, #184]	; (8006490 <__mdiff+0x10c>)
 80063d8:	4602      	mov	r2, r0
 80063da:	f240 2145 	movw	r1, #581	; 0x245
 80063de:	e7e5      	b.n	80063ac <__mdiff+0x28>
 80063e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80063e4:	6926      	ldr	r6, [r4, #16]
 80063e6:	60c5      	str	r5, [r0, #12]
 80063e8:	f104 0914 	add.w	r9, r4, #20
 80063ec:	f108 0514 	add.w	r5, r8, #20
 80063f0:	f100 0e14 	add.w	lr, r0, #20
 80063f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80063f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80063fc:	f108 0210 	add.w	r2, r8, #16
 8006400:	46f2      	mov	sl, lr
 8006402:	2100      	movs	r1, #0
 8006404:	f859 3b04 	ldr.w	r3, [r9], #4
 8006408:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800640c:	fa11 f88b 	uxtah	r8, r1, fp
 8006410:	b299      	uxth	r1, r3
 8006412:	0c1b      	lsrs	r3, r3, #16
 8006414:	eba8 0801 	sub.w	r8, r8, r1
 8006418:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800641c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006420:	fa1f f888 	uxth.w	r8, r8
 8006424:	1419      	asrs	r1, r3, #16
 8006426:	454e      	cmp	r6, r9
 8006428:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800642c:	f84a 3b04 	str.w	r3, [sl], #4
 8006430:	d8e8      	bhi.n	8006404 <__mdiff+0x80>
 8006432:	1b33      	subs	r3, r6, r4
 8006434:	3b15      	subs	r3, #21
 8006436:	f023 0303 	bic.w	r3, r3, #3
 800643a:	3304      	adds	r3, #4
 800643c:	3415      	adds	r4, #21
 800643e:	42a6      	cmp	r6, r4
 8006440:	bf38      	it	cc
 8006442:	2304      	movcc	r3, #4
 8006444:	441d      	add	r5, r3
 8006446:	4473      	add	r3, lr
 8006448:	469e      	mov	lr, r3
 800644a:	462e      	mov	r6, r5
 800644c:	4566      	cmp	r6, ip
 800644e:	d30e      	bcc.n	800646e <__mdiff+0xea>
 8006450:	f10c 0203 	add.w	r2, ip, #3
 8006454:	1b52      	subs	r2, r2, r5
 8006456:	f022 0203 	bic.w	r2, r2, #3
 800645a:	3d03      	subs	r5, #3
 800645c:	45ac      	cmp	ip, r5
 800645e:	bf38      	it	cc
 8006460:	2200      	movcc	r2, #0
 8006462:	4413      	add	r3, r2
 8006464:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006468:	b17a      	cbz	r2, 800648a <__mdiff+0x106>
 800646a:	6107      	str	r7, [r0, #16]
 800646c:	e7a4      	b.n	80063b8 <__mdiff+0x34>
 800646e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006472:	fa11 f288 	uxtah	r2, r1, r8
 8006476:	1414      	asrs	r4, r2, #16
 8006478:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800647c:	b292      	uxth	r2, r2
 800647e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006482:	f84e 2b04 	str.w	r2, [lr], #4
 8006486:	1421      	asrs	r1, r4, #16
 8006488:	e7e0      	b.n	800644c <__mdiff+0xc8>
 800648a:	3f01      	subs	r7, #1
 800648c:	e7ea      	b.n	8006464 <__mdiff+0xe0>
 800648e:	bf00      	nop
 8006490:	08006dfc 	.word	0x08006dfc
 8006494:	08006e0d 	.word	0x08006e0d

08006498 <__d2b>:
 8006498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800649c:	460f      	mov	r7, r1
 800649e:	2101      	movs	r1, #1
 80064a0:	ec59 8b10 	vmov	r8, r9, d0
 80064a4:	4616      	mov	r6, r2
 80064a6:	f7ff fcd5 	bl	8005e54 <_Balloc>
 80064aa:	4604      	mov	r4, r0
 80064ac:	b930      	cbnz	r0, 80064bc <__d2b+0x24>
 80064ae:	4602      	mov	r2, r0
 80064b0:	4b24      	ldr	r3, [pc, #144]	; (8006544 <__d2b+0xac>)
 80064b2:	4825      	ldr	r0, [pc, #148]	; (8006548 <__d2b+0xb0>)
 80064b4:	f240 310f 	movw	r1, #783	; 0x30f
 80064b8:	f000 fb72 	bl	8006ba0 <__assert_func>
 80064bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80064c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064c4:	bb2d      	cbnz	r5, 8006512 <__d2b+0x7a>
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	f1b8 0300 	subs.w	r3, r8, #0
 80064cc:	d026      	beq.n	800651c <__d2b+0x84>
 80064ce:	4668      	mov	r0, sp
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	f7ff fd87 	bl	8005fe4 <__lo0bits>
 80064d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80064da:	b1e8      	cbz	r0, 8006518 <__d2b+0x80>
 80064dc:	f1c0 0320 	rsb	r3, r0, #32
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	430b      	orrs	r3, r1
 80064e6:	40c2      	lsrs	r2, r0
 80064e8:	6163      	str	r3, [r4, #20]
 80064ea:	9201      	str	r2, [sp, #4]
 80064ec:	9b01      	ldr	r3, [sp, #4]
 80064ee:	61a3      	str	r3, [r4, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	bf14      	ite	ne
 80064f4:	2202      	movne	r2, #2
 80064f6:	2201      	moveq	r2, #1
 80064f8:	6122      	str	r2, [r4, #16]
 80064fa:	b1bd      	cbz	r5, 800652c <__d2b+0x94>
 80064fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006500:	4405      	add	r5, r0
 8006502:	603d      	str	r5, [r7, #0]
 8006504:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006508:	6030      	str	r0, [r6, #0]
 800650a:	4620      	mov	r0, r4
 800650c:	b003      	add	sp, #12
 800650e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006516:	e7d6      	b.n	80064c6 <__d2b+0x2e>
 8006518:	6161      	str	r1, [r4, #20]
 800651a:	e7e7      	b.n	80064ec <__d2b+0x54>
 800651c:	a801      	add	r0, sp, #4
 800651e:	f7ff fd61 	bl	8005fe4 <__lo0bits>
 8006522:	9b01      	ldr	r3, [sp, #4]
 8006524:	6163      	str	r3, [r4, #20]
 8006526:	3020      	adds	r0, #32
 8006528:	2201      	movs	r2, #1
 800652a:	e7e5      	b.n	80064f8 <__d2b+0x60>
 800652c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006530:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006534:	6038      	str	r0, [r7, #0]
 8006536:	6918      	ldr	r0, [r3, #16]
 8006538:	f7ff fd34 	bl	8005fa4 <__hi0bits>
 800653c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006540:	e7e2      	b.n	8006508 <__d2b+0x70>
 8006542:	bf00      	nop
 8006544:	08006dfc 	.word	0x08006dfc
 8006548:	08006e0d 	.word	0x08006e0d

0800654c <__sfputc_r>:
 800654c:	6893      	ldr	r3, [r2, #8]
 800654e:	3b01      	subs	r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	b410      	push	{r4}
 8006554:	6093      	str	r3, [r2, #8]
 8006556:	da08      	bge.n	800656a <__sfputc_r+0x1e>
 8006558:	6994      	ldr	r4, [r2, #24]
 800655a:	42a3      	cmp	r3, r4
 800655c:	db01      	blt.n	8006562 <__sfputc_r+0x16>
 800655e:	290a      	cmp	r1, #10
 8006560:	d103      	bne.n	800656a <__sfputc_r+0x1e>
 8006562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006566:	f000 ba45 	b.w	80069f4 <__swbuf_r>
 800656a:	6813      	ldr	r3, [r2, #0]
 800656c:	1c58      	adds	r0, r3, #1
 800656e:	6010      	str	r0, [r2, #0]
 8006570:	7019      	strb	r1, [r3, #0]
 8006572:	4608      	mov	r0, r1
 8006574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006578:	4770      	bx	lr

0800657a <__sfputs_r>:
 800657a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657c:	4606      	mov	r6, r0
 800657e:	460f      	mov	r7, r1
 8006580:	4614      	mov	r4, r2
 8006582:	18d5      	adds	r5, r2, r3
 8006584:	42ac      	cmp	r4, r5
 8006586:	d101      	bne.n	800658c <__sfputs_r+0x12>
 8006588:	2000      	movs	r0, #0
 800658a:	e007      	b.n	800659c <__sfputs_r+0x22>
 800658c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006590:	463a      	mov	r2, r7
 8006592:	4630      	mov	r0, r6
 8006594:	f7ff ffda 	bl	800654c <__sfputc_r>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d1f3      	bne.n	8006584 <__sfputs_r+0xa>
 800659c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065a0 <_vfiprintf_r>:
 80065a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	460d      	mov	r5, r1
 80065a6:	b09d      	sub	sp, #116	; 0x74
 80065a8:	4614      	mov	r4, r2
 80065aa:	4698      	mov	r8, r3
 80065ac:	4606      	mov	r6, r0
 80065ae:	b118      	cbz	r0, 80065b8 <_vfiprintf_r+0x18>
 80065b0:	6a03      	ldr	r3, [r0, #32]
 80065b2:	b90b      	cbnz	r3, 80065b8 <_vfiprintf_r+0x18>
 80065b4:	f7fe fb1a 	bl	8004bec <__sinit>
 80065b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065ba:	07d9      	lsls	r1, r3, #31
 80065bc:	d405      	bmi.n	80065ca <_vfiprintf_r+0x2a>
 80065be:	89ab      	ldrh	r3, [r5, #12]
 80065c0:	059a      	lsls	r2, r3, #22
 80065c2:	d402      	bmi.n	80065ca <_vfiprintf_r+0x2a>
 80065c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065c6:	f7fe fcc8 	bl	8004f5a <__retarget_lock_acquire_recursive>
 80065ca:	89ab      	ldrh	r3, [r5, #12]
 80065cc:	071b      	lsls	r3, r3, #28
 80065ce:	d501      	bpl.n	80065d4 <_vfiprintf_r+0x34>
 80065d0:	692b      	ldr	r3, [r5, #16]
 80065d2:	b99b      	cbnz	r3, 80065fc <_vfiprintf_r+0x5c>
 80065d4:	4629      	mov	r1, r5
 80065d6:	4630      	mov	r0, r6
 80065d8:	f000 fa4a 	bl	8006a70 <__swsetup_r>
 80065dc:	b170      	cbz	r0, 80065fc <_vfiprintf_r+0x5c>
 80065de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065e0:	07dc      	lsls	r4, r3, #31
 80065e2:	d504      	bpl.n	80065ee <_vfiprintf_r+0x4e>
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	b01d      	add	sp, #116	; 0x74
 80065ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ee:	89ab      	ldrh	r3, [r5, #12]
 80065f0:	0598      	lsls	r0, r3, #22
 80065f2:	d4f7      	bmi.n	80065e4 <_vfiprintf_r+0x44>
 80065f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065f6:	f7fe fcb1 	bl	8004f5c <__retarget_lock_release_recursive>
 80065fa:	e7f3      	b.n	80065e4 <_vfiprintf_r+0x44>
 80065fc:	2300      	movs	r3, #0
 80065fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006600:	2320      	movs	r3, #32
 8006602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006606:	f8cd 800c 	str.w	r8, [sp, #12]
 800660a:	2330      	movs	r3, #48	; 0x30
 800660c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80067c0 <_vfiprintf_r+0x220>
 8006610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006614:	f04f 0901 	mov.w	r9, #1
 8006618:	4623      	mov	r3, r4
 800661a:	469a      	mov	sl, r3
 800661c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006620:	b10a      	cbz	r2, 8006626 <_vfiprintf_r+0x86>
 8006622:	2a25      	cmp	r2, #37	; 0x25
 8006624:	d1f9      	bne.n	800661a <_vfiprintf_r+0x7a>
 8006626:	ebba 0b04 	subs.w	fp, sl, r4
 800662a:	d00b      	beq.n	8006644 <_vfiprintf_r+0xa4>
 800662c:	465b      	mov	r3, fp
 800662e:	4622      	mov	r2, r4
 8006630:	4629      	mov	r1, r5
 8006632:	4630      	mov	r0, r6
 8006634:	f7ff ffa1 	bl	800657a <__sfputs_r>
 8006638:	3001      	adds	r0, #1
 800663a:	f000 80a9 	beq.w	8006790 <_vfiprintf_r+0x1f0>
 800663e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006640:	445a      	add	r2, fp
 8006642:	9209      	str	r2, [sp, #36]	; 0x24
 8006644:	f89a 3000 	ldrb.w	r3, [sl]
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 80a1 	beq.w	8006790 <_vfiprintf_r+0x1f0>
 800664e:	2300      	movs	r3, #0
 8006650:	f04f 32ff 	mov.w	r2, #4294967295
 8006654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006658:	f10a 0a01 	add.w	sl, sl, #1
 800665c:	9304      	str	r3, [sp, #16]
 800665e:	9307      	str	r3, [sp, #28]
 8006660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006664:	931a      	str	r3, [sp, #104]	; 0x68
 8006666:	4654      	mov	r4, sl
 8006668:	2205      	movs	r2, #5
 800666a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800666e:	4854      	ldr	r0, [pc, #336]	; (80067c0 <_vfiprintf_r+0x220>)
 8006670:	f7f9 fdce 	bl	8000210 <memchr>
 8006674:	9a04      	ldr	r2, [sp, #16]
 8006676:	b9d8      	cbnz	r0, 80066b0 <_vfiprintf_r+0x110>
 8006678:	06d1      	lsls	r1, r2, #27
 800667a:	bf44      	itt	mi
 800667c:	2320      	movmi	r3, #32
 800667e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006682:	0713      	lsls	r3, r2, #28
 8006684:	bf44      	itt	mi
 8006686:	232b      	movmi	r3, #43	; 0x2b
 8006688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800668c:	f89a 3000 	ldrb.w	r3, [sl]
 8006690:	2b2a      	cmp	r3, #42	; 0x2a
 8006692:	d015      	beq.n	80066c0 <_vfiprintf_r+0x120>
 8006694:	9a07      	ldr	r2, [sp, #28]
 8006696:	4654      	mov	r4, sl
 8006698:	2000      	movs	r0, #0
 800669a:	f04f 0c0a 	mov.w	ip, #10
 800669e:	4621      	mov	r1, r4
 80066a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066a4:	3b30      	subs	r3, #48	; 0x30
 80066a6:	2b09      	cmp	r3, #9
 80066a8:	d94d      	bls.n	8006746 <_vfiprintf_r+0x1a6>
 80066aa:	b1b0      	cbz	r0, 80066da <_vfiprintf_r+0x13a>
 80066ac:	9207      	str	r2, [sp, #28]
 80066ae:	e014      	b.n	80066da <_vfiprintf_r+0x13a>
 80066b0:	eba0 0308 	sub.w	r3, r0, r8
 80066b4:	fa09 f303 	lsl.w	r3, r9, r3
 80066b8:	4313      	orrs	r3, r2
 80066ba:	9304      	str	r3, [sp, #16]
 80066bc:	46a2      	mov	sl, r4
 80066be:	e7d2      	b.n	8006666 <_vfiprintf_r+0xc6>
 80066c0:	9b03      	ldr	r3, [sp, #12]
 80066c2:	1d19      	adds	r1, r3, #4
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	9103      	str	r1, [sp, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	bfbb      	ittet	lt
 80066cc:	425b      	neglt	r3, r3
 80066ce:	f042 0202 	orrlt.w	r2, r2, #2
 80066d2:	9307      	strge	r3, [sp, #28]
 80066d4:	9307      	strlt	r3, [sp, #28]
 80066d6:	bfb8      	it	lt
 80066d8:	9204      	strlt	r2, [sp, #16]
 80066da:	7823      	ldrb	r3, [r4, #0]
 80066dc:	2b2e      	cmp	r3, #46	; 0x2e
 80066de:	d10c      	bne.n	80066fa <_vfiprintf_r+0x15a>
 80066e0:	7863      	ldrb	r3, [r4, #1]
 80066e2:	2b2a      	cmp	r3, #42	; 0x2a
 80066e4:	d134      	bne.n	8006750 <_vfiprintf_r+0x1b0>
 80066e6:	9b03      	ldr	r3, [sp, #12]
 80066e8:	1d1a      	adds	r2, r3, #4
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	9203      	str	r2, [sp, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	bfb8      	it	lt
 80066f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80066f6:	3402      	adds	r4, #2
 80066f8:	9305      	str	r3, [sp, #20]
 80066fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80067d0 <_vfiprintf_r+0x230>
 80066fe:	7821      	ldrb	r1, [r4, #0]
 8006700:	2203      	movs	r2, #3
 8006702:	4650      	mov	r0, sl
 8006704:	f7f9 fd84 	bl	8000210 <memchr>
 8006708:	b138      	cbz	r0, 800671a <_vfiprintf_r+0x17a>
 800670a:	9b04      	ldr	r3, [sp, #16]
 800670c:	eba0 000a 	sub.w	r0, r0, sl
 8006710:	2240      	movs	r2, #64	; 0x40
 8006712:	4082      	lsls	r2, r0
 8006714:	4313      	orrs	r3, r2
 8006716:	3401      	adds	r4, #1
 8006718:	9304      	str	r3, [sp, #16]
 800671a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800671e:	4829      	ldr	r0, [pc, #164]	; (80067c4 <_vfiprintf_r+0x224>)
 8006720:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006724:	2206      	movs	r2, #6
 8006726:	f7f9 fd73 	bl	8000210 <memchr>
 800672a:	2800      	cmp	r0, #0
 800672c:	d03f      	beq.n	80067ae <_vfiprintf_r+0x20e>
 800672e:	4b26      	ldr	r3, [pc, #152]	; (80067c8 <_vfiprintf_r+0x228>)
 8006730:	bb1b      	cbnz	r3, 800677a <_vfiprintf_r+0x1da>
 8006732:	9b03      	ldr	r3, [sp, #12]
 8006734:	3307      	adds	r3, #7
 8006736:	f023 0307 	bic.w	r3, r3, #7
 800673a:	3308      	adds	r3, #8
 800673c:	9303      	str	r3, [sp, #12]
 800673e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006740:	443b      	add	r3, r7
 8006742:	9309      	str	r3, [sp, #36]	; 0x24
 8006744:	e768      	b.n	8006618 <_vfiprintf_r+0x78>
 8006746:	fb0c 3202 	mla	r2, ip, r2, r3
 800674a:	460c      	mov	r4, r1
 800674c:	2001      	movs	r0, #1
 800674e:	e7a6      	b.n	800669e <_vfiprintf_r+0xfe>
 8006750:	2300      	movs	r3, #0
 8006752:	3401      	adds	r4, #1
 8006754:	9305      	str	r3, [sp, #20]
 8006756:	4619      	mov	r1, r3
 8006758:	f04f 0c0a 	mov.w	ip, #10
 800675c:	4620      	mov	r0, r4
 800675e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006762:	3a30      	subs	r2, #48	; 0x30
 8006764:	2a09      	cmp	r2, #9
 8006766:	d903      	bls.n	8006770 <_vfiprintf_r+0x1d0>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0c6      	beq.n	80066fa <_vfiprintf_r+0x15a>
 800676c:	9105      	str	r1, [sp, #20]
 800676e:	e7c4      	b.n	80066fa <_vfiprintf_r+0x15a>
 8006770:	fb0c 2101 	mla	r1, ip, r1, r2
 8006774:	4604      	mov	r4, r0
 8006776:	2301      	movs	r3, #1
 8006778:	e7f0      	b.n	800675c <_vfiprintf_r+0x1bc>
 800677a:	ab03      	add	r3, sp, #12
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	462a      	mov	r2, r5
 8006780:	4b12      	ldr	r3, [pc, #72]	; (80067cc <_vfiprintf_r+0x22c>)
 8006782:	a904      	add	r1, sp, #16
 8006784:	4630      	mov	r0, r6
 8006786:	f7fd fddf 	bl	8004348 <_printf_float>
 800678a:	4607      	mov	r7, r0
 800678c:	1c78      	adds	r0, r7, #1
 800678e:	d1d6      	bne.n	800673e <_vfiprintf_r+0x19e>
 8006790:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006792:	07d9      	lsls	r1, r3, #31
 8006794:	d405      	bmi.n	80067a2 <_vfiprintf_r+0x202>
 8006796:	89ab      	ldrh	r3, [r5, #12]
 8006798:	059a      	lsls	r2, r3, #22
 800679a:	d402      	bmi.n	80067a2 <_vfiprintf_r+0x202>
 800679c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800679e:	f7fe fbdd 	bl	8004f5c <__retarget_lock_release_recursive>
 80067a2:	89ab      	ldrh	r3, [r5, #12]
 80067a4:	065b      	lsls	r3, r3, #25
 80067a6:	f53f af1d 	bmi.w	80065e4 <_vfiprintf_r+0x44>
 80067aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ac:	e71c      	b.n	80065e8 <_vfiprintf_r+0x48>
 80067ae:	ab03      	add	r3, sp, #12
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	462a      	mov	r2, r5
 80067b4:	4b05      	ldr	r3, [pc, #20]	; (80067cc <_vfiprintf_r+0x22c>)
 80067b6:	a904      	add	r1, sp, #16
 80067b8:	4630      	mov	r0, r6
 80067ba:	f7fe f869 	bl	8004890 <_printf_i>
 80067be:	e7e4      	b.n	800678a <_vfiprintf_r+0x1ea>
 80067c0:	08006f64 	.word	0x08006f64
 80067c4:	08006f6e 	.word	0x08006f6e
 80067c8:	08004349 	.word	0x08004349
 80067cc:	0800657b 	.word	0x0800657b
 80067d0:	08006f6a 	.word	0x08006f6a

080067d4 <__sflush_r>:
 80067d4:	898a      	ldrh	r2, [r1, #12]
 80067d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067da:	4605      	mov	r5, r0
 80067dc:	0710      	lsls	r0, r2, #28
 80067de:	460c      	mov	r4, r1
 80067e0:	d458      	bmi.n	8006894 <__sflush_r+0xc0>
 80067e2:	684b      	ldr	r3, [r1, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	dc05      	bgt.n	80067f4 <__sflush_r+0x20>
 80067e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	dc02      	bgt.n	80067f4 <__sflush_r+0x20>
 80067ee:	2000      	movs	r0, #0
 80067f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067f6:	2e00      	cmp	r6, #0
 80067f8:	d0f9      	beq.n	80067ee <__sflush_r+0x1a>
 80067fa:	2300      	movs	r3, #0
 80067fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006800:	682f      	ldr	r7, [r5, #0]
 8006802:	6a21      	ldr	r1, [r4, #32]
 8006804:	602b      	str	r3, [r5, #0]
 8006806:	d032      	beq.n	800686e <__sflush_r+0x9a>
 8006808:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800680a:	89a3      	ldrh	r3, [r4, #12]
 800680c:	075a      	lsls	r2, r3, #29
 800680e:	d505      	bpl.n	800681c <__sflush_r+0x48>
 8006810:	6863      	ldr	r3, [r4, #4]
 8006812:	1ac0      	subs	r0, r0, r3
 8006814:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006816:	b10b      	cbz	r3, 800681c <__sflush_r+0x48>
 8006818:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800681a:	1ac0      	subs	r0, r0, r3
 800681c:	2300      	movs	r3, #0
 800681e:	4602      	mov	r2, r0
 8006820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006822:	6a21      	ldr	r1, [r4, #32]
 8006824:	4628      	mov	r0, r5
 8006826:	47b0      	blx	r6
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	d106      	bne.n	800683c <__sflush_r+0x68>
 800682e:	6829      	ldr	r1, [r5, #0]
 8006830:	291d      	cmp	r1, #29
 8006832:	d82b      	bhi.n	800688c <__sflush_r+0xb8>
 8006834:	4a29      	ldr	r2, [pc, #164]	; (80068dc <__sflush_r+0x108>)
 8006836:	410a      	asrs	r2, r1
 8006838:	07d6      	lsls	r6, r2, #31
 800683a:	d427      	bmi.n	800688c <__sflush_r+0xb8>
 800683c:	2200      	movs	r2, #0
 800683e:	6062      	str	r2, [r4, #4]
 8006840:	04d9      	lsls	r1, r3, #19
 8006842:	6922      	ldr	r2, [r4, #16]
 8006844:	6022      	str	r2, [r4, #0]
 8006846:	d504      	bpl.n	8006852 <__sflush_r+0x7e>
 8006848:	1c42      	adds	r2, r0, #1
 800684a:	d101      	bne.n	8006850 <__sflush_r+0x7c>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	b903      	cbnz	r3, 8006852 <__sflush_r+0x7e>
 8006850:	6560      	str	r0, [r4, #84]	; 0x54
 8006852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006854:	602f      	str	r7, [r5, #0]
 8006856:	2900      	cmp	r1, #0
 8006858:	d0c9      	beq.n	80067ee <__sflush_r+0x1a>
 800685a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800685e:	4299      	cmp	r1, r3
 8006860:	d002      	beq.n	8006868 <__sflush_r+0x94>
 8006862:	4628      	mov	r0, r5
 8006864:	f7ff f9f6 	bl	8005c54 <_free_r>
 8006868:	2000      	movs	r0, #0
 800686a:	6360      	str	r0, [r4, #52]	; 0x34
 800686c:	e7c0      	b.n	80067f0 <__sflush_r+0x1c>
 800686e:	2301      	movs	r3, #1
 8006870:	4628      	mov	r0, r5
 8006872:	47b0      	blx	r6
 8006874:	1c41      	adds	r1, r0, #1
 8006876:	d1c8      	bne.n	800680a <__sflush_r+0x36>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0c5      	beq.n	800680a <__sflush_r+0x36>
 800687e:	2b1d      	cmp	r3, #29
 8006880:	d001      	beq.n	8006886 <__sflush_r+0xb2>
 8006882:	2b16      	cmp	r3, #22
 8006884:	d101      	bne.n	800688a <__sflush_r+0xb6>
 8006886:	602f      	str	r7, [r5, #0]
 8006888:	e7b1      	b.n	80067ee <__sflush_r+0x1a>
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006890:	81a3      	strh	r3, [r4, #12]
 8006892:	e7ad      	b.n	80067f0 <__sflush_r+0x1c>
 8006894:	690f      	ldr	r7, [r1, #16]
 8006896:	2f00      	cmp	r7, #0
 8006898:	d0a9      	beq.n	80067ee <__sflush_r+0x1a>
 800689a:	0793      	lsls	r3, r2, #30
 800689c:	680e      	ldr	r6, [r1, #0]
 800689e:	bf08      	it	eq
 80068a0:	694b      	ldreq	r3, [r1, #20]
 80068a2:	600f      	str	r7, [r1, #0]
 80068a4:	bf18      	it	ne
 80068a6:	2300      	movne	r3, #0
 80068a8:	eba6 0807 	sub.w	r8, r6, r7
 80068ac:	608b      	str	r3, [r1, #8]
 80068ae:	f1b8 0f00 	cmp.w	r8, #0
 80068b2:	dd9c      	ble.n	80067ee <__sflush_r+0x1a>
 80068b4:	6a21      	ldr	r1, [r4, #32]
 80068b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068b8:	4643      	mov	r3, r8
 80068ba:	463a      	mov	r2, r7
 80068bc:	4628      	mov	r0, r5
 80068be:	47b0      	blx	r6
 80068c0:	2800      	cmp	r0, #0
 80068c2:	dc06      	bgt.n	80068d2 <__sflush_r+0xfe>
 80068c4:	89a3      	ldrh	r3, [r4, #12]
 80068c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ca:	81a3      	strh	r3, [r4, #12]
 80068cc:	f04f 30ff 	mov.w	r0, #4294967295
 80068d0:	e78e      	b.n	80067f0 <__sflush_r+0x1c>
 80068d2:	4407      	add	r7, r0
 80068d4:	eba8 0800 	sub.w	r8, r8, r0
 80068d8:	e7e9      	b.n	80068ae <__sflush_r+0xda>
 80068da:	bf00      	nop
 80068dc:	dfbffffe 	.word	0xdfbffffe

080068e0 <_fflush_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	690b      	ldr	r3, [r1, #16]
 80068e4:	4605      	mov	r5, r0
 80068e6:	460c      	mov	r4, r1
 80068e8:	b913      	cbnz	r3, 80068f0 <_fflush_r+0x10>
 80068ea:	2500      	movs	r5, #0
 80068ec:	4628      	mov	r0, r5
 80068ee:	bd38      	pop	{r3, r4, r5, pc}
 80068f0:	b118      	cbz	r0, 80068fa <_fflush_r+0x1a>
 80068f2:	6a03      	ldr	r3, [r0, #32]
 80068f4:	b90b      	cbnz	r3, 80068fa <_fflush_r+0x1a>
 80068f6:	f7fe f979 	bl	8004bec <__sinit>
 80068fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0f3      	beq.n	80068ea <_fflush_r+0xa>
 8006902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006904:	07d0      	lsls	r0, r2, #31
 8006906:	d404      	bmi.n	8006912 <_fflush_r+0x32>
 8006908:	0599      	lsls	r1, r3, #22
 800690a:	d402      	bmi.n	8006912 <_fflush_r+0x32>
 800690c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800690e:	f7fe fb24 	bl	8004f5a <__retarget_lock_acquire_recursive>
 8006912:	4628      	mov	r0, r5
 8006914:	4621      	mov	r1, r4
 8006916:	f7ff ff5d 	bl	80067d4 <__sflush_r>
 800691a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800691c:	07da      	lsls	r2, r3, #31
 800691e:	4605      	mov	r5, r0
 8006920:	d4e4      	bmi.n	80068ec <_fflush_r+0xc>
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	059b      	lsls	r3, r3, #22
 8006926:	d4e1      	bmi.n	80068ec <_fflush_r+0xc>
 8006928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800692a:	f7fe fb17 	bl	8004f5c <__retarget_lock_release_recursive>
 800692e:	e7dd      	b.n	80068ec <_fflush_r+0xc>

08006930 <__swhatbuf_r>:
 8006930:	b570      	push	{r4, r5, r6, lr}
 8006932:	460c      	mov	r4, r1
 8006934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006938:	2900      	cmp	r1, #0
 800693a:	b096      	sub	sp, #88	; 0x58
 800693c:	4615      	mov	r5, r2
 800693e:	461e      	mov	r6, r3
 8006940:	da0d      	bge.n	800695e <__swhatbuf_r+0x2e>
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006948:	f04f 0100 	mov.w	r1, #0
 800694c:	bf0c      	ite	eq
 800694e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006952:	2340      	movne	r3, #64	; 0x40
 8006954:	2000      	movs	r0, #0
 8006956:	6031      	str	r1, [r6, #0]
 8006958:	602b      	str	r3, [r5, #0]
 800695a:	b016      	add	sp, #88	; 0x58
 800695c:	bd70      	pop	{r4, r5, r6, pc}
 800695e:	466a      	mov	r2, sp
 8006960:	f000 f8de 	bl	8006b20 <_fstat_r>
 8006964:	2800      	cmp	r0, #0
 8006966:	dbec      	blt.n	8006942 <__swhatbuf_r+0x12>
 8006968:	9901      	ldr	r1, [sp, #4]
 800696a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800696e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006972:	4259      	negs	r1, r3
 8006974:	4159      	adcs	r1, r3
 8006976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800697a:	e7eb      	b.n	8006954 <__swhatbuf_r+0x24>

0800697c <__smakebuf_r>:
 800697c:	898b      	ldrh	r3, [r1, #12]
 800697e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006980:	079d      	lsls	r5, r3, #30
 8006982:	4606      	mov	r6, r0
 8006984:	460c      	mov	r4, r1
 8006986:	d507      	bpl.n	8006998 <__smakebuf_r+0x1c>
 8006988:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	6123      	str	r3, [r4, #16]
 8006990:	2301      	movs	r3, #1
 8006992:	6163      	str	r3, [r4, #20]
 8006994:	b002      	add	sp, #8
 8006996:	bd70      	pop	{r4, r5, r6, pc}
 8006998:	ab01      	add	r3, sp, #4
 800699a:	466a      	mov	r2, sp
 800699c:	f7ff ffc8 	bl	8006930 <__swhatbuf_r>
 80069a0:	9900      	ldr	r1, [sp, #0]
 80069a2:	4605      	mov	r5, r0
 80069a4:	4630      	mov	r0, r6
 80069a6:	f7ff f9c9 	bl	8005d3c <_malloc_r>
 80069aa:	b948      	cbnz	r0, 80069c0 <__smakebuf_r+0x44>
 80069ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069b0:	059a      	lsls	r2, r3, #22
 80069b2:	d4ef      	bmi.n	8006994 <__smakebuf_r+0x18>
 80069b4:	f023 0303 	bic.w	r3, r3, #3
 80069b8:	f043 0302 	orr.w	r3, r3, #2
 80069bc:	81a3      	strh	r3, [r4, #12]
 80069be:	e7e3      	b.n	8006988 <__smakebuf_r+0xc>
 80069c0:	89a3      	ldrh	r3, [r4, #12]
 80069c2:	6020      	str	r0, [r4, #0]
 80069c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c8:	81a3      	strh	r3, [r4, #12]
 80069ca:	9b00      	ldr	r3, [sp, #0]
 80069cc:	6163      	str	r3, [r4, #20]
 80069ce:	9b01      	ldr	r3, [sp, #4]
 80069d0:	6120      	str	r0, [r4, #16]
 80069d2:	b15b      	cbz	r3, 80069ec <__smakebuf_r+0x70>
 80069d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069d8:	4630      	mov	r0, r6
 80069da:	f000 f8b3 	bl	8006b44 <_isatty_r>
 80069de:	b128      	cbz	r0, 80069ec <__smakebuf_r+0x70>
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	f023 0303 	bic.w	r3, r3, #3
 80069e6:	f043 0301 	orr.w	r3, r3, #1
 80069ea:	81a3      	strh	r3, [r4, #12]
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	431d      	orrs	r5, r3
 80069f0:	81a5      	strh	r5, [r4, #12]
 80069f2:	e7cf      	b.n	8006994 <__smakebuf_r+0x18>

080069f4 <__swbuf_r>:
 80069f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f6:	460e      	mov	r6, r1
 80069f8:	4614      	mov	r4, r2
 80069fa:	4605      	mov	r5, r0
 80069fc:	b118      	cbz	r0, 8006a06 <__swbuf_r+0x12>
 80069fe:	6a03      	ldr	r3, [r0, #32]
 8006a00:	b90b      	cbnz	r3, 8006a06 <__swbuf_r+0x12>
 8006a02:	f7fe f8f3 	bl	8004bec <__sinit>
 8006a06:	69a3      	ldr	r3, [r4, #24]
 8006a08:	60a3      	str	r3, [r4, #8]
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	071a      	lsls	r2, r3, #28
 8006a0e:	d525      	bpl.n	8006a5c <__swbuf_r+0x68>
 8006a10:	6923      	ldr	r3, [r4, #16]
 8006a12:	b31b      	cbz	r3, 8006a5c <__swbuf_r+0x68>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	6922      	ldr	r2, [r4, #16]
 8006a18:	1a98      	subs	r0, r3, r2
 8006a1a:	6963      	ldr	r3, [r4, #20]
 8006a1c:	b2f6      	uxtb	r6, r6
 8006a1e:	4283      	cmp	r3, r0
 8006a20:	4637      	mov	r7, r6
 8006a22:	dc04      	bgt.n	8006a2e <__swbuf_r+0x3a>
 8006a24:	4621      	mov	r1, r4
 8006a26:	4628      	mov	r0, r5
 8006a28:	f7ff ff5a 	bl	80068e0 <_fflush_r>
 8006a2c:	b9e0      	cbnz	r0, 8006a68 <__swbuf_r+0x74>
 8006a2e:	68a3      	ldr	r3, [r4, #8]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	60a3      	str	r3, [r4, #8]
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	6022      	str	r2, [r4, #0]
 8006a3a:	701e      	strb	r6, [r3, #0]
 8006a3c:	6962      	ldr	r2, [r4, #20]
 8006a3e:	1c43      	adds	r3, r0, #1
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d004      	beq.n	8006a4e <__swbuf_r+0x5a>
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	07db      	lsls	r3, r3, #31
 8006a48:	d506      	bpl.n	8006a58 <__swbuf_r+0x64>
 8006a4a:	2e0a      	cmp	r6, #10
 8006a4c:	d104      	bne.n	8006a58 <__swbuf_r+0x64>
 8006a4e:	4621      	mov	r1, r4
 8006a50:	4628      	mov	r0, r5
 8006a52:	f7ff ff45 	bl	80068e0 <_fflush_r>
 8006a56:	b938      	cbnz	r0, 8006a68 <__swbuf_r+0x74>
 8006a58:	4638      	mov	r0, r7
 8006a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 f806 	bl	8006a70 <__swsetup_r>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d0d5      	beq.n	8006a14 <__swbuf_r+0x20>
 8006a68:	f04f 37ff 	mov.w	r7, #4294967295
 8006a6c:	e7f4      	b.n	8006a58 <__swbuf_r+0x64>
	...

08006a70 <__swsetup_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4b2a      	ldr	r3, [pc, #168]	; (8006b1c <__swsetup_r+0xac>)
 8006a74:	4605      	mov	r5, r0
 8006a76:	6818      	ldr	r0, [r3, #0]
 8006a78:	460c      	mov	r4, r1
 8006a7a:	b118      	cbz	r0, 8006a84 <__swsetup_r+0x14>
 8006a7c:	6a03      	ldr	r3, [r0, #32]
 8006a7e:	b90b      	cbnz	r3, 8006a84 <__swsetup_r+0x14>
 8006a80:	f7fe f8b4 	bl	8004bec <__sinit>
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a8a:	0718      	lsls	r0, r3, #28
 8006a8c:	d422      	bmi.n	8006ad4 <__swsetup_r+0x64>
 8006a8e:	06d9      	lsls	r1, r3, #27
 8006a90:	d407      	bmi.n	8006aa2 <__swsetup_r+0x32>
 8006a92:	2309      	movs	r3, #9
 8006a94:	602b      	str	r3, [r5, #0]
 8006a96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a9a:	81a3      	strh	r3, [r4, #12]
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa0:	e034      	b.n	8006b0c <__swsetup_r+0x9c>
 8006aa2:	0758      	lsls	r0, r3, #29
 8006aa4:	d512      	bpl.n	8006acc <__swsetup_r+0x5c>
 8006aa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aa8:	b141      	cbz	r1, 8006abc <__swsetup_r+0x4c>
 8006aaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aae:	4299      	cmp	r1, r3
 8006ab0:	d002      	beq.n	8006ab8 <__swsetup_r+0x48>
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f7ff f8ce 	bl	8005c54 <_free_r>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	6363      	str	r3, [r4, #52]	; 0x34
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ac2:	81a3      	strh	r3, [r4, #12]
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	6063      	str	r3, [r4, #4]
 8006ac8:	6923      	ldr	r3, [r4, #16]
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	89a3      	ldrh	r3, [r4, #12]
 8006ace:	f043 0308 	orr.w	r3, r3, #8
 8006ad2:	81a3      	strh	r3, [r4, #12]
 8006ad4:	6923      	ldr	r3, [r4, #16]
 8006ad6:	b94b      	cbnz	r3, 8006aec <__swsetup_r+0x7c>
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae2:	d003      	beq.n	8006aec <__swsetup_r+0x7c>
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f7ff ff48 	bl	800697c <__smakebuf_r>
 8006aec:	89a0      	ldrh	r0, [r4, #12]
 8006aee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006af2:	f010 0301 	ands.w	r3, r0, #1
 8006af6:	d00a      	beq.n	8006b0e <__swsetup_r+0x9e>
 8006af8:	2300      	movs	r3, #0
 8006afa:	60a3      	str	r3, [r4, #8]
 8006afc:	6963      	ldr	r3, [r4, #20]
 8006afe:	425b      	negs	r3, r3
 8006b00:	61a3      	str	r3, [r4, #24]
 8006b02:	6923      	ldr	r3, [r4, #16]
 8006b04:	b943      	cbnz	r3, 8006b18 <__swsetup_r+0xa8>
 8006b06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b0a:	d1c4      	bne.n	8006a96 <__swsetup_r+0x26>
 8006b0c:	bd38      	pop	{r3, r4, r5, pc}
 8006b0e:	0781      	lsls	r1, r0, #30
 8006b10:	bf58      	it	pl
 8006b12:	6963      	ldrpl	r3, [r4, #20]
 8006b14:	60a3      	str	r3, [r4, #8]
 8006b16:	e7f4      	b.n	8006b02 <__swsetup_r+0x92>
 8006b18:	2000      	movs	r0, #0
 8006b1a:	e7f7      	b.n	8006b0c <__swsetup_r+0x9c>
 8006b1c:	20000064 	.word	0x20000064

08006b20 <_fstat_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4d07      	ldr	r5, [pc, #28]	; (8006b40 <_fstat_r+0x20>)
 8006b24:	2300      	movs	r3, #0
 8006b26:	4604      	mov	r4, r0
 8006b28:	4608      	mov	r0, r1
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	602b      	str	r3, [r5, #0]
 8006b2e:	f7fa fc2e 	bl	800138e <_fstat>
 8006b32:	1c43      	adds	r3, r0, #1
 8006b34:	d102      	bne.n	8006b3c <_fstat_r+0x1c>
 8006b36:	682b      	ldr	r3, [r5, #0]
 8006b38:	b103      	cbz	r3, 8006b3c <_fstat_r+0x1c>
 8006b3a:	6023      	str	r3, [r4, #0]
 8006b3c:	bd38      	pop	{r3, r4, r5, pc}
 8006b3e:	bf00      	nop
 8006b40:	20000408 	.word	0x20000408

08006b44 <_isatty_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4d06      	ldr	r5, [pc, #24]	; (8006b60 <_isatty_r+0x1c>)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	602b      	str	r3, [r5, #0]
 8006b50:	f7fa fc2d 	bl	80013ae <_isatty>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d102      	bne.n	8006b5e <_isatty_r+0x1a>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	b103      	cbz	r3, 8006b5e <_isatty_r+0x1a>
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	20000408 	.word	0x20000408

08006b64 <_sbrk_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4d06      	ldr	r5, [pc, #24]	; (8006b80 <_sbrk_r+0x1c>)
 8006b68:	2300      	movs	r3, #0
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	4608      	mov	r0, r1
 8006b6e:	602b      	str	r3, [r5, #0]
 8006b70:	f7fa fc36 	bl	80013e0 <_sbrk>
 8006b74:	1c43      	adds	r3, r0, #1
 8006b76:	d102      	bne.n	8006b7e <_sbrk_r+0x1a>
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	b103      	cbz	r3, 8006b7e <_sbrk_r+0x1a>
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	20000408 	.word	0x20000408

08006b84 <memcpy>:
 8006b84:	440a      	add	r2, r1
 8006b86:	4291      	cmp	r1, r2
 8006b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b8c:	d100      	bne.n	8006b90 <memcpy+0xc>
 8006b8e:	4770      	bx	lr
 8006b90:	b510      	push	{r4, lr}
 8006b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b9a:	4291      	cmp	r1, r2
 8006b9c:	d1f9      	bne.n	8006b92 <memcpy+0xe>
 8006b9e:	bd10      	pop	{r4, pc}

08006ba0 <__assert_func>:
 8006ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ba2:	4614      	mov	r4, r2
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <__assert_func+0x2c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4605      	mov	r5, r0
 8006bac:	68d8      	ldr	r0, [r3, #12]
 8006bae:	b14c      	cbz	r4, 8006bc4 <__assert_func+0x24>
 8006bb0:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <__assert_func+0x30>)
 8006bb2:	9100      	str	r1, [sp, #0]
 8006bb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bb8:	4906      	ldr	r1, [pc, #24]	; (8006bd4 <__assert_func+0x34>)
 8006bba:	462b      	mov	r3, r5
 8006bbc:	f000 f844 	bl	8006c48 <fiprintf>
 8006bc0:	f000 f854 	bl	8006c6c <abort>
 8006bc4:	4b04      	ldr	r3, [pc, #16]	; (8006bd8 <__assert_func+0x38>)
 8006bc6:	461c      	mov	r4, r3
 8006bc8:	e7f3      	b.n	8006bb2 <__assert_func+0x12>
 8006bca:	bf00      	nop
 8006bcc:	20000064 	.word	0x20000064
 8006bd0:	08006f7f 	.word	0x08006f7f
 8006bd4:	08006f8c 	.word	0x08006f8c
 8006bd8:	08006fba 	.word	0x08006fba

08006bdc <_calloc_r>:
 8006bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bde:	fba1 2402 	umull	r2, r4, r1, r2
 8006be2:	b94c      	cbnz	r4, 8006bf8 <_calloc_r+0x1c>
 8006be4:	4611      	mov	r1, r2
 8006be6:	9201      	str	r2, [sp, #4]
 8006be8:	f7ff f8a8 	bl	8005d3c <_malloc_r>
 8006bec:	9a01      	ldr	r2, [sp, #4]
 8006bee:	4605      	mov	r5, r0
 8006bf0:	b930      	cbnz	r0, 8006c00 <_calloc_r+0x24>
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	b003      	add	sp, #12
 8006bf6:	bd30      	pop	{r4, r5, pc}
 8006bf8:	220c      	movs	r2, #12
 8006bfa:	6002      	str	r2, [r0, #0]
 8006bfc:	2500      	movs	r5, #0
 8006bfe:	e7f8      	b.n	8006bf2 <_calloc_r+0x16>
 8006c00:	4621      	mov	r1, r4
 8006c02:	f7fe f92c 	bl	8004e5e <memset>
 8006c06:	e7f4      	b.n	8006bf2 <_calloc_r+0x16>

08006c08 <__ascii_mbtowc>:
 8006c08:	b082      	sub	sp, #8
 8006c0a:	b901      	cbnz	r1, 8006c0e <__ascii_mbtowc+0x6>
 8006c0c:	a901      	add	r1, sp, #4
 8006c0e:	b142      	cbz	r2, 8006c22 <__ascii_mbtowc+0x1a>
 8006c10:	b14b      	cbz	r3, 8006c26 <__ascii_mbtowc+0x1e>
 8006c12:	7813      	ldrb	r3, [r2, #0]
 8006c14:	600b      	str	r3, [r1, #0]
 8006c16:	7812      	ldrb	r2, [r2, #0]
 8006c18:	1e10      	subs	r0, r2, #0
 8006c1a:	bf18      	it	ne
 8006c1c:	2001      	movne	r0, #1
 8006c1e:	b002      	add	sp, #8
 8006c20:	4770      	bx	lr
 8006c22:	4610      	mov	r0, r2
 8006c24:	e7fb      	b.n	8006c1e <__ascii_mbtowc+0x16>
 8006c26:	f06f 0001 	mvn.w	r0, #1
 8006c2a:	e7f8      	b.n	8006c1e <__ascii_mbtowc+0x16>

08006c2c <__ascii_wctomb>:
 8006c2c:	b149      	cbz	r1, 8006c42 <__ascii_wctomb+0x16>
 8006c2e:	2aff      	cmp	r2, #255	; 0xff
 8006c30:	bf85      	ittet	hi
 8006c32:	238a      	movhi	r3, #138	; 0x8a
 8006c34:	6003      	strhi	r3, [r0, #0]
 8006c36:	700a      	strbls	r2, [r1, #0]
 8006c38:	f04f 30ff 	movhi.w	r0, #4294967295
 8006c3c:	bf98      	it	ls
 8006c3e:	2001      	movls	r0, #1
 8006c40:	4770      	bx	lr
 8006c42:	4608      	mov	r0, r1
 8006c44:	4770      	bx	lr
	...

08006c48 <fiprintf>:
 8006c48:	b40e      	push	{r1, r2, r3}
 8006c4a:	b503      	push	{r0, r1, lr}
 8006c4c:	4601      	mov	r1, r0
 8006c4e:	ab03      	add	r3, sp, #12
 8006c50:	4805      	ldr	r0, [pc, #20]	; (8006c68 <fiprintf+0x20>)
 8006c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c56:	6800      	ldr	r0, [r0, #0]
 8006c58:	9301      	str	r3, [sp, #4]
 8006c5a:	f7ff fca1 	bl	80065a0 <_vfiprintf_r>
 8006c5e:	b002      	add	sp, #8
 8006c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c64:	b003      	add	sp, #12
 8006c66:	4770      	bx	lr
 8006c68:	20000064 	.word	0x20000064

08006c6c <abort>:
 8006c6c:	b508      	push	{r3, lr}
 8006c6e:	2006      	movs	r0, #6
 8006c70:	f000 f82c 	bl	8006ccc <raise>
 8006c74:	2001      	movs	r0, #1
 8006c76:	f7fa fb3b 	bl	80012f0 <_exit>

08006c7a <_raise_r>:
 8006c7a:	291f      	cmp	r1, #31
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4604      	mov	r4, r0
 8006c80:	460d      	mov	r5, r1
 8006c82:	d904      	bls.n	8006c8e <_raise_r+0x14>
 8006c84:	2316      	movs	r3, #22
 8006c86:	6003      	str	r3, [r0, #0]
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8c:	bd38      	pop	{r3, r4, r5, pc}
 8006c8e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006c90:	b112      	cbz	r2, 8006c98 <_raise_r+0x1e>
 8006c92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c96:	b94b      	cbnz	r3, 8006cac <_raise_r+0x32>
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 f831 	bl	8006d00 <_getpid_r>
 8006c9e:	462a      	mov	r2, r5
 8006ca0:	4601      	mov	r1, r0
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ca8:	f000 b818 	b.w	8006cdc <_kill_r>
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d00a      	beq.n	8006cc6 <_raise_r+0x4c>
 8006cb0:	1c59      	adds	r1, r3, #1
 8006cb2:	d103      	bne.n	8006cbc <_raise_r+0x42>
 8006cb4:	2316      	movs	r3, #22
 8006cb6:	6003      	str	r3, [r0, #0]
 8006cb8:	2001      	movs	r0, #1
 8006cba:	e7e7      	b.n	8006c8c <_raise_r+0x12>
 8006cbc:	2400      	movs	r4, #0
 8006cbe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	4798      	blx	r3
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	e7e0      	b.n	8006c8c <_raise_r+0x12>
	...

08006ccc <raise>:
 8006ccc:	4b02      	ldr	r3, [pc, #8]	; (8006cd8 <raise+0xc>)
 8006cce:	4601      	mov	r1, r0
 8006cd0:	6818      	ldr	r0, [r3, #0]
 8006cd2:	f7ff bfd2 	b.w	8006c7a <_raise_r>
 8006cd6:	bf00      	nop
 8006cd8:	20000064 	.word	0x20000064

08006cdc <_kill_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4d07      	ldr	r5, [pc, #28]	; (8006cfc <_kill_r+0x20>)
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	4608      	mov	r0, r1
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	f7fa faf1 	bl	80012d0 <_kill>
 8006cee:	1c43      	adds	r3, r0, #1
 8006cf0:	d102      	bne.n	8006cf8 <_kill_r+0x1c>
 8006cf2:	682b      	ldr	r3, [r5, #0]
 8006cf4:	b103      	cbz	r3, 8006cf8 <_kill_r+0x1c>
 8006cf6:	6023      	str	r3, [r4, #0]
 8006cf8:	bd38      	pop	{r3, r4, r5, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20000408 	.word	0x20000408

08006d00 <_getpid_r>:
 8006d00:	f7fa bade 	b.w	80012c0 <_getpid>

08006d04 <_init>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	bf00      	nop
 8006d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0a:	bc08      	pop	{r3}
 8006d0c:	469e      	mov	lr, r3
 8006d0e:	4770      	bx	lr

08006d10 <_fini>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	bf00      	nop
 8006d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d16:	bc08      	pop	{r3}
 8006d18:	469e      	mov	lr, r3
 8006d1a:	4770      	bx	lr
